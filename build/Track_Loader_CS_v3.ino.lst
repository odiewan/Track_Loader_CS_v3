
C:\Users\Odie\source\repos\Arduino Projects\Track_Loader_CS_v3\build/Track_Loader_CS_v3.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
// rxToSrvo *rtsThr;

//-----------------------------------------------------------------------------
void serPringCompassObj() {

  if(imuOK) {
       0:	00 80 00 20 bd 01 00 00 41 0e 00 00 fd 0d 00 00     ... ....A.......

    // serPrntVNL("X", imuX);
    // serPrntVNL("Y", imuY);
    // serPrntVNL("Z", imuZ);

    serPrntVNL("Azim:", azim);
      10:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      20:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 41 0e 00 00     ............A...
    serPrntVNL("dAzim:", dAzim);
      30:	41 0e 00 00 fd 0d 00 00 7d 21 00 00 81 21 00 00     A.......}!...!..
    serPrntVNL("dAzim0:", dAzim0);
      40:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
    // serPrintN();
  }
}
      50:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
      60:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
    if(nVal >= 0)
        Serial.print(" ");

    Serial.print(nVal);
    appendSuffix(nSuffix);
}
      70:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
		rounding *= 0.1;
      80:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
      90:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
	for (uint8_t i=0; i<digits; ++i) {
      a0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
	}
	number += rounding;
      b0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
      c0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
      d0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
      e0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
      f0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
     100:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
     110:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
     120:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
		while (digits-- > 0) {
     130:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
		}
		count += write(buf, count);
     140:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     150:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
     160:	41 0e 00 00 ad 14 00 00 41 0e 00 00 41 0e 00 00     A.......A...A...
     170:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
	number += rounding;
     180:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
	}
	return count;
}
     190:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
     1a0:	41 0e 00 00 41 0e 00 00 41 0e 00 00 41 0e 00 00     A...A...A...A...
     1b0:	41 0e 00 00 41 0e 00 00 41 0e 00 00                 A...A...A...

000001bc <ResetHandler>:
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	81da      	strh	r2, [r3, #14]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	81da      	strh	r2, [r3, #14]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f000 fe3a 	bl	e48 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	631a      	str	r2, [r3, #48]	; 0x30
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
		RTC_SR = 0;
     1ee:	6153      	str	r3, [r2, #20]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f4:	6113      	str	r3, [r2, #16]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
     204:	709a      	strb	r2, [r3, #2]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
	while (dest < &_edata) *dest++ = *src++;
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f000 fd17 	bl	c54 <memcpy>
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f003 f886 	bl	334c <memset>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f000 fd04 	bl	c54 <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     2d6:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d8:	f000 fe0e 	bl	ef8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f000 fdfb 	bl	ee0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f000 fdec 	bl	ee0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f000 fda2 	bl	e54 <startup_late_hook>
	__libc_init_array();
     310:	f003 f8b8 	bl	3484 <__libc_init_array>

	main();
     314:	f000 fc96 	bl	c44 <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff8d20 	.word	0x1fff8d20
     340:	00003ef0 	.word	0x00003ef0
     344:	1fff91bc 	.word	0x1fff91bc
     348:	1fff8d20 	.word	0x1fff8d20
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	65f04010 	.word	0x65f04010
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff8d20 	.word	0x1fff8d20
     42c:	1fff8d20 	.word	0x1fff8d20
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff8d20 	.word	0x1fff8d20
     454:	00003ee8 	.word	0x00003ee8

00000458 <initSerial()>:
//   serPrntVNL("=Cmd", rts.rtsSvoCmd, "> ");

// }

//-----------------------------------------------------------------------------
void initSerial() {
     458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
class usb_serial_class : public Stream
{
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
     45c:	4d31      	ldr	r5, [pc, #196]	; (524 <initSerial()+0xcc>)
     45e:	4c32      	ldr	r4, [pc, #200]	; (528 <initSerial()+0xd0>)
     460:	682e      	ldr	r6, [r5, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     462:	4f32      	ldr	r7, [pc, #200]	; (52c <initSerial()+0xd4>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     464:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 530 <initSerial()+0xd8>
     468:	b084      	sub	sp, #16
				if (elapsed > 750) break;
     46a:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
     46e:	f001 fdeb 	bl	2048 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     472:	7823      	ldrb	r3, [r4, #0]
     474:	2b00      	cmp	r3, #0
     476:	d048      	beq.n	50a <initSerial()+0xb2>
     478:	783b      	ldrb	r3, [r7, #0]
     47a:	07da      	lsls	r2, r3, #31
     47c:	d545      	bpl.n	50a <initSerial()+0xb2>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     47e:	682b      	ldr	r3, [r5, #0]
     480:	f8d9 2000 	ldr.w	r2, [r9]
     484:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     486:	2b0e      	cmp	r3, #14
     488:	d93f      	bls.n	50a <initSerial()+0xb2>
     48a:	4f2a      	ldr	r7, [pc, #168]	; (534 <initSerial()+0xdc>)
     48c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 52c <initSerial()+0xd4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     490:	f8df a09c 	ldr.w	sl, [pc, #156]	; 530 <initSerial()+0xd8>
  {
    if (Serial)
      serialOk = 1;
    delay(1000);

    digitalWrite(STAT_OUT_PIN, toggle);
     494:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 538 <initSerial()+0xe0>
     498:	2603      	movs	r6, #3
  while (tmr > 0 && serialOk == 0)
     49a:	683b      	ldr	r3, [r7, #0]
     49c:	b9d3      	cbnz	r3, 4d4 <initSerial()+0x7c>
		yield();
     49e:	f001 fdd3 	bl	2048 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4a2:	7823      	ldrb	r3, [r4, #0]
    delay(1000);
     4a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4a8:	b15b      	cbz	r3, 4c2 <initSerial()+0x6a>
     4aa:	f899 3000 	ldrb.w	r3, [r9]
     4ae:	07db      	lsls	r3, r3, #31
     4b0:	d507      	bpl.n	4c2 <initSerial()+0x6a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     4b2:	682b      	ldr	r3, [r5, #0]
     4b4:	f8da 1000 	ldr.w	r1, [sl]
     4b8:	1a5b      	subs	r3, r3, r1
      serialOk = 1;
     4ba:	2201      	movs	r2, #1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4bc:	2b0e      	cmp	r3, #14
     4be:	bf88      	it	hi
     4c0:	603a      	strhi	r2, [r7, #0]
    delay(1000);
     4c2:	f000 fe37 	bl	1134 <delay>
    digitalWrite(STAT_OUT_PIN, toggle);
     4c6:	f898 1000 	ldrb.w	r1, [r8]
     4ca:	200d      	movs	r0, #13
     4cc:	f000 fdd0 	bl	1070 <digitalWrite>
  while (tmr > 0 && serialOk == 0)
     4d0:	3e01      	subs	r6, #1
     4d2:	d1e2      	bne.n	49a <initSerial()+0x42>
    tmr--;
  }
  serPrntNL("Serial Ready");
     4d4:	4919      	ldr	r1, [pc, #100]	; (53c <initSerial()+0xe4>)
     4d6:	a801      	add	r0, sp, #4
     4d8:	f000 faa6 	bl	a28 <String::String(char const*)>
     4dc:	a801      	add	r0, sp, #4
     4de:	f000 f953 	bl	788 <serPrntNL(String)>
     4e2:	a801      	add	r0, sp, #4
     4e4:	f000 fada 	bl	a9c <String::~String()>
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     4e8:	4915      	ldr	r1, [pc, #84]	; (540 <initSerial()+0xe8>)
     4ea:	4816      	ldr	r0, [pc, #88]	; (544 <initSerial()+0xec>)
     4ec:	f000 fa56 	bl	99c <Print::print(String const&)>
     4f0:	4814      	ldr	r0, [pc, #80]	; (544 <initSerial()+0xec>)
     4f2:	f000 fa81 	bl	9f8 <Print::println()>
     4f6:	4914      	ldr	r1, [pc, #80]	; (548 <initSerial()+0xf0>)
     4f8:	4812      	ldr	r0, [pc, #72]	; (544 <initSerial()+0xec>)
     4fa:	f000 fa4f 	bl	99c <Print::print(String const&)>
     4fe:	4811      	ldr	r0, [pc, #68]	; (544 <initSerial()+0xec>)
  Serial.println(AppTitle);
  Serial.println(AppVersion);
}
     500:	b004      	add	sp, #16
     502:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     506:	f000 ba77 	b.w	9f8 <Print::println()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     50a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     50c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     50e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     510:	b12a      	cbz	r2, 51e <initSerial()+0xc6>
				if (elapsed > 2000) break;
     512:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     516:	d8b8      	bhi.n	48a <initSerial()+0x32>
			yield();
     518:	f001 fd96 	bl	2048 <yield>
     51c:	e7a7      	b.n	46e <initSerial()+0x16>
				if (elapsed > 750) break;
     51e:	4543      	cmp	r3, r8
     520:	d9fa      	bls.n	518 <initSerial()+0xc0>
     522:	e7b2      	b.n	48a <initSerial()+0x32>
     524:	1fff8d7c 	.word	0x1fff8d7c
     528:	1fff8e5c 	.word	0x1fff8e5c
     52c:	1fff8e80 	.word	0x1fff8e80
     530:	1fff8e84 	.word	0x1fff8e84
     534:	1fff8d68 	.word	0x1fff8d68
     538:	1fff8d70 	.word	0x1fff8d70
     53c:	00003cd8 	.word	0x00003cd8
     540:	1fff8d38 	.word	0x1fff8d38
     544:	1fff8728 	.word	0x1fff8728
     548:	1fff8d44 	.word	0x1fff8d44

0000054c <setup>:

//-----------------------------------------------------------------------------
void setup()
{
  ledState = 0;
     54c:	4a14      	ldr	r2, [pc, #80]	; (5a0 <setup+0x54>)
  icount = 0;
     54e:	4b15      	ldr	r3, [pc, #84]	; (5a4 <setup+0x58>)

  AppTitle = "Track Loader CS v3";
     550:	4915      	ldr	r1, [pc, #84]	; (5a8 <setup+0x5c>)
     552:	4816      	ldr	r0, [pc, #88]	; (5ac <setup+0x60>)
{
     554:	b510      	push	{r4, lr}
  ledState = 0;
     556:	2400      	movs	r4, #0
     558:	7014      	strb	r4, [r2, #0]
  icount = 0;
     55a:	601c      	str	r4, [r3, #0]
  AppTitle = "Track Loader CS v3";
     55c:	f000 fada 	bl	b14 <String::operator=(char const*)>
  AppVersion = "v0.0.1";
     560:	4913      	ldr	r1, [pc, #76]	; (5b0 <setup+0x64>)
     562:	4814      	ldr	r0, [pc, #80]	; (5b4 <setup+0x68>)
     564:	f000 fad6 	bl	b14 <String::operator=(char const*)>

  pinMode(STAT_OUT_PIN, OUTPUT);
     568:	200d      	movs	r0, #13
     56a:	2101      	movs	r1, #1
     56c:	f000 fda6 	bl	10bc <pinMode>
  pinMode(RX_CH0_PIN, INPUT);
     570:	4621      	mov	r1, r4
     572:	2017      	movs	r0, #23
     574:	f000 fda2 	bl	10bc <pinMode>
  pinMode(RX_CH1_PIN, INPUT);
     578:	4621      	mov	r1, r4
     57a:	2016      	movs	r0, #22
     57c:	f000 fd9e 	bl	10bc <pinMode>
  pinMode(RX_CH2_PIN, INPUT);
     580:	4621      	mov	r1, r4
     582:	2015      	movs	r0, #21
     584:	f000 fd9a 	bl	10bc <pinMode>

  initSerial();
     588:	f7ff ff66 	bl	458 <initSerial()>
  // rtsEle = new rxToSrvo("Ele", RX_CH2_PIN, SVO_1_PIN, SVO_CMD_GAIN_INV, SVO_CMD_OFFSET, 1);
  // rtsRud = new rxToSrvo("Rud", RX_CH3_PIN, SVO_2_PIN, SVO_CMD_GAIN_INV, SVO_CMD_OFFSET, 1);

  // lis3mdl = new abstractLIS3MDL();
  // imuOK = lis3mdl->alsStatus;
}
     58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#elif defined(__arm__) && defined(TEENSYDUINO)
  static uint32_t attachedpins[];  // 1 bit per digital pin
#endif
 public:
  PWMServo();
  uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
     590:	4809      	ldr	r0, [pc, #36]	; (5b8 <setup+0x6c>)
     592:	f44f 6316 	mov.w	r3, #2400	; 0x960
     596:	f44f 7208 	mov.w	r2, #544	; 0x220
     59a:	2103      	movs	r1, #3
     59c:	f000 b980 	b.w	8a0 <PWMServo::attach(int, int, int)>
     5a0:	1fff8d54 	.word	0x1fff8d54
     5a4:	1fff8d50 	.word	0x1fff8d50
     5a8:	00003ce8 	.word	0x00003ce8
     5ac:	1fff8d38 	.word	0x1fff8d38
     5b0:	00003cfc 	.word	0x00003cfc
     5b4:	1fff8d44 	.word	0x1fff8d44
     5b8:	1fff8d6c 	.word	0x1fff8d6c

000005bc <loop>:
  // }
}

//-----------------------------------------------------------------------------
void loop()
{
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  int tempAil = 0;
  int tempEle = 0;
  int tempRud = 0;

  taskIMU();
  rxVal00 = pulseIn(RX_CH0_PIN, HIGH, PULSE_IN_TIMEOUT);
     5be:	2219      	movs	r2, #25
{
     5c0:	b087      	sub	sp, #28
  rxVal00 = pulseIn(RX_CH0_PIN, HIGH, PULSE_IN_TIMEOUT);
     5c2:	2101      	movs	r1, #1
     5c4:	2017      	movs	r0, #23
     5c6:	f000 fe9d 	bl	1304 <pulseIn>
     5ca:	4f35      	ldr	r7, [pc, #212]	; (6a0 <loop+0xe4>)
  rxVal01 = pulseIn(RX_CH1_PIN, HIGH, PULSE_IN_TIMEOUT);
     5cc:	4e35      	ldr	r6, [pc, #212]	; (6a4 <loop+0xe8>)
  rxVal02 = pulseIn(RX_CH2_PIN, HIGH, PULSE_IN_TIMEOUT);

  if (icount % 10 == 0) {
     5ce:	4c36      	ldr	r4, [pc, #216]	; (6a8 <loop+0xec>)
  rxVal02 = pulseIn(RX_CH2_PIN, HIGH, PULSE_IN_TIMEOUT);
     5d0:	4d36      	ldr	r5, [pc, #216]	; (6ac <loop+0xf0>)
  rxVal00 = pulseIn(RX_CH0_PIN, HIGH, PULSE_IN_TIMEOUT);
     5d2:	4603      	mov	r3, r0
  rxVal01 = pulseIn(RX_CH1_PIN, HIGH, PULSE_IN_TIMEOUT);
     5d4:	2219      	movs	r2, #25
     5d6:	2101      	movs	r1, #1
     5d8:	2016      	movs	r0, #22
  rxVal00 = pulseIn(RX_CH0_PIN, HIGH, PULSE_IN_TIMEOUT);
     5da:	703b      	strb	r3, [r7, #0]
  rxVal01 = pulseIn(RX_CH1_PIN, HIGH, PULSE_IN_TIMEOUT);
     5dc:	f000 fe92 	bl	1304 <pulseIn>
  rxVal02 = pulseIn(RX_CH2_PIN, HIGH, PULSE_IN_TIMEOUT);
     5e0:	2219      	movs	r2, #25
     5e2:	2101      	movs	r1, #1
  rxVal01 = pulseIn(RX_CH1_PIN, HIGH, PULSE_IN_TIMEOUT);
     5e4:	7030      	strb	r0, [r6, #0]
  rxVal02 = pulseIn(RX_CH2_PIN, HIGH, PULSE_IN_TIMEOUT);
     5e6:	2015      	movs	r0, #21
     5e8:	f000 fe8c 	bl	1304 <pulseIn>
  if (icount % 10 == 0) {
     5ec:	4930      	ldr	r1, [pc, #192]	; (6b0 <loop+0xf4>)
     5ee:	6823      	ldr	r3, [r4, #0]
     5f0:	4a30      	ldr	r2, [pc, #192]	; (6b4 <loop+0xf8>)
  rxVal02 = pulseIn(RX_CH2_PIN, HIGH, PULSE_IN_TIMEOUT);
     5f2:	7028      	strb	r0, [r5, #0]
  if (icount % 10 == 0) {
     5f4:	fb01 2203 	mla	r2, r1, r3, r2
     5f8:	492f      	ldr	r1, [pc, #188]	; (6b8 <loop+0xfc>)
     5fa:	ebb1 0f72 	cmp.w	r1, r2, ror #1
     5fe:	d803      	bhi.n	608 <loop+0x4c>
  // tempRud = rtsRud->processChanR();

  // rtsEle->applyMix(tempAil);
  // rtsAil->applyMix(-tempEle);

  icount++;
     600:	3301      	adds	r3, #1
     602:	6023      	str	r3, [r4, #0]
     604:	b007      	add	sp, #28
     606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serPrntV("i", icount);
     608:	492c      	ldr	r1, [pc, #176]	; (6bc <loop+0x100>)
     60a:	a803      	add	r0, sp, #12
     60c:	f000 fa0c 	bl	a28 <String::String(char const*)>
     610:	4621      	mov	r1, r4
     612:	a803      	add	r0, sp, #12
     614:	f000 f8fc 	bl	810 <serPrntV(String, int&)>
     618:	a803      	add	r0, sp, #12
     61a:	f000 fa3f 	bl	a9c <String::~String()>
    serPrntV("rxVal00:", rxVal00, ">");
     61e:	4928      	ldr	r1, [pc, #160]	; (6c0 <loop+0x104>)
     620:	4668      	mov	r0, sp
     622:	f000 fa01 	bl	a28 <String::String(char const*)>
     626:	783f      	ldrb	r7, [r7, #0]
     628:	4926      	ldr	r1, [pc, #152]	; (6c4 <loop+0x108>)
     62a:	a803      	add	r0, sp, #12
     62c:	f000 f9fc 	bl	a28 <String::String(char const*)>
     630:	aa03      	add	r2, sp, #12
     632:	4639      	mov	r1, r7
     634:	4668      	mov	r0, sp
     636:	f000 f8b5 	bl	7a4 <serPrntV(String, unsigned int, String)>
     63a:	a803      	add	r0, sp, #12
     63c:	f000 fa2e 	bl	a9c <String::~String()>
     640:	4668      	mov	r0, sp
     642:	f000 fa2b 	bl	a9c <String::~String()>
    serPrntV("rxVal01:", rxVal01, ">");
     646:	4920      	ldr	r1, [pc, #128]	; (6c8 <loop+0x10c>)
     648:	4668      	mov	r0, sp
     64a:	f000 f9ed 	bl	a28 <String::String(char const*)>
     64e:	7836      	ldrb	r6, [r6, #0]
     650:	491c      	ldr	r1, [pc, #112]	; (6c4 <loop+0x108>)
     652:	a803      	add	r0, sp, #12
     654:	f000 f9e8 	bl	a28 <String::String(char const*)>
     658:	aa03      	add	r2, sp, #12
     65a:	4631      	mov	r1, r6
     65c:	4668      	mov	r0, sp
     65e:	f000 f8a1 	bl	7a4 <serPrntV(String, unsigned int, String)>
     662:	a803      	add	r0, sp, #12
     664:	f000 fa1a 	bl	a9c <String::~String()>
     668:	4668      	mov	r0, sp
     66a:	f000 fa17 	bl	a9c <String::~String()>
    serPrntVNL("rxVal02:", rxVal02, ">");
     66e:	4917      	ldr	r1, [pc, #92]	; (6cc <loop+0x110>)
     670:	4668      	mov	r0, sp
     672:	f000 f9d9 	bl	a28 <String::String(char const*)>
     676:	782d      	ldrb	r5, [r5, #0]
     678:	4912      	ldr	r1, [pc, #72]	; (6c4 <loop+0x108>)
     67a:	a803      	add	r0, sp, #12
     67c:	f000 f9d4 	bl	a28 <String::String(char const*)>
     680:	aa03      	add	r2, sp, #12
     682:	4629      	mov	r1, r5
     684:	4668      	mov	r0, sp
     686:	f000 f8e7 	bl	858 <serPrntVNL(String, unsigned int, String)>
     68a:	a803      	add	r0, sp, #12
     68c:	f000 fa06 	bl	a9c <String::~String()>
     690:	4668      	mov	r0, sp
     692:	f000 fa03 	bl	a9c <String::~String()>
  icount++;
     696:	6823      	ldr	r3, [r4, #0]
     698:	3301      	adds	r3, #1
     69a:	6023      	str	r3, [r4, #0]
     69c:	b007      	add	sp, #28
     69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a0:	1fff8d64 	.word	0x1fff8d64
     6a4:	1fff8d65 	.word	0x1fff8d65
     6a8:	1fff8d50 	.word	0x1fff8d50
     6ac:	1fff8d66 	.word	0x1fff8d66
     6b0:	cccccccd 	.word	0xcccccccd
     6b4:	19999998 	.word	0x19999998
     6b8:	19999999 	.word	0x19999999
     6bc:	00003d04 	.word	0x00003d04
     6c0:	00003d08 	.word	0x00003d08
     6c4:	00003d14 	.word	0x00003d14
     6c8:	00003d18 	.word	0x00003d18
     6cc:	00003d24 	.word	0x00003d24

000006d0 <_GLOBAL__sub_I_AppTitle>:
     6d0:	b570      	push	{r4, r5, r6, lr}
String AppTitle;
     6d2:	4c12      	ldr	r4, [pc, #72]	; (71c <_GLOBAL__sub_I_AppTitle+0x4c>)
     6d4:	4e12      	ldr	r6, [pc, #72]	; (720 <_GLOBAL__sub_I_AppTitle+0x50>)
     6d6:	4d13      	ldr	r5, [pc, #76]	; (724 <_GLOBAL__sub_I_AppTitle+0x54>)
     6d8:	2100      	movs	r1, #0
     6da:	4620      	mov	r0, r4
     6dc:	f000 f9a4 	bl	a28 <String::String(char const*)>
     6e0:	4620      	mov	r0, r4
String AppVersion;
     6e2:	4c11      	ldr	r4, [pc, #68]	; (728 <_GLOBAL__sub_I_AppTitle+0x58>)
String AppTitle;
     6e4:	4632      	mov	r2, r6
     6e6:	4629      	mov	r1, r5
     6e8:	f001 fdf0 	bl	22cc <__aeabi_atexit>
String AppVersion;
     6ec:	2100      	movs	r1, #0
     6ee:	4620      	mov	r0, r4
     6f0:	f000 f99a 	bl	a28 <String::String(char const*)>
     6f4:	4632      	mov	r2, r6
     6f6:	4629      	mov	r1, r5
     6f8:	4620      	mov	r0, r4
     6fa:	f001 fde7 	bl	22cc <__aeabi_atexit>
PWMServo svoOut00;
     6fe:	480b      	ldr	r0, [pc, #44]	; (72c <_GLOBAL__sub_I_AppTitle+0x5c>)
     700:	f000 f8ca 	bl	898 <PWMServo::PWMServo()>
PWMServo rxChanIn00;
     704:	480a      	ldr	r0, [pc, #40]	; (730 <_GLOBAL__sub_I_AppTitle+0x60>)
     706:	f000 f8c7 	bl	898 <PWMServo::PWMServo()>
PWMServo rxChanIn01;
     70a:	480a      	ldr	r0, [pc, #40]	; (734 <_GLOBAL__sub_I_AppTitle+0x64>)
     70c:	f000 f8c4 	bl	898 <PWMServo::PWMServo()>
     710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
PWMServo rxChanIn02;
     714:	4808      	ldr	r0, [pc, #32]	; (738 <_GLOBAL__sub_I_AppTitle+0x68>)
     716:	f000 b8bf 	b.w	898 <PWMServo::PWMServo()>
     71a:	bf00      	nop
     71c:	1fff8d38 	.word	0x1fff8d38
     720:	1fff8720 	.word	0x1fff8720
     724:	00000a9d 	.word	0x00000a9d
     728:	1fff8d44 	.word	0x1fff8d44
     72c:	1fff8d6c 	.word	0x1fff8d6c
     730:	1fff8d58 	.word	0x1fff8d58
     734:	1fff8d5c 	.word	0x1fff8d5c
     738:	1fff8d60 	.word	0x1fff8d60

0000073c <appendSuffix(String)>:
void appendSuffix(String nSuffix) {
     73c:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     73e:	490f      	ldr	r1, [pc, #60]	; (77c <appendSuffix(String)+0x40>)
     740:	b084      	sub	sp, #16
     742:	4604      	mov	r4, r0
     744:	f000 fa4e 	bl	be4 <String::equals(char const*) const>
    if (nSuffix == "")
     748:	b130      	cbz	r0, 758 <appendSuffix(String)+0x1c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     74a:	480c      	ldr	r0, [pc, #48]	; (77c <appendSuffix(String)+0x40>)
     74c:	2100      	movs	r1, #0
}
     74e:	b004      	add	sp, #16
     750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     754:	f001 bb72 	b.w	1e3c <usb_serial_write>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     758:	4909      	ldr	r1, [pc, #36]	; (780 <appendSuffix(String)+0x44>)
     75a:	a801      	add	r0, sp, #4
     75c:	f000 f964 	bl	a28 <String::String(char const*)>
        Serial.print(" " + nSuffix);
     760:	4621      	mov	r1, r4
     762:	a801      	add	r0, sp, #4
     764:	f000 fa28 	bl	bb8 <operator+(StringSumHelper const&, String const&)>
     768:	4601      	mov	r1, r0
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <appendSuffix(String)+0x48>)
     76c:	f000 f916 	bl	99c <Print::print(String const&)>
class StringSumHelper : public String
     770:	a801      	add	r0, sp, #4
     772:	f000 f993 	bl	a9c <String::~String()>
}
     776:	b004      	add	sp, #16
     778:	bd10      	pop	{r4, pc}
     77a:	bf00      	nop
     77c:	00003d10 	.word	0x00003d10
     780:	00003d30 	.word	0x00003d30
     784:	1fff8728 	.word	0x1fff8728

00000788 <serPrntNL(String)>:
void serPrntNL(String nMsg) {
     788:	b510      	push	{r4, lr}
     78a:	4c05      	ldr	r4, [pc, #20]	; (7a0 <serPrntNL(String)+0x18>)
     78c:	4601      	mov	r1, r0
     78e:	4620      	mov	r0, r4
     790:	f000 f904 	bl	99c <Print::print(String const&)>
     794:	4620      	mov	r0, r4
}
     796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     79a:	f000 b92d 	b.w	9f8 <Print::println()>
     79e:	bf00      	nop
     7a0:	1fff8728 	.word	0x1fff8728

000007a4 <serPrntV(String, unsigned int, String)>:
void serPrntV(String nLabel, unsigned int nVal, String nSuffix) {
     7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	StringSumHelper(const char *p) : String(p) {}
     7a6:	4f17      	ldr	r7, [pc, #92]	; (804 <serPrntV(String, unsigned int, String)+0x60>)
     7a8:	b085      	sub	sp, #20
     7aa:	4606      	mov	r6, r0
     7ac:	460d      	mov	r5, r1
     7ae:	a801      	add	r0, sp, #4
     7b0:	4639      	mov	r1, r7
     7b2:	4614      	mov	r4, r2
     7b4:	f000 f938 	bl	a28 <String::String(char const*)>
    Serial.print(" " + nLabel + ":");
     7b8:	4631      	mov	r1, r6
     7ba:	a801      	add	r0, sp, #4
     7bc:	f000 f9fc 	bl	bb8 <operator+(StringSumHelper const&, String const&)>
     7c0:	4911      	ldr	r1, [pc, #68]	; (808 <serPrntV(String, unsigned int, String)+0x64>)
     7c2:	4e12      	ldr	r6, [pc, #72]	; (80c <serPrntV(String, unsigned int, String)+0x68>)
     7c4:	f000 fa00 	bl	bc8 <operator+(StringSumHelper const&, char const*)>
     7c8:	4601      	mov	r1, r0
     7ca:	4630      	mov	r0, r6
     7cc:	f000 f8e6 	bl	99c <Print::print(String const&)>
class StringSumHelper : public String
     7d0:	a801      	add	r0, sp, #4
     7d2:	f000 f963 	bl	a9c <String::~String()>
     7d6:	4638      	mov	r0, r7
     7d8:	2101      	movs	r1, #1
     7da:	f001 fb2f 	bl	1e3c <usb_serial_write>
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     7de:	2300      	movs	r3, #0
     7e0:	220a      	movs	r2, #10
     7e2:	4629      	mov	r1, r5
     7e4:	4630      	mov	r0, r6
     7e6:	f000 f915 	bl	a14 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    appendSuffix(nSuffix);
     7ea:	4621      	mov	r1, r4
     7ec:	a801      	add	r0, sp, #4
     7ee:	f000 f939 	bl	a64 <String::String(String const&)>
     7f2:	a801      	add	r0, sp, #4
     7f4:	f7ff ffa2 	bl	73c <appendSuffix(String)>
     7f8:	a801      	add	r0, sp, #4
     7fa:	f000 f94f 	bl	a9c <String::~String()>
}
     7fe:	b005      	add	sp, #20
     800:	bdf0      	pop	{r4, r5, r6, r7, pc}
     802:	bf00      	nop
     804:	00003d30 	.word	0x00003d30
     808:	00003d34 	.word	0x00003d34
     80c:	1fff8728 	.word	0x1fff8728

00000810 <serPrntV(String, int&)>:
    Serial.print(nVal);
    appendSuffix(nSuffix);
}

//=================================================================================================
void serPrntV(String nLabel, int &nVal) {
     810:	b530      	push	{r4, r5, lr}
     812:	b085      	sub	sp, #20
     814:	460c      	mov	r4, r1
     816:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     818:	490c      	ldr	r1, [pc, #48]	; (84c <serPrntV(String, int&)+0x3c>)
     81a:	a801      	add	r0, sp, #4
     81c:	f000 f904 	bl	a28 <String::String(char const*)>
  Serial.print(" " + nLabel + ":");
     820:	4629      	mov	r1, r5
     822:	a801      	add	r0, sp, #4
     824:	f000 f9c8 	bl	bb8 <operator+(StringSumHelper const&, String const&)>
     828:	4909      	ldr	r1, [pc, #36]	; (850 <serPrntV(String, int&)+0x40>)
     82a:	4d0a      	ldr	r5, [pc, #40]	; (854 <serPrntV(String, int&)+0x44>)
     82c:	f000 f9cc 	bl	bc8 <operator+(StringSumHelper const&, char const*)>
     830:	4601      	mov	r1, r0
     832:	4628      	mov	r0, r5
     834:	f000 f8b2 	bl	99c <Print::print(String const&)>
class StringSumHelper : public String
     838:	a801      	add	r0, sp, #4
     83a:	f000 f92f 	bl	a9c <String::~String()>
	size_t print(int n)				{ return print((long)n); }
     83e:	6821      	ldr	r1, [r4, #0]
     840:	4628      	mov	r0, r5

  Serial.print(nVal);
}
     842:	b005      	add	sp, #20
     844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     848:	f000 b8ce 	b.w	9e8 <Print::print(long)>
     84c:	00003d30 	.word	0x00003d30
     850:	00003d34 	.word	0x00003d34
     854:	1fff8728 	.word	0x1fff8728

00000858 <serPrntVNL(String, unsigned int, String)>:
//     Serial.println();

// }

//=================================================================================================
void serPrntVNL(String nLabel, unsigned int nVal, String nSuffix) {
     858:	b530      	push	{r4, r5, lr}
     85a:	b087      	sub	sp, #28
     85c:	4615      	mov	r5, r2
     85e:	460c      	mov	r4, r1
    serPrntV(nLabel, nVal, nSuffix);
     860:	4601      	mov	r1, r0
     862:	4668      	mov	r0, sp
     864:	f000 f8fe 	bl	a64 <String::String(String const&)>
     868:	4629      	mov	r1, r5
     86a:	a803      	add	r0, sp, #12
     86c:	f000 f8fa 	bl	a64 <String::String(String const&)>
     870:	aa03      	add	r2, sp, #12
     872:	4621      	mov	r1, r4
     874:	4668      	mov	r0, sp
     876:	f7ff ff95 	bl	7a4 <serPrntV(String, unsigned int, String)>
     87a:	a803      	add	r0, sp, #12
     87c:	f000 f90e 	bl	a9c <String::~String()>
     880:	4668      	mov	r0, sp
     882:	f000 f90b 	bl	a9c <String::~String()>
    Serial.println();
     886:	4803      	ldr	r0, [pc, #12]	; (894 <serPrntVNL(String, unsigned int, String)+0x3c>)
}
     888:	b007      	add	sp, #28
     88a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.println();
     88e:	f000 b8b3 	b.w	9f8 <Print::println()>
     892:	bf00      	nop
     894:	1fff8728 	.word	0x1fff8728

00000898 <PWMServo::PWMServo()>:

#elif defined(__arm__) && defined(TEENSYDUINO)

uint32_t PWMServo::attachedpins[(NUM_DIGITAL_PINS+31)/32]; // 1 bit per digital pin

PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
     898:	22ff      	movs	r2, #255	; 0xff
     89a:	7002      	strb	r2, [r0, #0]
     89c:	7042      	strb	r2, [r0, #1]
     89e:	4770      	bx	lr

000008a0 <PWMServo::attach(int, int, int)>:

uint8_t PWMServo::attach(int pinArg, int min, int max)
{
	//Serial.printf("attach, pin=%d, min=%d, max=%d\n", pinArg, min, max);
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
     8a0:	2921      	cmp	r1, #33	; 0x21
     8a2:	d82e      	bhi.n	902 <PWMServo::attach(int, int, int)+0x62>
{
     8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8a6:	461e      	mov	r6, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
     8a8:	1ecb      	subs	r3, r1, #3
     8aa:	2b1d      	cmp	r3, #29
     8ac:	d82b      	bhi.n	906 <PWMServo::attach(int, int, int)+0x66>
     8ae:	4c17      	ldr	r4, [pc, #92]	; (90c <PWMServo::attach(int, int, int)+0x6c>)
     8b0:	fa24 fc03 	lsr.w	ip, r4, r3
     8b4:	4605      	mov	r5, r0
     8b6:	f01c 0001 	ands.w	r0, ip, #1
     8ba:	d100      	bne.n	8be <PWMServo::attach(int, int, int)+0x1e>
	angle = NO_ANGLE;
	digitalWrite(pin, LOW);
	pinMode(pin, OUTPUT);
	attachedpins[pin >> 5] |= (1 << (pin & 31));
	return 1;
}
     8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pin = pinArg;
     8be:	b2c8      	uxtb	r0, r1
     8c0:	4617      	mov	r7, r2
     8c2:	7028      	strb	r0, [r5, #0]
	analogWriteFrequency(pin, 50);
     8c4:	4912      	ldr	r1, [pc, #72]	; (910 <PWMServo::attach(int, int, int)+0x70>)
     8c6:	f000 fb69 	bl	f9c <analogWriteFrequency>
	angle = NO_ANGLE;
     8ca:	24ff      	movs	r4, #255	; 0xff
	min16 = min >> 4;
     8cc:	113a      	asrs	r2, r7, #4
	max16 = max >> 4;
     8ce:	1133      	asrs	r3, r6, #4
	min16 = min >> 4;
     8d0:	70aa      	strb	r2, [r5, #2]
	max16 = max >> 4;
     8d2:	70eb      	strb	r3, [r5, #3]
	digitalWrite(pin, LOW);
     8d4:	7828      	ldrb	r0, [r5, #0]
	angle = NO_ANGLE;
     8d6:	706c      	strb	r4, [r5, #1]
	digitalWrite(pin, LOW);
     8d8:	2100      	movs	r1, #0
     8da:	f000 fbc9 	bl	1070 <digitalWrite>
	pinMode(pin, OUTPUT);
     8de:	7828      	ldrb	r0, [r5, #0]
     8e0:	2101      	movs	r1, #1
     8e2:	f000 fbeb 	bl	10bc <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
     8e6:	782b      	ldrb	r3, [r5, #0]
     8e8:	4a0a      	ldr	r2, [pc, #40]	; (914 <PWMServo::attach(int, int, int)+0x74>)
     8ea:	0959      	lsrs	r1, r3, #5
     8ec:	2001      	movs	r0, #1
     8ee:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     8f2:	f003 031f 	and.w	r3, r3, #31
     8f6:	fa00 f303 	lsl.w	r3, r0, r3
     8fa:	4323      	orrs	r3, r4
     8fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
     900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
     902:	2000      	movs	r0, #0
}
     904:	4770      	bx	lr
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
     906:	2000      	movs	r0, #0
}
     908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     90a:	bf00      	nop
     90c:	205e00cf 	.word	0x205e00cf
     910:	42480000 	.word	0x42480000
     914:	1fff8d74 	.word	0x1fff8d74

00000918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     918:	b570      	push	{r4, r5, r6, lr}
		base = 10;
     91a:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     91c:	b08a      	sub	sp, #40	; 0x28
		base = 10;
     91e:	bf08      	it	eq
     920:	220a      	moveq	r2, #10
	if (n == 0) {
     922:	b3a1      	cbz	r1, 98e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		i = sizeof(buf) - 1;
     924:	f04f 0e21 	mov.w	lr, #33	; 0x21
     928:	e002      	b.n	930 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
			i--;
     92a:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
     92e:	4629      	mov	r1, r5
			digit = n % base;
     930:	fbb1 f5f2 	udiv	r5, r1, r2
     934:	fb02 1415 	mls	r4, r2, r5, r1
     938:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     93c:	2c09      	cmp	r4, #9
     93e:	f10c 0430 	add.w	r4, ip, #48	; 0x30
     942:	bf98      	it	ls
     944:	fa5f fc84 	uxtbls.w	ip, r4
     948:	f10e 0428 	add.w	r4, lr, #40	; 0x28
     94c:	bf88      	it	hi
     94e:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
     952:	446c      	add	r4, sp
     954:	bf88      	it	hi
     956:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
     95a:	4291      	cmp	r1, r2
			i--;
     95c:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     960:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
     964:	d2e1      	bcs.n	92a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
     966:	b14b      	cbz	r3, 97c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
     968:	f10e 3eff 	add.w	lr, lr, #4294967295
     96c:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
     970:	f10e 0328 	add.w	r3, lr, #40	; 0x28
     974:	446b      	add	r3, sp
     976:	222d      	movs	r2, #45	; 0x2d
     978:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
     97c:	6803      	ldr	r3, [r0, #0]
     97e:	a901      	add	r1, sp, #4
     980:	685b      	ldr	r3, [r3, #4]
     982:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
     986:	4471      	add	r1, lr
     988:	4798      	blx	r3
}
     98a:	b00a      	add	sp, #40	; 0x28
     98c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
     98e:	2230      	movs	r2, #48	; 0x30
     990:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
     994:	f04f 0e21 	mov.w	lr, #33	; 0x21
     998:	e7e5      	b.n	966 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
     99a:	bf00      	nop

0000099c <Print::print(String const&)>:
{
     99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
     9a0:	688c      	ldr	r4, [r1, #8]
     9a2:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
     9a4:	b1dc      	cbz	r4, 9de <Print::print(String const&)+0x42>
	unsigned int index = 0;
     9a6:	2500      	movs	r5, #0
     9a8:	4688      	mov	r8, r1
     9aa:	4606      	mov	r6, r0
	size_t count = 0;
     9ac:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
     9ae:	462b      	mov	r3, r5
     9b0:	2221      	movs	r2, #33	; 0x21
     9b2:	a901      	add	r1, sp, #4
     9b4:	4640      	mov	r0, r8
     9b6:	f000 f92b 	bl	c10 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		count += write(buffer, nbytes);
     9ba:	6833      	ldr	r3, [r6, #0]
     9bc:	2c20      	cmp	r4, #32
     9be:	4622      	mov	r2, r4
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	bf28      	it	cs
     9c4:	2220      	movcs	r2, #32
     9c6:	a901      	add	r1, sp, #4
     9c8:	4630      	mov	r0, r6
		index += nbytes;
     9ca:	4415      	add	r5, r2
		len -= nbytes;
     9cc:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
     9ce:	4798      	blx	r3
     9d0:	4407      	add	r7, r0
	while (len > 0) {
     9d2:	2c00      	cmp	r4, #0
     9d4:	d1eb      	bne.n	9ae <Print::print(String const&)+0x12>
}
     9d6:	4638      	mov	r0, r7
     9d8:	b00a      	add	sp, #40	; 0x28
     9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
     9de:	4627      	mov	r7, r4
}
     9e0:	4638      	mov	r0, r7
     9e2:	b00a      	add	sp, #40	; 0x28
     9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000009e8 <Print::print(long)>:
	if (n < 0) {
     9e8:	2900      	cmp	r1, #0
		n = -n;
     9ea:	bfba      	itte	lt
     9ec:	4249      	neglt	r1, r1
		sign = '-';
     9ee:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
     9f0:	2300      	movge	r3, #0
	if (base == 0) {
     9f2:	220a      	movs	r2, #10
     9f4:	f7ff bf90 	b.w	918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

000009f8 <Print::println()>:
{
     9f8:	b500      	push	{lr}
	return write(buf, 2);
     9fa:	6803      	ldr	r3, [r0, #0]
{
     9fc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
     9fe:	f640 220d 	movw	r2, #2573	; 0xa0d
     a02:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
     a06:	685b      	ldr	r3, [r3, #4]
     a08:	2202      	movs	r2, #2
     a0a:	a901      	add	r1, sp, #4
     a0c:	4798      	blx	r3
}
     a0e:	b003      	add	sp, #12
     a10:	f85d fb04 	ldr.w	pc, [sp], #4

00000a14 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
     a14:	b932      	cbnz	r2, a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
     a16:	6803      	ldr	r3, [r0, #0]
{
     a18:	b500      	push	{lr}
		return write((uint8_t)n);
     a1a:	681b      	ldr	r3, [r3, #0]
}
     a1c:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
     a20:	b2c9      	uxtb	r1, r1
     a22:	4718      	bx	r3
     a24:	f7ff bf78 	b.w	918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00000a28 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     a2a:	2600      	movs	r6, #0
String::String(const char *cstr)
     a2c:	4604      	mov	r4, r0
	buffer = NULL;
     a2e:	6006      	str	r6, [r0, #0]
	capacity = 0;
     a30:	6046      	str	r6, [r0, #4]
	len = 0;
     a32:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
     a34:	b129      	cbz	r1, a42 <String::String(char const*)+0x1a>
     a36:	4608      	mov	r0, r1
     a38:	460d      	mov	r5, r1
     a3a:	f002 ff21 	bl	3880 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
     a3e:	4607      	mov	r7, r0
     a40:	b908      	cbnz	r0, a46 <String::String(char const*)+0x1e>
}
     a42:	4620      	mov	r0, r4
     a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     a46:	3001      	adds	r0, #1
     a48:	f001 ff3a 	bl	28c0 <malloc>
	if (newbuffer) {
     a4c:	2800      	cmp	r0, #0
     a4e:	d0f8      	beq.n	a42 <String::String(char const*)+0x1a>
		capacity = maxStrLen;
     a50:	e9c4 0700 	strd	r0, r7, [r4]
		if (len == 0) buffer[0] = 0;
     a54:	7006      	strb	r6, [r0, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
     a56:	60a7      	str	r7, [r4, #8]
	strcpy(buffer, cstr);
     a58:	4629      	mov	r1, r5
     a5a:	f002 feaf 	bl	37bc <strcpy>
}
     a5e:	4620      	mov	r0, r4
     a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a62:	bf00      	nop

00000a64 <String::String(String const&)>:
String::String(const String &value)
     a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
     a66:	4288      	cmp	r0, r1
	buffer = NULL;
     a68:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
     a6c:	4604      	mov	r4, r0
	buffer = NULL;
     a6e:	6005      	str	r5, [r0, #0]
	capacity = 0;
     a70:	6045      	str	r5, [r0, #4]
	len = 0;
     a72:	6085      	str	r5, [r0, #8]
	if (this == &rhs) return *this;
     a74:	d002      	beq.n	a7c <String::String(String const&)+0x18>
     a76:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
     a78:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
     a7a:	b90e      	cbnz	r6, a80 <String::String(String const&)+0x1c>
}
     a7c:	4620      	mov	r0, r4
     a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     a80:	1c70      	adds	r0, r6, #1
     a82:	f001 ff1d 	bl	28c0 <malloc>
	if (newbuffer) {
     a86:	2800      	cmp	r0, #0
     a88:	d0f8      	beq.n	a7c <String::String(String const&)+0x18>
		capacity = maxStrLen;
     a8a:	e9c4 0600 	strd	r0, r6, [r4]
		if (len == 0) buffer[0] = 0;
     a8e:	7005      	strb	r5, [r0, #0]
	len = length;
     a90:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
     a92:	4639      	mov	r1, r7
     a94:	f002 fe92 	bl	37bc <strcpy>
}
     a98:	4620      	mov	r0, r4
     a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a9c <String::~String()>:
String::~String()
     a9c:	b510      	push	{r4, lr}
     a9e:	4604      	mov	r4, r0
	free(buffer);
     aa0:	6800      	ldr	r0, [r0, #0]
     aa2:	f001 ff15 	bl	28d0 <free>
}
     aa6:	4620      	mov	r0, r4
     aa8:	bd10      	pop	{r4, pc}
     aaa:	bf00      	nop

00000aac <String::copy(char const*, unsigned int)>:
{
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	4604      	mov	r4, r0
	if (length == 0) {
     ab0:	4615      	mov	r5, r2
     ab2:	b932      	cbnz	r2, ac2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
     ab4:	6803      	ldr	r3, [r0, #0]
     ab6:	b103      	cbz	r3, aba <String::copy(char const*, unsigned int)+0xe>
     ab8:	701a      	strb	r2, [r3, #0]
		len = 0;
     aba:	2300      	movs	r3, #0
     abc:	60a3      	str	r3, [r4, #8]
}
     abe:	4620      	mov	r0, r4
     ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
     ac2:	6843      	ldr	r3, [r0, #4]
     ac4:	429a      	cmp	r2, r3
     ac6:	460e      	mov	r6, r1
     ac8:	d91c      	bls.n	b04 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     aca:	6800      	ldr	r0, [r0, #0]
     acc:	1c51      	adds	r1, r2, #1
     ace:	f002 f9c3 	bl	2e58 <realloc>
	if (newbuffer) {
     ad2:	4607      	mov	r7, r0
     ad4:	b160      	cbz	r0, af0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
     ad6:	68a3      	ldr	r3, [r4, #8]
		buffer = newbuffer;
     ad8:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
     ada:	6065      	str	r5, [r4, #4]
		if (len == 0) buffer[0] = 0;
     adc:	b90b      	cbnz	r3, ae2 <String::copy(char const*, unsigned int)+0x36>
     ade:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
     ae0:	6827      	ldr	r7, [r4, #0]
	len = length;
     ae2:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
     ae4:	4631      	mov	r1, r6
     ae6:	4638      	mov	r0, r7
     ae8:	f002 fe68 	bl	37bc <strcpy>
}
     aec:	4620      	mov	r0, r4
     aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
     af0:	6820      	ldr	r0, [r4, #0]
     af2:	b110      	cbz	r0, afa <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
     af4:	f001 feec 	bl	28d0 <free>
			buffer = NULL;
     af8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
     afa:	2300      	movs	r3, #0
     afc:	6063      	str	r3, [r4, #4]
     afe:	60a3      	str	r3, [r4, #8]
}
     b00:	4620      	mov	r0, r4
     b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
     b04:	6807      	ldr	r7, [r0, #0]
	len = length;
     b06:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
     b08:	4631      	mov	r1, r6
     b0a:	4638      	mov	r0, r7
     b0c:	f002 fe56 	bl	37bc <strcpy>
	return *this;
     b10:	e7ec      	b.n	aec <String::copy(char const*, unsigned int)+0x40>
     b12:	bf00      	nop

00000b14 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     b14:	b538      	push	{r3, r4, r5, lr}
     b16:	4605      	mov	r5, r0
	if (cstr) {
     b18:	460c      	mov	r4, r1
     b1a:	b149      	cbz	r1, b30 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
     b1c:	4608      	mov	r0, r1
     b1e:	f002 feaf 	bl	3880 <strlen>
     b22:	4621      	mov	r1, r4
     b24:	4602      	mov	r2, r0
     b26:	4628      	mov	r0, r5
     b28:	f7ff ffc0 	bl	aac <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
     b2c:	4628      	mov	r0, r5
     b2e:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
     b30:	60a9      	str	r1, [r5, #8]
}
     b32:	4628      	mov	r0, r5
     b34:	bd38      	pop	{r3, r4, r5, pc}
     b36:	bf00      	nop

00000b38 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
     b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b3c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
     b3e:	6800      	ldr	r0, [r0, #0]
	unsigned int newlen = len + length;
     b40:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
     b42:	4288      	cmp	r0, r1
{
     b44:	460d      	mov	r5, r1
     b46:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
     b48:	d809      	bhi.n	b5e <String::append(char const*, unsigned int)+0x26>
     b4a:	18c2      	adds	r2, r0, r3
     b4c:	4291      	cmp	r1, r2
     b4e:	d206      	bcs.n	b5e <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
     b50:	1a0f      	subs	r7, r1, r0
		self = true;
     b52:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
     b56:	b936      	cbnz	r6, b66 <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
     b58:	4620      	mov	r0, r4
     b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
     b5e:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
     b62:	2e00      	cmp	r6, #0
     b64:	d0f8      	beq.n	b58 <String::append(char const*, unsigned int)+0x20>
	if (capacity >= size) return 1;
     b66:	6862      	ldr	r2, [r4, #4]
	unsigned int newlen = len + length;
     b68:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
     b6c:	4590      	cmp	r8, r2
     b6e:	d90c      	bls.n	b8a <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     b70:	f108 0101 	add.w	r1, r8, #1
     b74:	f002 f970 	bl	2e58 <realloc>
	if (newbuffer) {
     b78:	2800      	cmp	r0, #0
     b7a:	d0ed      	beq.n	b58 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
     b7c:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
     b7e:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
     b82:	b913      	cbnz	r3, b8a <String::append(char const*, unsigned int)+0x52>
     b84:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
     b86:	6820      	ldr	r0, [r4, #0]
     b88:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
     b8a:	f1b9 0f00 	cmp.w	r9, #0
     b8e:	d108      	bne.n	ba2 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
     b90:	4629      	mov	r1, r5
     b92:	4418      	add	r0, r3
     b94:	f002 fe12 	bl	37bc <strcpy>
	len = newlen;
     b98:	f8c4 8008 	str.w	r8, [r4, #8]
}
     b9c:	4620      	mov	r0, r4
     b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
     ba2:	4632      	mov	r2, r6
     ba4:	19c1      	adds	r1, r0, r7
     ba6:	4418      	add	r0, r3
     ba8:	f000 f854 	bl	c54 <memcpy>
		buffer[newlen] = 0;
     bac:	6823      	ldr	r3, [r4, #0]
     bae:	2200      	movs	r2, #0
     bb0:	f803 2008 	strb.w	r2, [r3, r8]
     bb4:	e7f0      	b.n	b98 <String::append(char const*, unsigned int)+0x60>
     bb6:	bf00      	nop

00000bb8 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     bb8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
     bba:	688a      	ldr	r2, [r1, #8]
     bbc:	6809      	ldr	r1, [r1, #0]
{
     bbe:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
     bc0:	f7ff ffba 	bl	b38 <String::append(char const*, unsigned int)>
	return a;
}
     bc4:	4620      	mov	r0, r4
     bc6:	bd10      	pop	{r4, pc}

00000bc8 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     bc8:	b538      	push	{r3, r4, r5, lr}
     bca:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
     bcc:	b141      	cbz	r1, be0 <operator+(StringSumHelper const&, char const*)+0x18>
     bce:	4608      	mov	r0, r1
     bd0:	460c      	mov	r4, r1
     bd2:	f002 fe55 	bl	3880 <strlen>
     bd6:	4621      	mov	r1, r4
     bd8:	4602      	mov	r2, r0
     bda:	4628      	mov	r0, r5
     bdc:	f7ff ffac 	bl	b38 <String::append(char const*, unsigned int)>
	return a;
}
     be0:	4628      	mov	r0, r5
     be2:	bd38      	pop	{r3, r4, r5, pc}

00000be4 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     be4:	6882      	ldr	r2, [r0, #8]
{
     be6:	b508      	push	{r3, lr}
     be8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
     bea:	b13a      	cbz	r2, bfc <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
     bec:	b161      	cbz	r1, c08 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
     bee:	6800      	ldr	r0, [r0, #0]
     bf0:	f002 fc7a 	bl	34e8 <strcmp>
     bf4:	fab0 f080 	clz	r0, r0
     bf8:	0940      	lsrs	r0, r0, #5
}
     bfa:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
     bfc:	b131      	cbz	r1, c0c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
     bfe:	7818      	ldrb	r0, [r3, #0]
     c00:	fab0 f080 	clz	r0, r0
     c04:	0940      	lsrs	r0, r0, #5
}
     c06:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
     c08:	6803      	ldr	r3, [r0, #0]
     c0a:	e7f8      	b.n	bfe <String::equals(char const*) const+0x1a>
     c0c:	2001      	movs	r0, #1
}
     c0e:	bd08      	pop	{r3, pc}

00000c10 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
     c10:	b1ba      	cbz	r2, c42 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
{
     c12:	b538      	push	{r3, r4, r5, lr}
     c14:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
     c16:	b121      	cbz	r1, c22 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
     c18:	6885      	ldr	r5, [r0, #8]
     c1a:	429d      	cmp	r5, r3
     c1c:	d802      	bhi.n	c24 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
     c1e:	2300      	movs	r3, #0
     c20:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
     c22:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
     c24:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
     c26:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
     c2a:	6801      	ldr	r1, [r0, #0]
     c2c:	4565      	cmp	r5, ip
     c2e:	bf28      	it	cs
     c30:	4665      	movcs	r5, ip
     c32:	4419      	add	r1, r3
     c34:	462a      	mov	r2, r5
     c36:	4620      	mov	r0, r4
     c38:	f002 fbda 	bl	33f0 <strncpy>
	buf[n] = 0;
     c3c:	2300      	movs	r3, #0
     c3e:	5563      	strb	r3, [r4, r5]
}
     c40:	bd38      	pop	{r3, r4, r5, pc}
     c42:	4770      	bx	lr

00000c44 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     c44:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     c46:	f7ff fc81 	bl	54c <setup>
	while (1) {
		loop();
     c4a:	f7ff fcb7 	bl	5bc <loop>
		yield();
     c4e:	f001 f9fb 	bl	2048 <yield>
	while (1) {
     c52:	e7fa      	b.n	c4a <main+0x6>

00000c54 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
     c54:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
     c56:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
     c5a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     c5e:	d16f      	bne.n	d40 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     c60:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
     c62:	d341      	bcc.n	ce8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     c64:	f851 3b04 	ldr.w	r3, [r1], #4
     c68:	f840 3b04 	str.w	r3, [r0], #4
     c6c:	f851 3b04 	ldr.w	r3, [r1], #4
     c70:	f840 3b04 	str.w	r3, [r0], #4
     c74:	f851 3b04 	ldr.w	r3, [r1], #4
     c78:	f840 3b04 	str.w	r3, [r0], #4
     c7c:	f851 3b04 	ldr.w	r3, [r1], #4
     c80:	f840 3b04 	str.w	r3, [r0], #4
     c84:	f851 3b04 	ldr.w	r3, [r1], #4
     c88:	f840 3b04 	str.w	r3, [r0], #4
     c8c:	f851 3b04 	ldr.w	r3, [r1], #4
     c90:	f840 3b04 	str.w	r3, [r0], #4
     c94:	f851 3b04 	ldr.w	r3, [r1], #4
     c98:	f840 3b04 	str.w	r3, [r0], #4
     c9c:	f851 3b04 	ldr.w	r3, [r1], #4
     ca0:	f840 3b04 	str.w	r3, [r0], #4
     ca4:	f851 3b04 	ldr.w	r3, [r1], #4
     ca8:	f840 3b04 	str.w	r3, [r0], #4
     cac:	f851 3b04 	ldr.w	r3, [r1], #4
     cb0:	f840 3b04 	str.w	r3, [r0], #4
     cb4:	f851 3b04 	ldr.w	r3, [r1], #4
     cb8:	f840 3b04 	str.w	r3, [r0], #4
     cbc:	f851 3b04 	ldr.w	r3, [r1], #4
     cc0:	f840 3b04 	str.w	r3, [r0], #4
     cc4:	f851 3b04 	ldr.w	r3, [r1], #4
     cc8:	f840 3b04 	str.w	r3, [r0], #4
     ccc:	f851 3b04 	ldr.w	r3, [r1], #4
     cd0:	f840 3b04 	str.w	r3, [r0], #4
     cd4:	f851 3b04 	ldr.w	r3, [r1], #4
     cd8:	f840 3b04 	str.w	r3, [r0], #4
     cdc:	f851 3b04 	ldr.w	r3, [r1], #4
     ce0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
     ce4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
     ce6:	d2bd      	bcs.n	c64 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
     ce8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
     cea:	d311      	bcc.n	d10 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     cec:	f851 3b04 	ldr.w	r3, [r1], #4
     cf0:	f840 3b04 	str.w	r3, [r0], #4
     cf4:	f851 3b04 	ldr.w	r3, [r1], #4
     cf8:	f840 3b04 	str.w	r3, [r0], #4
     cfc:	f851 3b04 	ldr.w	r3, [r1], #4
     d00:	f840 3b04 	str.w	r3, [r0], #4
     d04:	f851 3b04 	ldr.w	r3, [r1], #4
     d08:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
     d0c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
     d0e:	d2ed      	bcs.n	cec <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
     d10:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
     d12:	d305      	bcc.n	d20 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
     d14:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
     d18:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
     d1c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
     d1e:	d2f9      	bcs.n	d14 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
     d20:	3204      	adds	r2, #4
	beq	.Ldone
     d22:	d00a      	beq.n	d3a <memcpy+0xe6>

	lsls	r2, r2, #31
     d24:	07d2      	lsls	r2, r2, #31
	itt ne
     d26:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     d28:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     d2c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
     d30:	d303      	bcc.n	d3a <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
     d32:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
     d34:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
     d36:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
     d38:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
     d3a:	bc01      	pop	{r0}
#endif
	bx	lr
     d3c:	4770      	bx	lr
     d3e:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
     d40:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
     d42:	d34a      	bcc.n	dda <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
     d44:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
     d48:	d011      	beq.n	d6e <memcpy+0x11a>

	rsb	r3, #4
     d4a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
     d4e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
     d50:	07db      	lsls	r3, r3, #31
	itt ne
     d52:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     d54:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     d58:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
     d5c:	d307      	bcc.n	d6e <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
     d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     d62:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
     d66:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     d6a:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
     d6e:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
     d72:	f43f af75 	beq.w	c60 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
     d76:	b430      	push	{r4, r5}
	subs	r2, #4
     d78:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
     d7a:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
     d7c:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
     d80:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
     d84:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
     d86:	d019      	beq.n	dbc <memcpy+0x168>
	cmp	r3, #3
     d88:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
     d8a:	d00b      	beq.n	da4 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
     d8c:	0a24      	lsrs	r4, r4, #8
     d8e:	f851 3b04 	ldr.w	r3, [r1], #4
     d92:	061d      	lsls	r5, r3, #24
     d94:	ea44 0405 	orr.w	r4, r4, r5
     d98:	f840 4b04 	str.w	r4, [r0], #4
     d9c:	461c      	mov	r4, r3
     d9e:	3a04      	subs	r2, #4
     da0:	d2f4      	bcs.n	d8c <memcpy+0x138>
	b	.Lsrc_misaligned_tail
     da2:	e016      	b.n	dd2 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
     da4:	0e24      	lsrs	r4, r4, #24
     da6:	f851 3b04 	ldr.w	r3, [r1], #4
     daa:	021d      	lsls	r5, r3, #8
     dac:	ea44 0405 	orr.w	r4, r4, r5
     db0:	f840 4b04 	str.w	r4, [r0], #4
     db4:	461c      	mov	r4, r3
     db6:	3a04      	subs	r2, #4
     db8:	d2f4      	bcs.n	da4 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
     dba:	e00a      	b.n	dd2 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
     dbc:	0c24      	lsrs	r4, r4, #16
     dbe:	f851 3b04 	ldr.w	r3, [r1], #4
     dc2:	041d      	lsls	r5, r3, #16
     dc4:	ea44 0405 	orr.w	r4, r4, r5
     dc8:	f840 4b04 	str.w	r4, [r0], #4
     dcc:	461c      	mov	r4, r3
     dce:	3a04      	subs	r2, #4
     dd0:	d2f4      	bcs.n	dbc <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
     dd2:	3204      	adds	r2, #4
	subs	r1, ip
     dd4:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
     dd8:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
     dda:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
     ddc:	d3a0      	bcc.n	d20 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
     dde:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
     de0:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     de4:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
     de8:	d2f9      	bcs.n	dde <memcpy+0x18a>

	ldrb	r3, [r1]
     dea:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
     dec:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
     dee:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
     df0:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
     df2:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
     df4:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
     df6:	bc01      	pop	{r0}
#endif
	bx	lr
     df8:	4770      	bx	lr
     dfa:	bf00      	nop

00000dfc <fault_isr>:
{
     dfc:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     dfe:	4c0f      	ldr	r4, [pc, #60]	; (e3c <fault_isr+0x40>)
     e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e02:	0358      	lsls	r0, r3, #13
     e04:	d40d      	bmi.n	e22 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e08:	0559      	lsls	r1, r3, #21
     e0a:	d40f      	bmi.n	e2c <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e0e:	051a      	lsls	r2, r3, #20
     e10:	d411      	bmi.n	e36 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e14:	04db      	lsls	r3, r3, #19
     e16:	d5f3      	bpl.n	e00 <fault_isr+0x4>
     e18:	f000 f812 	bl	e40 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e1e:	0358      	lsls	r0, r3, #13
     e20:	d5f1      	bpl.n	e06 <fault_isr+0xa>
     e22:	f000 fb43 	bl	14ac <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e28:	0559      	lsls	r1, r3, #21
     e2a:	d5ef      	bpl.n	e0c <fault_isr+0x10>
     e2c:	f000 f808 	bl	e40 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e32:	051a      	lsls	r2, r3, #20
     e34:	d5ed      	bpl.n	e12 <fault_isr+0x16>
     e36:	f000 f803 	bl	e40 <unused_isr>
     e3a:	e7ea      	b.n	e12 <fault_isr+0x16>
     e3c:	40048000 	.word	0x40048000

00000e40 <unused_isr>:
{
     e40:	b508      	push	{r3, lr}
	fault_isr();
     e42:	f7ff ffdb 	bl	dfc <fault_isr>
     e46:	bf00      	nop

00000e48 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     e48:	4b01      	ldr	r3, [pc, #4]	; (e50 <startup_early_hook+0x8>)
     e4a:	2210      	movs	r2, #16
     e4c:	801a      	strh	r2, [r3, #0]
}
     e4e:	4770      	bx	lr
     e50:	40052000 	.word	0x40052000

00000e54 <startup_late_hook>:
static void startup_default_late_hook(void) {}
     e54:	4770      	bx	lr
     e56:	bf00      	nop

00000e58 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
     e58:	4a09      	ldr	r2, [pc, #36]	; (e80 <_sbrk+0x28>)
{
     e5a:	b508      	push	{r3, lr}
     e5c:	4603      	mov	r3, r0
	prev = __brkval;
     e5e:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
     e60:	b133      	cbz	r3, e70 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
     e62:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
     e64:	4403      	add	r3, r0
     e66:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
     e6a:	428b      	cmp	r3, r1
     e6c:	d201      	bcs.n	e72 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
     e6e:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
     e70:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
     e72:	f002 fb01 	bl	3478 <__errno>
     e76:	230c      	movs	r3, #12
     e78:	6003      	str	r3, [r0, #0]
			return (void *)-1;
     e7a:	f04f 30ff 	mov.w	r0, #4294967295
}
     e7e:	bd08      	pop	{r3, pc}
     e80:	1fff8724 	.word	0x1fff8724

00000e84 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
     e84:	f101 3cff 	add.w	ip, r1, #4294967295
{
     e88:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
     e8a:	4665      	mov	r5, ip
	int i=0, j;
     e8c:	2400      	movs	r4, #0
     e8e:	e001      	b.n	e94 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
     e90:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
     e92:	3401      	adds	r4, #1
		digit = val % radix;
     e94:	fbb0 fef2 	udiv	lr, r0, r2
     e98:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     e9c:	2b09      	cmp	r3, #9
     e9e:	f103 0630 	add.w	r6, r3, #48	; 0x30
     ea2:	bf8a      	itet	hi
     ea4:	3337      	addhi	r3, #55	; 0x37
     ea6:	b2f3      	uxtbls	r3, r6
     ea8:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
     eaa:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     eac:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
     eb0:	d2ee      	bcs.n	e90 <ultoa+0xc>
	}
	buf[i + 1] = 0;
     eb2:	1c63      	adds	r3, r4, #1
     eb4:	2200      	movs	r2, #0
     eb6:	54ca      	strb	r2, [r1, r3]
     eb8:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
     eba:	b17c      	cbz	r4, edc <ultoa+0x58>
		t = buf[j];
     ebc:	4662      	mov	r2, ip
     ebe:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
     ec2:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
     ec6:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
     eca:	eba1 030c 	sub.w	r3, r1, ip
     ece:	3202      	adds	r2, #2
     ed0:	3b01      	subs	r3, #1
     ed2:	1a52      	subs	r2, r2, r1
     ed4:	4423      	add	r3, r4
     ed6:	429a      	cmp	r2, r3
		buf[i] = t;
     ed8:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
     eda:	dbef      	blt.n	ebc <ultoa+0x38>
	}
	return buf;
}
     edc:	4608      	mov	r0, r1
     ede:	bd70      	pop	{r4, r5, r6, pc}

00000ee0 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <rtc_set+0x10>)
     ee2:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
     ee4:	2110      	movs	r1, #16
	RTC_SR = 0;
     ee6:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
     ee8:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
     eea:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
     eec:	6159      	str	r1, [r3, #20]
}
     eee:	4770      	bx	lr
     ef0:	4003d000 	.word	0x4003d000

00000ef4 <startup_middle_hook>:
}
#endif

extern void usb_init(void);

static void startup_default_middle_hook(void) {}
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop

00000ef8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     efa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     efe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
     f02:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     f06:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
     f0a:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
     f0e:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
     f12:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
     f16:	4a1d      	ldr	r2, [pc, #116]	; (f8c <_init_Teensyduino_internal_+0x94>)
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
     f18:	481d      	ldr	r0, [pc, #116]	; (f90 <_init_Teensyduino_internal_+0x98>)
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     f1a:	491e      	ldr	r1, [pc, #120]	; (f94 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
     f1c:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
     f20:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     f24:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
     f26:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
     f28:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     f2c:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
     f2e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
     f32:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
     f36:	b083      	sub	sp, #12
	FTM0_CNT = 0;
     f38:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
     f3a:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     f3c:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
     f3e:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
     f40:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
     f42:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
     f44:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
     f46:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
     f48:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
     f4a:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     f4c:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
     f4e:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
     f50:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
     f52:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
     f54:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     f56:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
     f58:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
     f5a:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
     f5c:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
     f5e:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     f60:	600d      	str	r5, [r1, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
     f62:	f001 f915 	bl	2190 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	startup_middle_hook();
     f66:	f7ff ffc5 	bl	ef4 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
     f6a:	4c0b      	ldr	r4, [pc, #44]	; (f98 <_init_Teensyduino_internal_+0xa0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f6c:	6823      	ldr	r3, [r4, #0]
     f6e:	9300      	str	r3, [sp, #0]
	return ret;
     f70:	9b00      	ldr	r3, [sp, #0]
     f72:	2b13      	cmp	r3, #19
     f74:	d9fa      	bls.n	f6c <_init_Teensyduino_internal_+0x74>
	usb_init();
     f76:	f000 fe53 	bl	1c20 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f7a:	6823      	ldr	r3, [r4, #0]
     f7c:	9301      	str	r3, [sp, #4]
	return ret;
     f7e:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
     f80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
     f84:	d3f9      	bcc.n	f7a <_init_Teensyduino_internal_+0x82>
}
     f86:	b003      	add	sp, #12
     f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f8a:	bf00      	nop
     f8c:	40038000 	.word	0x40038000
     f90:	40039000 	.word	0x40039000
     f94:	400b8000 	.word	0x400b8000
     f98:	1fff8d7c 	.word	0x1fff8d7c

00000f9c <analogWriteFrequency>:
	return prior_res;
}


void analogWriteFrequency(uint8_t pin, float frequency)
{
     f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fa0:	460e      	mov	r6, r1
     fa2:	4680      	mov	r8, r0
#if defined(__MKL26Z64__)
	// Teensy LC does not support slow clock source (ftmClockSource = 2)
	ftmClockSource = 1; 	// Use default F_TIMER clock source
	ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
#else
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
     fa4:	492c      	ldr	r1, [pc, #176]	; (1058 <analogWriteFrequency+0xbc>)
     fa6:	4630      	mov	r0, r6
     fa8:	f001 fc42 	bl	2830 <__aeabi_fcmplt>
		// frequency is too low for working with F_TIMER:
		ftmClockSource = 2; 	// Use alternative 31250Hz clock source
		ftmClock = 31250;   	// Set variable for the actual timer clock frequency
	} else {
		ftmClockSource = 1; 	// Use default F_TIMER clock source
     fac:	4b2b      	ldr	r3, [pc, #172]	; (105c <analogWriteFrequency+0xc0>)
     fae:	2800      	cmp	r0, #0
     fb0:	f647 2712 	movw	r7, #31250	; 0x7a12
     fb4:	bf12      	itee	ne
     fb6:	f04f 0a02 	movne.w	sl, #2
     fba:	f04f 0a01 	moveq.w	sl, #1
     fbe:	461f      	moveq	r7, r3
		ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
	}
#endif

	
	for (prescale = 0; prescale < 7; prescale++) {
     fc0:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
     fc2:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
     fc6:	fa27 f004 	lsr.w	r0, r7, r4
     fca:	f001 fa3b 	bl	2444 <__aeabi_ui2f>
     fce:	4649      	mov	r1, r9
     fd0:	4605      	mov	r5, r0
     fd2:	f001 fa8f 	bl	24f4 <__aeabi_fmul>
     fd6:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
     fd8:	4630      	mov	r0, r6
     fda:	f001 fc3d 	bl	2858 <__aeabi_fcmpge>
     fde:	b930      	cbnz	r0, fee <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
     fe0:	3401      	adds	r4, #1
     fe2:	2c07      	cmp	r4, #7
     fe4:	d1ef      	bne.n	fc6 <analogWriteFrequency+0x2a>
	//serial_phex32(ftmClock >> prescale);
	//serial_print("\n");
	//serial_print("prescale = ");
	//serial_phex(prescale);
	//serial_print("\n");
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
     fe6:	09f8      	lsrs	r0, r7, #7
     fe8:	f001 fa2c 	bl	2444 <__aeabi_ui2f>
     fec:	4605      	mov	r5, r0
     fee:	4631      	mov	r1, r6
     ff0:	4628      	mov	r0, r5
     ff2:	f001 fb33 	bl	265c <__aeabi_fdiv>
     ff6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     ffa:	f001 f971 	bl	22e0 <__aeabi_fsub>
     ffe:	f001 fc3f 	bl	2880 <__aeabi_f2uiz>
    1002:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1006:	4298      	cmp	r0, r3
    1008:	bf28      	it	cs
    100a:	4618      	movcs	r0, r3
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    100c:	f1a8 0303 	sub.w	r3, r8, #3
    1010:	2b01      	cmp	r3, #1
    1012:	d911      	bls.n	1038 <analogWriteFrequency+0x9c>
		FTM1_SC = 0;
		FTM1_CNT = 0;
		FTM1_MOD = mod;
		FTM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    1014:	f1a8 0805 	sub.w	r8, r8, #5
    1018:	fa5f f888 	uxtb.w	r8, r8
    101c:	f1b8 0f1b 	cmp.w	r8, #27
    1020:	d808      	bhi.n	1034 <analogWriteFrequency+0x98>
    1022:	4a0f      	ldr	r2, [pc, #60]	; (1060 <analogWriteFrequency+0xc4>)
    1024:	2301      	movs	r3, #1
    1026:	fa03 f308 	lsl.w	r3, r3, r8
    102a:	401a      	ands	r2, r3
    102c:	d110      	bne.n	1050 <analogWriteFrequency+0xb4>
    102e:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    1032:	d10b      	bne.n	104c <analogWriteFrequency+0xb0>
		TPM1_CNT = 0;
		TPM1_MOD = mod;
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
	}
#endif
}
    1034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    1038:	4b0a      	ldr	r3, [pc, #40]	; (1064 <analogWriteFrequency+0xc8>)
    103a:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    103c:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    1040:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    1042:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    1044:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    1046:	601c      	str	r4, [r3, #0]
}
    1048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    104c:	4b06      	ldr	r3, [pc, #24]	; (1068 <analogWriteFrequency+0xcc>)
    104e:	e7f5      	b.n	103c <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    1050:	4b06      	ldr	r3, [pc, #24]	; (106c <analogWriteFrequency+0xd0>)
    1052:	2200      	movs	r2, #0
    1054:	e7f2      	b.n	103c <analogWriteFrequency+0xa0>
    1056:	bf00      	nop
    1058:	40b71b00 	.word	0x40b71b00
    105c:	02dc6c00 	.word	0x02dc6c00
    1060:	00078033 	.word	0x00078033
    1064:	40039000 	.word	0x40039000
    1068:	400b8000 	.word	0x400b8000
    106c:	40038000 	.word	0x40038000

00001070 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1070:	2821      	cmp	r0, #33	; 0x21
    1072:	d816      	bhi.n	10a2 <digitalWrite+0x32>
{
    1074:	b410      	push	{r4}
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1076:	4b10      	ldr	r3, [pc, #64]	; (10b8 <digitalWrite+0x48>)
    1078:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    107c:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    1080:	b12c      	cbz	r4, 108e <digitalWrite+0x1e>
		if (val) {
			*portSetRegister(pin) = 1;
    1082:	2301      	movs	r3, #1
		if (val) {
    1084:	b971      	cbnz	r1, 10a4 <digitalWrite+0x34>
		} else {
			*portClearRegister(pin) = 1;
    1086:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    108a:	bc10      	pop	{r4}
    108c:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    108e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    1092:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1094:	681a      	ldr	r2, [r3, #0]
		if (val) {
    1096:	b149      	cbz	r1, 10ac <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1098:	f042 0203 	orr.w	r2, r2, #3
}
    109c:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    109e:	601a      	str	r2, [r3, #0]
}
    10a0:	4770      	bx	lr
    10a2:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    10a4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    10a8:	bc10      	pop	{r4}
    10aa:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    10ac:	f022 0202 	bic.w	r2, r2, #2
}
    10b0:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    10b2:	601a      	str	r2, [r3, #0]
}
    10b4:	4770      	bx	lr
    10b6:	bf00      	nop
    10b8:	00003d38 	.word	0x00003d38

000010bc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    10bc:	2821      	cmp	r0, #33	; 0x21
    10be:	d820      	bhi.n	1102 <pinMode+0x46>
	config = portConfigRegister(pin);
    10c0:	4a1b      	ldr	r2, [pc, #108]	; (1130 <pinMode+0x74>)
    10c2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    10c6:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    10c8:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    10ca:	d00f      	beq.n	10ec <pinMode+0x30>
    10cc:	2904      	cmp	r1, #4
    10ce:	d01d      	beq.n	110c <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    10d0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    10d4:	2200      	movs	r2, #0
    10d6:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    10da:	b199      	cbz	r1, 1104 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    10dc:	2902      	cmp	r1, #2
    10de:	d022      	beq.n	1126 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    10e0:	2903      	cmp	r1, #3
    10e2:	d10d      	bne.n	1100 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    10e4:	f44f 7281 	mov.w	r2, #258	; 0x102
    10e8:	601a      	str	r2, [r3, #0]
    10ea:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    10ec:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    10f0:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    10f4:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    10f8:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    10fa:	681a      	ldr	r2, [r3, #0]
    10fc:	f022 0220 	bic.w	r2, r2, #32
    1100:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    1102:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    1104:	f44f 7280 	mov.w	r2, #256	; 0x100
    1108:	601a      	str	r2, [r3, #0]
    110a:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    110c:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1110:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    1114:	2001      	movs	r0, #1
    1116:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    111a:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    111c:	681a      	ldr	r2, [r3, #0]
    111e:	f042 0220 	orr.w	r2, r2, #32
    1122:	601a      	str	r2, [r3, #0]
    1124:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1126:	f240 1203 	movw	r2, #259	; 0x103
    112a:	601a      	str	r2, [r3, #0]
    112c:	4770      	bx	lr
    112e:	bf00      	nop
    1130:	00003d38 	.word	0x00003d38

00001134 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1138:	4604      	mov	r4, r0
	__disable_irq();
    113a:	b672      	cpsid	i
	count = systick_millis_count;
    113c:	4f20      	ldr	r7, [pc, #128]	; (11c0 <delay+0x8c>)
	current = SYST_CVR;
    113e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1142:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    1144:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1146:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    114a:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    114c:	0152      	lsls	r2, r2, #5
    114e:	d502      	bpl.n	1156 <delay+0x22>
    1150:	2b32      	cmp	r3, #50	; 0x32
    1152:	bf88      	it	hi
    1154:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    1156:	b90c      	cbnz	r4, 115c <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    1158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    115c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 11c4 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    1160:	f8df 8064 	ldr.w	r8, [pc, #100]	; 11c8 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    1164:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    1168:	fba8 2303 	umull	r2, r3, r8, r3
    116c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1170:	fb02 f505 	mul.w	r5, r2, r5
    1174:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    1178:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    117c:	b672      	cpsid	i
	current = SYST_CVR;
    117e:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    1180:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1182:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    1186:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    1188:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    118c:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1190:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    1194:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    1198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    119c:	d002      	beq.n	11a4 <delay+0x70>
    119e:	2932      	cmp	r1, #50	; 0x32
    11a0:	bf88      	it	hi
    11a2:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    11a4:	fb00 3302 	mla	r3, r0, r2, r3
    11a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    11ac:	d304      	bcc.n	11b8 <delay+0x84>
				if (ms == 0) return;
    11ae:	3c01      	subs	r4, #1
    11b0:	d0d2      	beq.n	1158 <delay+0x24>
				start += 1000;
    11b2:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    11b6:	e7e1      	b.n	117c <delay+0x48>
			yield();
    11b8:	f000 ff46 	bl	2048 <yield>
			while ((micros() - start) >= 1000) {
    11bc:	e7de      	b.n	117c <delay+0x48>
    11be:	bf00      	nop
    11c0:	1fff8d7c 	.word	0x1fff8d7c
    11c4:	000176ff 	.word	0x000176ff
    11c8:	aaaaaaab 	.word	0xaaaaaaab

000011cc <pulseIn_high>:
#endif

#if defined(KINETISK)
uint32_t pulseIn_high(volatile uint8_t *reg, uint32_t timeout)
{
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    11cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    11d0:	0049      	lsls	r1, r1, #1
	uint32_t usec_start, usec_stop;

	// wait for any previous pulse to end
	while (*reg) {
    11d2:	e001      	b.n	11d8 <pulseIn_high+0xc>
		if (--timeout_count == 0) return 0;
    11d4:	3901      	subs	r1, #1
    11d6:	d018      	beq.n	120a <pulseIn_high+0x3e>
	while (*reg) {
    11d8:	7803      	ldrb	r3, [r0, #0]
    11da:	2b00      	cmp	r3, #0
    11dc:	d1fa      	bne.n	11d4 <pulseIn_high+0x8>
    11de:	e001      	b.n	11e4 <pulseIn_high+0x18>
	}
	// wait for the pulse to start
	while (!*reg) {
		if (--timeout_count == 0) return 0;
    11e0:	3901      	subs	r1, #1
    11e2:	d012      	beq.n	120a <pulseIn_high+0x3e>
	while (!*reg) {
    11e4:	7803      	ldrb	r3, [r0, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d0fa      	beq.n	11e0 <pulseIn_high+0x14>
{
    11ea:	b470      	push	{r4, r5, r6}
	__disable_irq();
    11ec:	b672      	cpsid	i
	count = systick_millis_count;
    11ee:	4c1b      	ldr	r4, [pc, #108]	; (125c <pulseIn_high+0x90>)
	current = SYST_CVR;
    11f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    11f4:	699a      	ldr	r2, [r3, #24]
	count = systick_millis_count;
    11f6:	6825      	ldr	r5, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    11f8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
	__enable_irq();
    11fc:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    11fe:	015e      	lsls	r6, r3, #5
    1200:	d507      	bpl.n	1212 <pulseIn_high+0x46>
    1202:	2a32      	cmp	r2, #50	; 0x32
    1204:	d905      	bls.n	1212 <pulseIn_high+0x46>
    1206:	3501      	adds	r5, #1
	}
	usec_start = micros();
	// wait for the pulse to stop
	while (*reg) {
    1208:	e003      	b.n	1212 <pulseIn_high+0x46>
		if (--timeout_count == 0) return 0;
    120a:	2000      	movs	r0, #0
		if (--timeout_count == 0) return 0;
	}
	usec_stop = micros();
	return usec_stop - usec_start;
}
    120c:	4770      	bx	lr
		if (--timeout_count == 0) return 0;
    120e:	3901      	subs	r1, #1
    1210:	d022      	beq.n	1258 <pulseIn_high+0x8c>
	while (*reg) {
    1212:	7803      	ldrb	r3, [r0, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d1fa      	bne.n	120e <pulseIn_high+0x42>
	__disable_irq();
    1218:	b672      	cpsid	i
	current = SYST_CVR;
    121a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    121e:	699e      	ldr	r6, [r3, #24]
	count = systick_millis_count;
    1220:	6821      	ldr	r1, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1222:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
	__enable_irq();
    1226:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1228:	015b      	lsls	r3, r3, #5
    122a:	d502      	bpl.n	1232 <pulseIn_high+0x66>
    122c:	2e32      	cmp	r6, #50	; 0x32
    122e:	bf88      	it	hi
    1230:	3101      	addhi	r1, #1
	current = ((F_CPU / 1000) - 1) - current;
    1232:	4b0b      	ldr	r3, [pc, #44]	; (1260 <pulseIn_high+0x94>)
    1234:	1a98      	subs	r0, r3, r2
	return count * 1000 + current / (F_CPU / 1000000);
    1236:	4a0b      	ldr	r2, [pc, #44]	; (1264 <pulseIn_high+0x98>)
	current = ((F_CPU / 1000) - 1) - current;
    1238:	1b9b      	subs	r3, r3, r6
	return count * 1000 + current / (F_CPU / 1000000);
    123a:	fba2 4000 	umull	r4, r0, r2, r0
    123e:	0980      	lsrs	r0, r0, #6
    1240:	fba2 2303 	umull	r2, r3, r2, r3
	return usec_stop - usec_start;
    1244:	ebc0 1093 	rsb	r0, r0, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    1248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	return usec_stop - usec_start;
    124c:	fb03 0015 	mls	r0, r3, r5, r0
    1250:	fb03 0001 	mla	r0, r3, r1, r0
}
    1254:	bc70      	pop	{r4, r5, r6}
    1256:	4770      	bx	lr
		if (--timeout_count == 0) return 0;
    1258:	2000      	movs	r0, #0
    125a:	e7fb      	b.n	1254 <pulseIn_high+0x88>
    125c:	1fff8d7c 	.word	0x1fff8d7c
    1260:	000176ff 	.word	0x000176ff
    1264:	aaaaaaab 	.word	0xaaaaaaab

00001268 <pulseIn_low>:

uint32_t pulseIn_low(volatile uint8_t *reg, uint32_t timeout)
{
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    1268:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    126c:	0049      	lsls	r1, r1, #1
	uint32_t usec_start, usec_stop;
	
	// wait for any previous pulse to end
	while (!*reg) {
    126e:	e001      	b.n	1274 <pulseIn_low+0xc>
		if (--timeout_count == 0) return 0;
    1270:	3901      	subs	r1, #1
    1272:	d018      	beq.n	12a6 <pulseIn_low+0x3e>
	while (!*reg) {
    1274:	7803      	ldrb	r3, [r0, #0]
    1276:	2b00      	cmp	r3, #0
    1278:	d0fa      	beq.n	1270 <pulseIn_low+0x8>
    127a:	e001      	b.n	1280 <pulseIn_low+0x18>
	}
	// wait for the pulse to start
	while (*reg) {
		if (--timeout_count == 0) return 0;
    127c:	3901      	subs	r1, #1
    127e:	d012      	beq.n	12a6 <pulseIn_low+0x3e>
	while (*reg) {
    1280:	7803      	ldrb	r3, [r0, #0]
    1282:	2b00      	cmp	r3, #0
    1284:	d1fa      	bne.n	127c <pulseIn_low+0x14>
{
    1286:	b470      	push	{r4, r5, r6}
	__disable_irq();
    1288:	b672      	cpsid	i
	count = systick_millis_count;
    128a:	4c1b      	ldr	r4, [pc, #108]	; (12f8 <pulseIn_low+0x90>)
	current = SYST_CVR;
    128c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1290:	699a      	ldr	r2, [r3, #24]
	count = systick_millis_count;
    1292:	6825      	ldr	r5, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1294:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
	__enable_irq();
    1298:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    129a:	015e      	lsls	r6, r3, #5
    129c:	d507      	bpl.n	12ae <pulseIn_low+0x46>
    129e:	2a32      	cmp	r2, #50	; 0x32
    12a0:	d905      	bls.n	12ae <pulseIn_low+0x46>
    12a2:	3501      	adds	r5, #1
	}
	usec_start = micros();
	// wait for the pulse to stop
	while (!*reg) {
    12a4:	e003      	b.n	12ae <pulseIn_low+0x46>
		if (--timeout_count == 0) return 0;
    12a6:	2000      	movs	r0, #0
		if (--timeout_count == 0) return 0;
	}
	usec_stop = micros();
	return usec_stop - usec_start;
}
    12a8:	4770      	bx	lr
		if (--timeout_count == 0) return 0;
    12aa:	3901      	subs	r1, #1
    12ac:	d022      	beq.n	12f4 <pulseIn_low+0x8c>
	while (!*reg) {
    12ae:	7803      	ldrb	r3, [r0, #0]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d0fa      	beq.n	12aa <pulseIn_low+0x42>
	__disable_irq();
    12b4:	b672      	cpsid	i
	current = SYST_CVR;
    12b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    12ba:	699e      	ldr	r6, [r3, #24]
	count = systick_millis_count;
    12bc:	6821      	ldr	r1, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    12be:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
	__enable_irq();
    12c2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    12c4:	015b      	lsls	r3, r3, #5
    12c6:	d502      	bpl.n	12ce <pulseIn_low+0x66>
    12c8:	2e32      	cmp	r6, #50	; 0x32
    12ca:	bf88      	it	hi
    12cc:	3101      	addhi	r1, #1
	current = ((F_CPU / 1000) - 1) - current;
    12ce:	4b0b      	ldr	r3, [pc, #44]	; (12fc <pulseIn_low+0x94>)
    12d0:	1a98      	subs	r0, r3, r2
	return count * 1000 + current / (F_CPU / 1000000);
    12d2:	4a0b      	ldr	r2, [pc, #44]	; (1300 <pulseIn_low+0x98>)
	current = ((F_CPU / 1000) - 1) - current;
    12d4:	1b9b      	subs	r3, r3, r6
	return count * 1000 + current / (F_CPU / 1000000);
    12d6:	fba2 4000 	umull	r4, r0, r2, r0
    12da:	0980      	lsrs	r0, r0, #6
    12dc:	fba2 2303 	umull	r2, r3, r2, r3
	return usec_stop - usec_start;
    12e0:	ebc0 1093 	rsb	r0, r0, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    12e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	return usec_stop - usec_start;
    12e8:	fb03 0015 	mls	r0, r3, r5, r0
    12ec:	fb03 0001 	mla	r0, r3, r1, r0
}
    12f0:	bc70      	pop	{r4, r5, r6}
    12f2:	4770      	bx	lr
		if (--timeout_count == 0) return 0;
    12f4:	2000      	movs	r0, #0
    12f6:	e7fb      	b.n	12f0 <pulseIn_low+0x88>
    12f8:	1fff8d7c 	.word	0x1fff8d7c
    12fc:	000176ff 	.word	0x000176ff
    1300:	aaaaaaab 	.word	0xaaaaaaab

00001304 <pulseIn>:

// TODO: an inline version should handle the common case where state is const
uint32_t pulseIn(uint8_t pin, uint8_t state, uint32_t timeout)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1304:	2821      	cmp	r0, #33	; 0x21
{
    1306:	460b      	mov	r3, r1
    1308:	4611      	mov	r1, r2
	if (pin >= CORE_NUM_DIGITAL) return 0;
    130a:	d80e      	bhi.n	132a <pulseIn+0x26>
	if (state) return pulseIn_high(portInputRegister(pin), timeout);
    130c:	b933      	cbnz	r3, 131c <pulseIn+0x18>
	return pulseIn_low(portInputRegister(pin), timeout);;
    130e:	4b08      	ldr	r3, [pc, #32]	; (1330 <pulseIn+0x2c>)
    1310:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    1314:	f500 7000 	add.w	r0, r0, #512	; 0x200
    1318:	f7ff bfa6 	b.w	1268 <pulseIn_low>
	if (state) return pulseIn_high(portInputRegister(pin), timeout);
    131c:	4b04      	ldr	r3, [pc, #16]	; (1330 <pulseIn+0x2c>)
    131e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    1322:	f500 7000 	add.w	r0, r0, #512	; 0x200
    1326:	f7ff bf51 	b.w	11cc <pulseIn_high>
}
    132a:	2000      	movs	r0, #0
    132c:	4770      	bx	lr
    132e:	bf00      	nop
    1330:	00003d38 	.word	0x00003d38

00001334 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1334:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1336:	2b03      	cmp	r3, #3
    1338:	d817      	bhi.n	136a <usb_rx+0x36>
	__disable_irq();
    133a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    133c:	490c      	ldr	r1, [pc, #48]	; (1370 <usb_rx+0x3c>)
    133e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1342:	b180      	cbz	r0, 1366 <usb_rx+0x32>
{
    1344:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1346:	4c0b      	ldr	r4, [pc, #44]	; (1374 <usb_rx+0x40>)
    1348:	f8b0 c000 	ldrh.w	ip, [r0]
    134c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    1350:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    1354:	f8d0 c004 	ldr.w	ip, [r0, #4]
    1358:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    135c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1360:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1362:	bc10      	pop	{r4}
    1364:	4770      	bx	lr
	__enable_irq();
    1366:	b662      	cpsie	i
}
    1368:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    136a:	2000      	movs	r0, #0
    136c:	4770      	bx	lr
    136e:	bf00      	nop
    1370:	1fff8e10 	.word	0x1fff8e10
    1374:	1fff8e60 	.word	0x1fff8e60

00001378 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1378:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    137a:	2803      	cmp	r0, #3
    137c:	d80b      	bhi.n	1396 <usb_tx_packet_count+0x1e>
	__disable_irq();
    137e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1380:	4b07      	ldr	r3, [pc, #28]	; (13a0 <usb_tx_packet_count+0x28>)
    1382:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1386:	b143      	cbz	r3, 139a <usb_tx_packet_count+0x22>
	uint32_t count=0;
    1388:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    138a:	685b      	ldr	r3, [r3, #4]
    138c:	3001      	adds	r0, #1
    138e:	2b00      	cmp	r3, #0
    1390:	d1fb      	bne.n	138a <usb_tx_packet_count+0x12>
	__enable_irq();
    1392:	b662      	cpsie	i
	return count;
    1394:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1396:	2000      	movs	r0, #0
}
    1398:	4770      	bx	lr
	uint32_t count=0;
    139a:	4618      	mov	r0, r3
    139c:	e7f9      	b.n	1392 <usb_tx_packet_count+0x1a>
    139e:	bf00      	nop
    13a0:	1fff8e38 	.word	0x1fff8e38

000013a4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    13a4:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    13a6:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    13a8:	4a19      	ldr	r2, [pc, #100]	; (1410 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    13aa:	4c1a      	ldr	r4, [pc, #104]	; (1414 <usb_rx_memory+0x70>)
	__disable_irq();
    13ac:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    13ae:	f812 1b01 	ldrb.w	r1, [r2], #1
    13b2:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    13b4:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    13b8:	d505      	bpl.n	13c6 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    13ba:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    13be:	b161      	cbz	r1, 13da <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    13c0:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    13c4:	b1b9      	cbz	r1, 13f6 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    13c6:	3304      	adds	r3, #4
    13c8:	2b14      	cmp	r3, #20
    13ca:	d1f0      	bne.n	13ae <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    13cc:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    13ce:	4b12      	ldr	r3, [pc, #72]	; (1418 <usb_rx_memory+0x74>)
    13d0:	2200      	movs	r2, #0
    13d2:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    13d4:	bc10      	pop	{r4}
	usb_free(packet);
    13d6:	f000 bc9b 	b.w	1d10 <usb_free>
				usb_rx_memory_needed--;
    13da:	490f      	ldr	r1, [pc, #60]	; (1418 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    13dc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    13e0:	3008      	adds	r0, #8
    13e2:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    13e4:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    13e6:	480d      	ldr	r0, [pc, #52]	; (141c <usb_rx_memory+0x78>)
    13e8:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    13ec:	3a01      	subs	r2, #1
    13ee:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    13f0:	b662      	cpsie	i
}
    13f2:	bc10      	pop	{r4}
    13f4:	4770      	bx	lr
				usb_rx_memory_needed--;
    13f6:	4a08      	ldr	r2, [pc, #32]	; (1418 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    13f8:	4909      	ldr	r1, [pc, #36]	; (1420 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    13fa:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    13fe:	3008      	adds	r0, #8
    1400:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    1402:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1404:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    1408:	3b01      	subs	r3, #1
    140a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    140c:	b662      	cpsie	i
				return;
    140e:	e7f0      	b.n	13f2 <usb_rx_memory+0x4e>
    1410:	00003ec8 	.word	0x00003ec8
    1414:	1fff8000 	.word	0x1fff8000
    1418:	1fff8e68 	.word	0x1fff8e68
    141c:	00400088 	.word	0x00400088
    1420:	004000c8 	.word	0x004000c8

00001424 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1424:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1426:	2a03      	cmp	r2, #3
    1428:	d80e      	bhi.n	1448 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    142a:	4b1c      	ldr	r3, [pc, #112]	; (149c <usb_tx+0x78>)
    142c:	0140      	lsls	r0, r0, #5
    142e:	f040 0010 	orr.w	r0, r0, #16
{
    1432:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1434:	4403      	add	r3, r0
	__disable_irq();
    1436:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1438:	4c19      	ldr	r4, [pc, #100]	; (14a0 <usb_tx+0x7c>)
    143a:	5ca0      	ldrb	r0, [r4, r2]
    143c:	2803      	cmp	r0, #3
    143e:	d81c      	bhi.n	147a <usb_tx+0x56>
    1440:	e8df f000 	tbb	[pc, r0]
    1444:	18031513 	.word	0x18031513
    1448:	4770      	bx	lr
    144a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    144c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    144e:	f013 0f08 	tst.w	r3, #8
    1452:	8808      	ldrh	r0, [r1, #0]
    1454:	bf14      	ite	ne
    1456:	22c8      	movne	r2, #200	; 0xc8
    1458:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    145a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    145c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    1460:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1462:	601a      	str	r2, [r3, #0]
	__enable_irq();
    1464:	b662      	cpsie	i
}
    1466:	bc10      	pop	{r4}
    1468:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    146a:	2003      	movs	r0, #3
    146c:	e7ee      	b.n	144c <usb_tx+0x28>
		b++;
    146e:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    1470:	2002      	movs	r0, #2
		break;
    1472:	e7eb      	b.n	144c <usb_tx+0x28>
		b++;
    1474:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1476:	2004      	movs	r0, #4
		break;
    1478:	e7e8      	b.n	144c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    147a:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <usb_tx+0x80>)
    147c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1480:	b138      	cbz	r0, 1492 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    1482:	4b09      	ldr	r3, [pc, #36]	; (14a8 <usb_tx+0x84>)
    1484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1488:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    148e:	b662      	cpsie	i
		return;
    1490:	e7e9      	b.n	1466 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    1492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <usb_tx+0x84>)
    1498:	e7f7      	b.n	148a <usb_tx+0x66>
    149a:	bf00      	nop
    149c:	1fff8000 	.word	0x1fff8000
    14a0:	1fff8e58 	.word	0x1fff8e58
    14a4:	1fff8e38 	.word	0x1fff8e38
    14a8:	1fff8e48 	.word	0x1fff8e48

000014ac <usb_isr>:
}



void usb_isr(void)
{
    14ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    14b0:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 1780 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    14b4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 1784 <usb_isr+0x2d8>
{
    14b8:	b085      	sub	sp, #20
    14ba:	e03d      	b.n	1538 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    14bc:	4db2      	ldr	r5, [pc, #712]	; (1788 <usb_isr+0x2dc>)
    14be:	089e      	lsrs	r6, r3, #2
    14c0:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    14c4:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    14c6:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    14c8:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    14cc:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    14ce:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    14d2:	f040 80b8 	bne.w	1646 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    14d6:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    14da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    14de:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    14e0:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    14e4:	f000 80a7 	beq.w	1636 <usb_isr+0x18a>
					packet->index = 0;
    14e8:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    14ec:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    14f0:	4ba6      	ldr	r3, [pc, #664]	; (178c <usb_isr+0x2e0>)
    14f2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    14f6:	2a00      	cmp	r2, #0
    14f8:	f000 8201 	beq.w	18fe <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    14fc:	4ba4      	ldr	r3, [pc, #656]	; (1790 <usb_isr+0x2e4>)
    14fe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    1502:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    1504:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    1508:	4ba2      	ldr	r3, [pc, #648]	; (1794 <usb_isr+0x2e8>)
    150a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    150e:	4494      	add	ip, r2
    1510:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    1514:	f000 fbdc 	bl	1cd0 <usb_malloc>
					if (packet) {
    1518:	2800      	cmp	r0, #0
    151a:	f000 81e9 	beq.w	18f0 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    151e:	f017 0f08 	tst.w	r7, #8
    1522:	4b9d      	ldr	r3, [pc, #628]	; (1798 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    1524:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    1528:	bf18      	it	ne
    152a:	465b      	movne	r3, fp
						b->addr = packet->buf;
    152c:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    152e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    1532:	2308      	movs	r3, #8
    1534:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    1538:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    153c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    153e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    1540:	d51b      	bpl.n	157a <usb_isr+0xce>
		if (usb_configuration) {
    1542:	4b96      	ldr	r3, [pc, #600]	; (179c <usb_isr+0x2f0>)
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	b1ab      	cbz	r3, 1574 <usb_isr+0xc8>
			t = usb_reboot_timer;
    1548:	4995      	ldr	r1, [pc, #596]	; (17a0 <usb_isr+0x2f4>)
    154a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    154c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1550:	b12a      	cbz	r2, 155e <usb_isr+0xb2>
				usb_reboot_timer = --t;
    1552:	3b01      	subs	r3, #1
    1554:	b2db      	uxtb	r3, r3
    1556:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    1558:	2b00      	cmp	r3, #0
    155a:	f000 8346 	beq.w	1bea <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    155e:	4991      	ldr	r1, [pc, #580]	; (17a4 <usb_isr+0x2f8>)
    1560:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    1562:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1566:	b12a      	cbz	r2, 1574 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    1568:	3b01      	subs	r3, #1
    156a:	b2db      	uxtb	r3, r3
    156c:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    156e:	2b00      	cmp	r3, #0
    1570:	f000 81eb 	beq.w	194a <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    1574:	2304      	movs	r3, #4
    1576:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    157a:	f014 0208 	ands.w	r2, r4, #8
    157e:	f000 81cc 	beq.w	191a <usb_isr+0x46e>
		stat = USB0_STAT;
    1582:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    1586:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    1588:	0912      	lsrs	r2, r2, #4
    158a:	d197      	bne.n	14bc <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    158c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1788 <usb_isr+0x2dc>
    1590:	089b      	lsrs	r3, r3, #2
    1592:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    1596:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    159a:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    159c:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    15a0:	2809      	cmp	r0, #9
    15a2:	d07c      	beq.n	169e <usb_isr+0x1f2>
    15a4:	d80f      	bhi.n	15c6 <usb_isr+0x11a>
    15a6:	3801      	subs	r0, #1
    15a8:	2801      	cmp	r0, #1
    15aa:	d808      	bhi.n	15be <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    15ac:	4a7e      	ldr	r2, [pc, #504]	; (17a8 <usb_isr+0x2fc>)
    15ae:	8815      	ldrh	r5, [r2, #0]
    15b0:	f242 0021 	movw	r0, #8225	; 0x2021
    15b4:	4285      	cmp	r5, r0
    15b6:	f000 81fb 	beq.w	19b0 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    15ba:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    15be:	2301      	movs	r3, #1
    15c0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    15c4:	e7b5      	b.n	1532 <usb_isr+0x86>
	switch (pid) {
    15c6:	280d      	cmp	r0, #13
    15c8:	d1f9      	bne.n	15be <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    15ca:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    15ce:	4d77      	ldr	r5, [pc, #476]	; (17ac <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    15d0:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    15d4:	4e74      	ldr	r6, [pc, #464]	; (17a8 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    15d6:	4c76      	ldr	r4, [pc, #472]	; (17b0 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    15d8:	f8c9 2010 	str.w	r2, [r9, #16]
    15dc:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    15de:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    15e2:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    15e6:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    15e8:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    15ea:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    15ee:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    15f2:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    15f4:	f200 80ff 	bhi.w	17f6 <usb_isr+0x34a>
    15f8:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    15fc:	f080 82cb 	bcs.w	1b96 <usb_isr+0x6ea>
    1600:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1604:	f000 8226 	beq.w	1a54 <usb_isr+0x5a8>
    1608:	f240 80de 	bls.w	17c8 <usb_isr+0x31c>
    160c:	f240 3202 	movw	r2, #770	; 0x302
    1610:	4293      	cmp	r3, r2
    1612:	d17b      	bne.n	170c <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    1614:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    1618:	2f04      	cmp	r7, #4
    161a:	f200 8108 	bhi.w	182e <usb_isr+0x382>
    161e:	0c02      	lsrs	r2, r0, #16
    1620:	f040 8105 	bne.w	182e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    1624:	4963      	ldr	r1, [pc, #396]	; (17b4 <usb_isr+0x308>)
    1626:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    162a:	f043 0302 	orr.w	r3, r3, #2
    162e:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    1632:	4613      	mov	r3, r2
		break;
    1634:	e070      	b.n	1718 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1636:	f017 0f08 	tst.w	r7, #8
    163a:	4b57      	ldr	r3, [pc, #348]	; (1798 <usb_isr+0x2ec>)
    163c:	bf18      	it	ne
    163e:	465b      	movne	r3, fp
    1640:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    1644:	e775      	b.n	1532 <usb_isr+0x86>
				usb_free(packet);
    1646:	f000 fb63 	bl	1d10 <usb_free>
				packet = tx_first[endpoint];
    164a:	495b      	ldr	r1, [pc, #364]	; (17b8 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    164c:	4a5b      	ldr	r2, [pc, #364]	; (17bc <usb_isr+0x310>)
				packet = tx_first[endpoint];
    164e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    1652:	2b00      	cmp	r3, #0
    1654:	f000 8157 	beq.w	1906 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    1658:	6858      	ldr	r0, [r3, #4]
    165a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    165e:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    1660:	f103 0008 	add.w	r0, r3, #8
    1664:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    1666:	2903      	cmp	r1, #3
    1668:	d805      	bhi.n	1676 <usb_isr+0x1ca>
    166a:	e8df f001 	tbb	[pc, r1]
    166e:	0f12      	.short	0x0f12
    1670:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    1672:	2104      	movs	r1, #4
    1674:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    1676:	881a      	ldrh	r2, [r3, #0]
    1678:	f017 0f08 	tst.w	r7, #8
    167c:	bf14      	ite	ne
    167e:	23c8      	movne	r3, #200	; 0xc8
    1680:	2388      	moveq	r3, #136	; 0x88
    1682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1686:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    168a:	e752      	b.n	1532 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    168c:	2102      	movs	r1, #2
    168e:	5511      	strb	r1, [r2, r4]
						break;
    1690:	e7f1      	b.n	1676 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    1692:	2103      	movs	r1, #3
    1694:	5511      	strb	r1, [r2, r4]
						break;
    1696:	e7ee      	b.n	1676 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    1698:	2105      	movs	r1, #5
    169a:	5511      	strb	r1, [r2, r4]
						break;
    169c:	e7eb      	b.n	1676 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    169e:	4d43      	ldr	r5, [pc, #268]	; (17ac <usb_isr+0x300>)
    16a0:	682a      	ldr	r2, [r5, #0]
		if (data) {
    16a2:	b33a      	cbz	r2, 16f4 <usb_isr+0x248>
			size = ep0_tx_len;
    16a4:	4946      	ldr	r1, [pc, #280]	; (17c0 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    16a6:	4c42      	ldr	r4, [pc, #264]	; (17b0 <usb_isr+0x304>)
			size = ep0_tx_len;
    16a8:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    16aa:	4846      	ldr	r0, [pc, #280]	; (17c4 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    16ac:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    16b0:	7806      	ldrb	r6, [r0, #0]
    16b2:	2f40      	cmp	r7, #64	; 0x40
    16b4:	463b      	mov	r3, r7
    16b6:	bf28      	it	cs
    16b8:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    16ba:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    16be:	f08e 0e01 	eor.w	lr, lr, #1
    16c2:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    16c6:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    16ca:	f086 0601 	eor.w	r6, r6, #1
    16ce:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    16d0:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    16d4:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    16d6:	bf14      	ite	ne
    16d8:	20c8      	movne	r0, #200	; 0xc8
    16da:	2088      	moveq	r0, #136	; 0x88
    16dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    16e0:	441a      	add	r2, r3
			ep0_tx_len -= size;
    16e2:	1afb      	subs	r3, r7, r3
    16e4:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    16e6:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    16ea:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    16ec:	2b00      	cmp	r3, #0
    16ee:	f000 8136 	beq.w	195e <usb_isr+0x4b2>
    16f2:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    16f4:	4b2c      	ldr	r3, [pc, #176]	; (17a8 <usb_isr+0x2fc>)
    16f6:	881a      	ldrh	r2, [r3, #0]
    16f8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    16fc:	f47f af5f 	bne.w	15be <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    1700:	789a      	ldrb	r2, [r3, #2]
    1702:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    1706:	2200      	movs	r2, #0
    1708:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    170a:	e758      	b.n	15be <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    170c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1710:	f040 808d 	bne.w	182e <usb_isr+0x382>
	uint32_t datalen = 0;
    1714:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    1716:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    1718:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    171c:	4829      	ldr	r0, [pc, #164]	; (17c4 <usb_isr+0x318>)
    171e:	4594      	cmp	ip, r2
    1720:	bf28      	it	cs
    1722:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    1724:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1726:	7802      	ldrb	r2, [r0, #0]
    1728:	2f40      	cmp	r7, #64	; 0x40
    172a:	bf28      	it	cs
    172c:	2740      	movcs	r7, #64	; 0x40
    172e:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1732:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1734:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1738:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    173c:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1740:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    1744:	2600      	movs	r6, #0
	data += size;
    1746:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    1748:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    174a:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    174e:	f082 0601 	eor.w	r6, r2, #1
    1752:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    1754:	f040 8111 	bne.w	197a <usb_isr+0x4ce>
    1758:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    175c:	f04f 0501 	mov.w	r5, #1
    1760:	d909      	bls.n	1776 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1762:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    1766:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1768:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    176c:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    176e:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1770:	2388      	movs	r3, #136	; 0x88
    1772:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1776:	2301      	movs	r3, #1
    1778:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    177c:	e71f      	b.n	15be <usb_isr+0x112>
    177e:	bf00      	nop
    1780:	40072000 	.word	0x40072000
    1784:	004000c8 	.word	0x004000c8
    1788:	1fff8000 	.word	0x1fff8000
    178c:	1fff8e10 	.word	0x1fff8e10
    1790:	1fff8e20 	.word	0x1fff8e20
    1794:	1fff8e60 	.word	0x1fff8e60
    1798:	00400088 	.word	0x00400088
    179c:	1fff8e5c 	.word	0x1fff8e5c
    17a0:	1fff8e5d 	.word	0x1fff8e5d
    17a4:	1fff8e88 	.word	0x1fff8e88
    17a8:	1fff8e30 	.word	0x1fff8e30
    17ac:	1fff8e04 	.word	0x1fff8e04
    17b0:	1fff8e01 	.word	0x1fff8e01
    17b4:	400720c0 	.word	0x400720c0
    17b8:	1fff8e38 	.word	0x1fff8e38
    17bc:	1fff8e58 	.word	0x1fff8e58
    17c0:	1fff8e02 	.word	0x1fff8e02
    17c4:	1fff8e00 	.word	0x1fff8e00
	switch (setup.wRequestAndType) {
    17c8:	2b80      	cmp	r3, #128	; 0x80
    17ca:	f000 818b 	beq.w	1ae4 <usb_isr+0x638>
    17ce:	2b82      	cmp	r3, #130	; 0x82
    17d0:	d12d      	bne.n	182e <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    17d2:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    17d6:	2f04      	cmp	r7, #4
    17d8:	d829      	bhi.n	182e <usb_isr+0x382>
		reply_buffer[0] = 0;
    17da:	4aa7      	ldr	r2, [pc, #668]	; (1a78 <usb_isr+0x5cc>)
    17dc:	2300      	movs	r3, #0
    17de:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    17e0:	4ba6      	ldr	r3, [pc, #664]	; (1a7c <usb_isr+0x5d0>)
    17e2:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    17e6:	079f      	lsls	r7, r3, #30
    17e8:	f140 81fc 	bpl.w	1be4 <usb_isr+0x738>
    17ec:	2301      	movs	r3, #1
    17ee:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    17f0:	4ba1      	ldr	r3, [pc, #644]	; (1a78 <usb_isr+0x5cc>)
		datalen = 2;
    17f2:	2202      	movs	r2, #2
    17f4:	e790      	b.n	1718 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    17f6:	f242 0c21 	movw	ip, #8225	; 0x2021
    17fa:	4563      	cmp	r3, ip
    17fc:	d0bb      	beq.n	1776 <usb_isr+0x2ca>
    17fe:	d91d      	bls.n	183c <usb_isr+0x390>
    1800:	f242 2221 	movw	r2, #8737	; 0x2221
    1804:	4293      	cmp	r3, r2
    1806:	d10d      	bne.n	1824 <usb_isr+0x378>
		switch (setup.wIndex) {
    1808:	b2bf      	uxth	r7, r7
    180a:	2f00      	cmp	r7, #0
    180c:	d182      	bne.n	1714 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    180e:	4b9c      	ldr	r3, [pc, #624]	; (1a80 <usb_isr+0x5d4>)
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	4b9c      	ldr	r3, [pc, #624]	; (1a84 <usb_isr+0x5d8>)
    1814:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1816:	4b9c      	ldr	r3, [pc, #624]	; (1a88 <usb_isr+0x5dc>)
    1818:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    181c:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    181e:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    1820:	4613      	mov	r3, r2
			break;
    1822:	e779      	b.n	1718 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    1824:	f242 3221 	movw	r2, #8993	; 0x2321
    1828:	4293      	cmp	r3, r2
    182a:	f43f af73 	beq.w	1714 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    182e:	230f      	movs	r3, #15
    1830:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1834:	2301      	movs	r3, #1
    1836:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    183a:	e6c0      	b.n	15be <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    183c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1840:	f000 814a 	beq.w	1ad8 <usb_isr+0x62c>
    1844:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1848:	d1f1      	bne.n	182e <usb_isr+0x382>
		usb_configuration = setup.wValue;
    184a:	4b90      	ldr	r3, [pc, #576]	; (1a8c <usb_isr+0x5e0>)
    184c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    1850:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    1852:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    1854:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    1858:	061a      	lsls	r2, r3, #24
    185a:	d406      	bmi.n	186a <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    185c:	3501      	adds	r5, #1
    185e:	2d14      	cmp	r5, #20
    1860:	d00c      	beq.n	187c <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    1862:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    1866:	061a      	lsls	r2, r3, #24
    1868:	d5f8      	bpl.n	185c <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    186a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    186e:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    1870:	6858      	ldr	r0, [r3, #4]
    1872:	3808      	subs	r0, #8
    1874:	f000 fa4c 	bl	1d10 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    1878:	2d14      	cmp	r5, #20
    187a:	d1f2      	bne.n	1862 <usb_isr+0x3b6>
    187c:	4a84      	ldr	r2, [pc, #528]	; (1a90 <usb_isr+0x5e4>)
    187e:	4b85      	ldr	r3, [pc, #532]	; (1a94 <usb_isr+0x5e8>)
    1880:	9202      	str	r2, [sp, #8]
    1882:	4a85      	ldr	r2, [pc, #532]	; (1a98 <usb_isr+0x5ec>)
    1884:	9201      	str	r2, [sp, #4]
    1886:	4e85      	ldr	r6, [pc, #532]	; (1a9c <usb_isr+0x5f0>)
    1888:	4a85      	ldr	r2, [pc, #532]	; (1aa0 <usb_isr+0x5f4>)
    188a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1aa4 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    188e:	9403      	str	r4, [sp, #12]
    1890:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    1892:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1894:	461c      	mov	r4, r3
			p = rx_first[i];
    1896:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    189a:	b12f      	cbz	r7, 18a8 <usb_isr+0x3fc>
				n = p->next;
    189c:	4638      	mov	r0, r7
    189e:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    18a0:	f000 fa36 	bl	1d10 <usb_free>
			while (p) {
    18a4:	2f00      	cmp	r7, #0
    18a6:	d1f9      	bne.n	189c <usb_isr+0x3f0>
			rx_last[i] = NULL;
    18a8:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    18aa:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    18ae:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    18b2:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    18b6:	9300      	str	r3, [sp, #0]
			while (p) {
    18b8:	b12f      	cbz	r7, 18c6 <usb_isr+0x41a>
				n = p->next;
    18ba:	4638      	mov	r0, r7
    18bc:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    18be:	f000 fa27 	bl	1d10 <usb_free>
			while (p) {
    18c2:	2f00      	cmp	r7, #0
    18c4:	d1f9      	bne.n	18ba <usb_isr+0x40e>
			tx_last[i] = NULL;
    18c6:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    18c8:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    18cc:	f843 5b04 	str.w	r5, [r3], #4
    18d0:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    18d2:	9b01      	ldr	r3, [sp, #4]
    18d4:	f823 5b02 	strh.w	r5, [r3], #2
    18d8:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    18da:	7823      	ldrb	r3, [r4, #0]
    18dc:	3b02      	subs	r3, #2
    18de:	2b03      	cmp	r3, #3
    18e0:	f200 8109 	bhi.w	1af6 <usb_isr+0x64a>
    18e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    18e8:	0104013f 	.word	0x0104013f
    18ec:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    18f0:	4a6d      	ldr	r2, [pc, #436]	; (1aa8 <usb_isr+0x5fc>)
						b->desc = 0;
    18f2:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    18f6:	7813      	ldrb	r3, [r2, #0]
    18f8:	3301      	adds	r3, #1
    18fa:	7013      	strb	r3, [r2, #0]
    18fc:	e619      	b.n	1532 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    18fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    1902:	4b67      	ldr	r3, [pc, #412]	; (1aa0 <usb_isr+0x5f4>)
    1904:	e5fe      	b.n	1504 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    1906:	5d11      	ldrb	r1, [r2, r4]
    1908:	2902      	cmp	r1, #2
    190a:	d026      	beq.n	195a <usb_isr+0x4ae>
    190c:	f67f ae11 	bls.w	1532 <usb_isr+0x86>
    1910:	2903      	cmp	r1, #3
    1912:	d11d      	bne.n	1950 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1914:	2301      	movs	r3, #1
    1916:	5513      	strb	r3, [r2, r4]
						break;
    1918:	e60b      	b.n	1532 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    191a:	07e0      	lsls	r0, r4, #31
    191c:	d46e      	bmi.n	19fc <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    191e:	0621      	lsls	r1, r4, #24
    1920:	d421      	bmi.n	1966 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    1922:	07a2      	lsls	r2, r4, #30
    1924:	d508      	bpl.n	1938 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    1926:	4b61      	ldr	r3, [pc, #388]	; (1aac <usb_isr+0x600>)
    1928:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    192c:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    192e:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    1930:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    1934:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    1938:	06e3      	lsls	r3, r4, #27
    193a:	d503      	bpl.n	1944 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    193c:	4b5b      	ldr	r3, [pc, #364]	; (1aac <usb_isr+0x600>)
    193e:	2210      	movs	r2, #16
    1940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    1944:	b005      	add	sp, #20
    1946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    194a:	f000 fb59 	bl	2000 <usb_serial_flush_callback>
    194e:	e611      	b.n	1574 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    1950:	f017 0f08 	tst.w	r7, #8
    1954:	bf14      	ite	ne
    1956:	2303      	movne	r3, #3
    1958:	2302      	moveq	r3, #2
    195a:	5513      	strb	r3, [r2, r4]
						break;
    195c:	e5e9      	b.n	1532 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    195e:	2f3f      	cmp	r7, #63	; 0x3f
    1960:	bf98      	it	ls
    1962:	2200      	movls	r2, #0
    1964:	e6c5      	b.n	16f2 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1966:	4b51      	ldr	r3, [pc, #324]	; (1aac <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    1968:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    196a:	210d      	movs	r1, #13
    196c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    1970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    1974:	07a2      	lsls	r2, r4, #30
    1976:	d5df      	bpl.n	1938 <usb_isr+0x48c>
    1978:	e7d5      	b.n	1926 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    197a:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    197e:	7002      	strb	r2, [r0, #0]
    1980:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1982:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    1986:	463a      	mov	r2, r7
    1988:	bf28      	it	cs
    198a:	2240      	movcs	r2, #64	; 0x40
    198c:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    198e:	0410      	lsls	r0, r2, #16
	data += size;
    1990:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1992:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    1996:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    1998:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    199a:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    199e:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    19a0:	d055      	beq.n	1a4e <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    19a2:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    19a4:	4b42      	ldr	r3, [pc, #264]	; (1ab0 <usb_isr+0x604>)
    19a6:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    19a8:	2301      	movs	r3, #1
    19aa:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    19ae:	e606      	b.n	15be <usb_isr+0x112>
			switch (setup.wIndex) {
    19b0:	8892      	ldrh	r2, [r2, #4]
    19b2:	b95a      	cbnz	r2, 19cc <usb_isr+0x520>
    19b4:	4a3f      	ldr	r2, [pc, #252]	; (1ab4 <usb_isr+0x608>)
    19b6:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    19b8:	f814 1b01 	ldrb.w	r1, [r4], #1
    19bc:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    19c0:	42ac      	cmp	r4, r5
    19c2:	d1f9      	bne.n	19b8 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    19c4:	4a3c      	ldr	r2, [pc, #240]	; (1ab8 <usb_isr+0x60c>)
    19c6:	6812      	ldr	r2, [r2, #0]
    19c8:	2a86      	cmp	r2, #134	; 0x86
    19ca:	d03c      	beq.n	1a46 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    19cc:	4c3b      	ldr	r4, [pc, #236]	; (1abc <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    19ce:	483c      	ldr	r0, [pc, #240]	; (1ac0 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    19d0:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    19d2:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    19d4:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    19d6:	f085 0501 	eor.w	r5, r5, #1
    19da:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    19dc:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    19e0:	f082 0201 	eor.w	r2, r2, #1
    19e4:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    19e6:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    19ea:	f04f 0000 	mov.w	r0, #0
    19ee:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    19f0:	bf14      	ite	ne
    19f2:	22c8      	movne	r2, #200	; 0xc8
    19f4:	2288      	moveq	r2, #136	; 0x88
    19f6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    19fa:	e5de      	b.n	15ba <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    19fc:	4b2b      	ldr	r3, [pc, #172]	; (1aac <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    19fe:	4830      	ldr	r0, [pc, #192]	; (1ac0 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    1a00:	4930      	ldr	r1, [pc, #192]	; (1ac4 <usb_isr+0x618>)
    1a02:	4c31      	ldr	r4, [pc, #196]	; (1ac8 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    1a04:	2502      	movs	r5, #2
    1a06:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    1a0a:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    1a0c:	482f      	ldr	r0, [pc, #188]	; (1acc <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    1a0e:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1a10:	4d2f      	ldr	r5, [pc, #188]	; (1ad0 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    1a12:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    1a14:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1a16:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1a18:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    1a1a:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    1a1c:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    1a1e:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1a20:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    1a24:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    1a26:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    1a28:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    1a2c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    1a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    1a34:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    1a38:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    1a3c:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    1a40:	b005      	add	sp, #20
    1a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    1a46:	4a23      	ldr	r2, [pc, #140]	; (1ad4 <usb_isr+0x628>)
    1a48:	200f      	movs	r0, #15
    1a4a:	7010      	strb	r0, [r2, #0]
    1a4c:	e7be      	b.n	19cc <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    1a4e:	2f3f      	cmp	r7, #63	; 0x3f
    1a50:	d8a7      	bhi.n	19a2 <usb_isr+0x4f6>
    1a52:	e690      	b.n	1776 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    1a54:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    1a58:	2f04      	cmp	r7, #4
    1a5a:	f63f aee8 	bhi.w	182e <usb_isr+0x382>
    1a5e:	0c00      	lsrs	r0, r0, #16
    1a60:	f47f aee5 	bne.w	182e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    1a64:	4a05      	ldr	r2, [pc, #20]	; (1a7c <usb_isr+0x5d0>)
    1a66:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    1a6a:	f023 0302 	bic.w	r3, r3, #2
    1a6e:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    1a72:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    1a74:	4613      	mov	r3, r2
		break;
    1a76:	e64f      	b.n	1718 <usb_isr+0x26c>
    1a78:	1fff8e08 	.word	0x1fff8e08
    1a7c:	400720c0 	.word	0x400720c0
    1a80:	1fff8d7c 	.word	0x1fff8d7c
    1a84:	1fff8e84 	.word	0x1fff8e84
    1a88:	1fff8e80 	.word	0x1fff8e80
    1a8c:	1fff8e5c 	.word	0x1fff8e5c
    1a90:	1fff8e48 	.word	0x1fff8e48
    1a94:	1fff8e58 	.word	0x1fff8e58
    1a98:	1fff8e60 	.word	0x1fff8e60
    1a9c:	1fff8e10 	.word	0x1fff8e10
    1aa0:	1fff8e20 	.word	0x1fff8e20
    1aa4:	1fff8e38 	.word	0x1fff8e38
    1aa8:	1fff8e68 	.word	0x1fff8e68
    1aac:	40072000 	.word	0x40072000
    1ab0:	1fff8e02 	.word	0x1fff8e02
    1ab4:	1fff8e77 	.word	0x1fff8e77
    1ab8:	1fff8e78 	.word	0x1fff8e78
    1abc:	1fff8e01 	.word	0x1fff8e01
    1ac0:	1fff8e00 	.word	0x1fff8e00
    1ac4:	1fff8000 	.word	0x1fff8000
    1ac8:	00400088 	.word	0x00400088
    1acc:	1fff8d80 	.word	0x1fff8d80
    1ad0:	1fff8dc0 	.word	0x1fff8dc0
    1ad4:	1fff8e5d 	.word	0x1fff8e5d
		reply_buffer[0] = usb_configuration;
    1ad8:	4b48      	ldr	r3, [pc, #288]	; (1bfc <usb_isr+0x750>)
    1ada:	4949      	ldr	r1, [pc, #292]	; (1c00 <usb_isr+0x754>)
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    1ae0:	460b      	mov	r3, r1
		break;
    1ae2:	e619      	b.n	1718 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    1ae4:	4a46      	ldr	r2, [pc, #280]	; (1c00 <usb_isr+0x754>)
    1ae6:	2300      	movs	r3, #0
    1ae8:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    1aea:	4b45      	ldr	r3, [pc, #276]	; (1c00 <usb_isr+0x754>)
		datalen = 2;
    1aec:	2202      	movs	r2, #2
		break;
    1aee:	e613      	b.n	1718 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1af0:	f04f 0301 	mov.w	r3, #1
    1af4:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    1af6:	4b43      	ldr	r3, [pc, #268]	; (1c04 <usb_isr+0x758>)
    1af8:	42b3      	cmp	r3, r6
    1afa:	f104 0401 	add.w	r4, r4, #1
    1afe:	f47f aeca 	bne.w	1896 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    1b02:	4e41      	ldr	r6, [pc, #260]	; (1c08 <usb_isr+0x75c>)
    1b04:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    1b06:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1c0c <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1b0a:	4f41      	ldr	r7, [pc, #260]	; (1c10 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    1b0c:	2300      	movs	r3, #0
    1b0e:	7033      	strb	r3, [r6, #0]
    1b10:	2504      	movs	r5, #4
			epconf = *cfg++;
    1b12:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    1b16:	4a3f      	ldr	r2, [pc, #252]	; (1c14 <usb_isr+0x768>)
    1b18:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    1b1a:	071b      	lsls	r3, r3, #28
    1b1c:	d425      	bmi.n	1b6a <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    1b1e:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    1b22:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    1b26:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    1b28:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    1b2a:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    1b2c:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    1b30:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    1b34:	d1ed      	bne.n	1b12 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b36:	4f38      	ldr	r7, [pc, #224]	; (1c18 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b38:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b3a:	783a      	ldrb	r2, [r7, #0]
    1b3c:	f042 0002 	orr.w	r0, r2, #2
    1b40:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    1b44:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b48:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b4c:	2d00      	cmp	r5, #0
    1b4e:	d14d      	bne.n	1bec <usb_isr+0x740>
    1b50:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    1b52:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    1b56:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    1b58:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b5a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1b5e:	2301      	movs	r3, #1
    1b60:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    1b64:	e52b      	b.n	15be <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    1b66:	7025      	strb	r5, [r4, #0]
				break;
    1b68:	e7c5      	b.n	1af6 <usb_isr+0x64a>
				p = usb_malloc();
    1b6a:	f000 f8b1 	bl	1cd0 <usb_malloc>
				if (p) {
    1b6e:	2800      	cmp	r0, #0
    1b70:	d032      	beq.n	1bd8 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    1b72:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    1b76:	3008      	adds	r0, #8
    1b78:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1b7a:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    1b7e:	f000 f8a7 	bl	1cd0 <usb_malloc>
				if (p) {
    1b82:	b308      	cbz	r0, 1bc8 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    1b84:	f045 0301 	orr.w	r3, r5, #1
    1b88:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    1b8c:	3008      	adds	r0, #8
    1b8e:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1b90:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    1b94:	e7c3      	b.n	1b1e <usb_isr+0x672>
			if (list->addr == NULL) break;
    1b96:	4a21      	ldr	r2, [pc, #132]	; (1c1c <usb_isr+0x770>)
    1b98:	6853      	ldr	r3, [r2, #4]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	f43f ae47 	beq.w	182e <usb_isr+0x382>
    1ba0:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1ba2:	b2bf      	uxth	r7, r7
    1ba4:	e004      	b.n	1bb0 <usb_isr+0x704>
			if (list->addr == NULL) break;
    1ba6:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    1ba8:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    1baa:	2b00      	cmp	r3, #0
    1bac:	f43f ae3f 	beq.w	182e <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1bb0:	8811      	ldrh	r1, [r2, #0]
    1bb2:	4281      	cmp	r1, r0
    1bb4:	d1f7      	bne.n	1ba6 <usb_isr+0x6fa>
    1bb6:	8851      	ldrh	r1, [r2, #2]
    1bb8:	42b9      	cmp	r1, r7
    1bba:	d1f4      	bne.n	1ba6 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    1bbc:	0a00      	lsrs	r0, r0, #8
    1bbe:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    1bc0:	bf0c      	ite	eq
    1bc2:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    1bc4:	8912      	ldrhne	r2, [r2, #8]
    1bc6:	e5a7      	b.n	1718 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    1bc8:	7833      	ldrb	r3, [r6, #0]
    1bca:	3301      	adds	r3, #1
    1bcc:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    1bce:	f045 0301 	orr.w	r3, r5, #1
    1bd2:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    1bd6:	e7a2      	b.n	1b1e <usb_isr+0x672>
					usb_rx_memory_needed++;
    1bd8:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    1bda:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    1bde:	3301      	adds	r3, #1
    1be0:	7033      	strb	r3, [r6, #0]
    1be2:	e7cc      	b.n	1b7e <usb_isr+0x6d2>
		data = reply_buffer;
    1be4:	4b06      	ldr	r3, [pc, #24]	; (1c00 <usb_isr+0x754>)
		datalen = 2;
    1be6:	2202      	movs	r2, #2
    1be8:	e596      	b.n	1718 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    1bea:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    1bec:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1bee:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    1bf0:	f082 0601 	eor.w	r6, r2, #1
    1bf4:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1bf6:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    1bfa:	e5bc      	b.n	1776 <usb_isr+0x2ca>
    1bfc:	1fff8e5c 	.word	0x1fff8e5c
    1c00:	1fff8e08 	.word	0x1fff8e08
    1c04:	1fff8e20 	.word	0x1fff8e20
    1c08:	1fff8e68 	.word	0x1fff8e68
    1c0c:	00003ec8 	.word	0x00003ec8
    1c10:	00400088 	.word	0x00400088
    1c14:	400720c0 	.word	0x400720c0
    1c18:	1fff8e00 	.word	0x1fff8e00
    1c1c:	00003e74 	.word	0x00003e74

00001c20 <usb_init>:



void usb_init(void)
{
    1c20:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    1c22:	f000 fb1b 	bl	225c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    1c26:	2300      	movs	r3, #0
    1c28:	4a1a      	ldr	r2, [pc, #104]	; (1c94 <usb_init+0x74>)
		table[i].desc = 0;
    1c2a:	4619      	mov	r1, r3
    1c2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    1c30:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    1c34:	3301      	adds	r3, #1
    1c36:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    1c38:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    1c3a:	d1f7      	bne.n	1c2c <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    1c3c:	4c16      	ldr	r4, [pc, #88]	; (1c98 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    1c3e:	4b17      	ldr	r3, [pc, #92]	; (1c9c <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    1c40:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    1c42:	4d17      	ldr	r5, [pc, #92]	; (1ca0 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    1c44:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    1c48:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    1c4a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    1c4e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    1c52:	4c14      	ldr	r4, [pc, #80]	; (1ca4 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    1c54:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    1c56:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    1c5a:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    1c5e:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    1c60:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    1c64:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    1c68:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    1c6c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    1c70:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    1c74:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    1c76:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    1c7a:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    1c7c:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    1c80:	2370      	movs	r3, #112	; 0x70
    1c82:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    1c86:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    1c8a:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    1c8c:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    1c90:	7223      	strb	r3, [r4, #8]
}
    1c92:	bd70      	pop	{r4, r5, r6, pc}
    1c94:	1fff8000 	.word	0x1fff8000
    1c98:	40048000 	.word	0x40048000
    1c9c:	40072000 	.word	0x40072000
    1ca0:	e000e400 	.word	0xe000e400
    1ca4:	40072100 	.word	0x40072100

00001ca8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    1ca8:	f000 b8ac 	b.w	1e04 <usb_serial_flush_input>

00001cac <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1cac:	f000 b87c 	b.w	1da8 <usb_serial_peekchar>

00001cb0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1cb0:	f000 b856 	b.w	1d60 <usb_serial_getchar>

00001cb4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1cb4:	f000 b890 	b.w	1dd8 <usb_serial_available>

00001cb8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1cb8:	f000 b976 	b.w	1fa8 <usb_serial_flush_output>

00001cbc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1cbc:	f000 b950 	b.w	1f60 <usb_serial_write_buffer_free>

00001cc0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1cc0:	4608      	mov	r0, r1
    1cc2:	4611      	mov	r1, r2
    1cc4:	f000 b8ba 	b.w	1e3c <usb_serial_write>

00001cc8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1cc8:	4608      	mov	r0, r1
    1cca:	f000 b93b 	b.w	1f44 <usb_serial_putchar>
    1cce:	bf00      	nop

00001cd0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1cd0:	b672      	cpsid	i
	avail = usb_buffer_available;
    1cd2:	490d      	ldr	r1, [pc, #52]	; (1d08 <usb_malloc+0x38>)
    1cd4:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1cd6:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    1cda:	280b      	cmp	r0, #11
    1cdc:	dc10      	bgt.n	1d00 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1ce2:	40c2      	lsrs	r2, r0
    1ce4:	ea23 0302 	bic.w	r3, r3, r2
    1ce8:	600b      	str	r3, [r1, #0]
	__enable_irq();
    1cea:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1cec:	4a07      	ldr	r2, [pc, #28]	; (1d0c <usb_malloc+0x3c>)
    1cee:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1cf2:	00c1      	lsls	r1, r0, #3
    1cf4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1cf8:	2300      	movs	r3, #0
    1cfa:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    1cfc:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    1cfe:	4770      	bx	lr
		__enable_irq();
    1d00:	b662      	cpsie	i
		return NULL;
    1d02:	2000      	movs	r0, #0
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop
    1d08:	1fff8738 	.word	0x1fff8738
    1d0c:	1fff83bc 	.word	0x1fff83bc

00001d10 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1d10:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <usb_free+0x3c>)
    1d12:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    1d14:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    1d18:	d210      	bcs.n	1d3c <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1d1a:	4a0d      	ldr	r2, [pc, #52]	; (1d50 <usb_free+0x40>)
    1d1c:	7812      	ldrb	r2, [r2, #0]
    1d1e:	b972      	cbnz	r2, 1d3e <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1d20:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1d22:	4a0c      	ldr	r2, [pc, #48]	; (1d54 <usb_free+0x44>)
	usb_buffer_available |= mask;
    1d24:	490c      	ldr	r1, [pc, #48]	; (1d58 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1d26:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    1d2a:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    1d2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1d30:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    1d32:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    1d36:	4303      	orrs	r3, r0
    1d38:	600b      	str	r3, [r1, #0]
	__enable_irq();
    1d3a:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    1d3c:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    1d3e:	4a07      	ldr	r2, [pc, #28]	; (1d5c <usb_free+0x4c>)
    1d40:	7812      	ldrb	r2, [r2, #0]
    1d42:	2a00      	cmp	r2, #0
    1d44:	d0ec      	beq.n	1d20 <usb_free+0x10>
		usb_rx_memory(p);
    1d46:	f7ff bb2d 	b.w	13a4 <usb_rx_memory>
    1d4a:	bf00      	nop
    1d4c:	1fff83bc 	.word	0x1fff83bc
    1d50:	1fff8e68 	.word	0x1fff8e68
    1d54:	38e38e39 	.word	0x38e38e39
    1d58:	1fff8738 	.word	0x1fff8738
    1d5c:	1fff8e5c 	.word	0x1fff8e5c

00001d60 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1d60:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1d62:	4c0f      	ldr	r4, [pc, #60]	; (1da0 <usb_serial_getchar+0x40>)
    1d64:	6820      	ldr	r0, [r4, #0]
    1d66:	b178      	cbz	r0, 1d88 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1d68:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1d6a:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    1d6c:	18c1      	adds	r1, r0, r3
    1d6e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    1d70:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    1d72:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    1d74:	d902      	bls.n	1d7c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1d76:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    1d78:	4628      	mov	r0, r5
    1d7a:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    1d7c:	f7ff ffc8 	bl	1d10 <usb_free>
		rx_packet = NULL;
    1d80:	2300      	movs	r3, #0
    1d82:	6023      	str	r3, [r4, #0]
}
    1d84:	4628      	mov	r0, r5
    1d86:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    1d88:	4b06      	ldr	r3, [pc, #24]	; (1da4 <usb_serial_getchar+0x44>)
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	b12b      	cbz	r3, 1d9a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1d8e:	2003      	movs	r0, #3
    1d90:	f7ff fad0 	bl	1334 <usb_rx>
    1d94:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1d96:	2800      	cmp	r0, #0
    1d98:	d1e6      	bne.n	1d68 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    1d9a:	f04f 35ff 	mov.w	r5, #4294967295
    1d9e:	e7eb      	b.n	1d78 <usb_serial_getchar+0x18>
    1da0:	1fff8e6c 	.word	0x1fff8e6c
    1da4:	1fff8e5c 	.word	0x1fff8e5c

00001da8 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1da8:	b510      	push	{r4, lr}
	if (!rx_packet) {
    1daa:	4c09      	ldr	r4, [pc, #36]	; (1dd0 <usb_serial_peekchar+0x28>)
    1dac:	6820      	ldr	r0, [r4, #0]
    1dae:	b118      	cbz	r0, 1db8 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1db0:	8843      	ldrh	r3, [r0, #2]
    1db2:	4418      	add	r0, r3
    1db4:	7a00      	ldrb	r0, [r0, #8]
}
    1db6:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    1db8:	4b06      	ldr	r3, [pc, #24]	; (1dd4 <usb_serial_peekchar+0x2c>)
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	b12b      	cbz	r3, 1dca <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1dbe:	2003      	movs	r0, #3
    1dc0:	f7ff fab8 	bl	1334 <usb_rx>
    1dc4:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1dc6:	2800      	cmp	r0, #0
    1dc8:	d1f2      	bne.n	1db0 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    1dca:	f04f 30ff 	mov.w	r0, #4294967295
}
    1dce:	bd10      	pop	{r4, pc}
    1dd0:	1fff8e6c 	.word	0x1fff8e6c
    1dd4:	1fff8e5c 	.word	0x1fff8e5c

00001dd8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1dd8:	4b08      	ldr	r3, [pc, #32]	; (1dfc <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1dda:	4a09      	ldr	r2, [pc, #36]	; (1e00 <usb_serial_available+0x28>)
    1ddc:	681b      	ldr	r3, [r3, #0]
{
    1dde:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1de0:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1de2:	b11b      	cbz	r3, 1dec <usb_serial_available+0x14>
    1de4:	881a      	ldrh	r2, [r3, #0]
    1de6:	885b      	ldrh	r3, [r3, #2]
    1de8:	1ad3      	subs	r3, r2, r3
    1dea:	441c      	add	r4, r3
	if (count == 0) yield();
    1dec:	b10c      	cbz	r4, 1df2 <usb_serial_available+0x1a>
	return count;
}
    1dee:	4620      	mov	r0, r4
    1df0:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    1df2:	f000 f929 	bl	2048 <yield>
}
    1df6:	4620      	mov	r0, r4
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	bf00      	nop
    1dfc:	1fff8e6c 	.word	0x1fff8e6c
    1e00:	1fff8e60 	.word	0x1fff8e60

00001e04 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1e04:	4b0b      	ldr	r3, [pc, #44]	; (1e34 <usb_serial_flush_input+0x30>)
    1e06:	781b      	ldrb	r3, [r3, #0]
    1e08:	b19b      	cbz	r3, 1e32 <usb_serial_flush_input+0x2e>
{
    1e0a:	b510      	push	{r4, lr}
	if (rx_packet) {
    1e0c:	4c0a      	ldr	r4, [pc, #40]	; (1e38 <usb_serial_flush_input+0x34>)
    1e0e:	6820      	ldr	r0, [r4, #0]
    1e10:	b148      	cbz	r0, 1e26 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1e12:	f7ff ff7d 	bl	1d10 <usb_free>
		rx_packet = NULL;
    1e16:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e18:	2003      	movs	r0, #3
		rx_packet = NULL;
    1e1a:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e1c:	f7ff fa8a 	bl	1334 <usb_rx>
		if (!rx) break;
    1e20:	b130      	cbz	r0, 1e30 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1e22:	f7ff ff75 	bl	1d10 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e26:	2003      	movs	r0, #3
    1e28:	f7ff fa84 	bl	1334 <usb_rx>
		if (!rx) break;
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d1f8      	bne.n	1e22 <usb_serial_flush_input+0x1e>
	}
}
    1e30:	bd10      	pop	{r4, pc}
    1e32:	4770      	bx	lr
    1e34:	1fff8e5c 	.word	0x1fff8e5c
    1e38:	1fff8e6c 	.word	0x1fff8e6c

00001e3c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1e40:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1f30 <usb_serial_write+0xf4>
{
    1e44:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    1e46:	2201      	movs	r2, #1
    1e48:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    1e4c:	9101      	str	r1, [sp, #4]
    1e4e:	b379      	cbz	r1, 1eb0 <usb_serial_write+0x74>
    1e50:	4f38      	ldr	r7, [pc, #224]	; (1f34 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1e52:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1f38 <usb_serial_write+0xfc>
	while (size > 0) {
    1e56:	9d01      	ldr	r5, [sp, #4]
    1e58:	4e38      	ldr	r6, [pc, #224]	; (1f3c <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1f40 <usb_serial_write+0x104>
    1e5e:	4683      	mov	fp, r0
		if (!tx_packet) {
    1e60:	6839      	ldr	r1, [r7, #0]
    1e62:	b3a1      	cbz	r1, 1ece <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    1e64:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    1e68:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    1e6c:	45ac      	cmp	ip, r5
    1e6e:	bf28      	it	cs
    1e70:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    1e72:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    1e76:	2200      	movs	r2, #0
		tx_packet->index += len;
    1e78:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    1e7a:	7032      	strb	r2, [r6, #0]
		size -= len;
    1e7c:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    1e80:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    1e82:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    1e86:	f1bc 0f00 	cmp.w	ip, #0
    1e8a:	d00a      	beq.n	1ea2 <usb_serial_write+0x66>
    1e8c:	f10e 3eff 	add.w	lr, lr, #4294967295
    1e90:	4472      	add	r2, lr
    1e92:	44dc      	add	ip, fp
    1e94:	f81b 4b01 	ldrb.w	r4, [fp], #1
    1e98:	f802 4f01 	strb.w	r4, [r2, #1]!
    1e9c:	45dc      	cmp	ip, fp
    1e9e:	d1f9      	bne.n	1e94 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    1ea0:	884c      	ldrh	r4, [r1, #2]
    1ea2:	2c3f      	cmp	r4, #63	; 0x3f
    1ea4:	d80b      	bhi.n	1ebe <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1ea6:	2205      	movs	r2, #5
    1ea8:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    1eac:	2d00      	cmp	r5, #0
    1eae:	d1d7      	bne.n	1e60 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    1eb0:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    1eb2:	2300      	movs	r3, #0
    1eb4:	f889 3000 	strb.w	r3, [r9]
}
    1eb8:	b003      	add	sp, #12
    1eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    1ebe:	2240      	movs	r2, #64	; 0x40
    1ec0:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1ec2:	2004      	movs	r0, #4
    1ec4:	f7ff faae 	bl	1424 <usb_tx>
			tx_packet = NULL;
    1ec8:	2200      	movs	r2, #0
    1eca:	603a      	str	r2, [r7, #0]
    1ecc:	e7eb      	b.n	1ea6 <usb_serial_write+0x6a>
				if (!usb_configuration) {
    1ece:	f898 2000 	ldrb.w	r2, [r8]
    1ed2:	b32a      	cbz	r2, 1f20 <usb_serial_write+0xe4>
    1ed4:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    1ed8:	e008      	b.n	1eec <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1eda:	3c01      	subs	r4, #1
    1edc:	d019      	beq.n	1f12 <usb_serial_write+0xd6>
    1ede:	7832      	ldrb	r2, [r6, #0]
    1ee0:	b9ba      	cbnz	r2, 1f12 <usb_serial_write+0xd6>
				yield();
    1ee2:	f000 f8b1 	bl	2048 <yield>
				if (!usb_configuration) {
    1ee6:	f898 2000 	ldrb.w	r2, [r8]
    1eea:	b1ca      	cbz	r2, 1f20 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1eec:	2004      	movs	r0, #4
    1eee:	f7ff fa43 	bl	1378 <usb_tx_packet_count>
    1ef2:	2807      	cmp	r0, #7
    1ef4:	d8f1      	bhi.n	1eda <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    1ef6:	f04f 0301 	mov.w	r3, #1
    1efa:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    1efe:	f7ff fee7 	bl	1cd0 <usb_malloc>
    1f02:	4601      	mov	r1, r0
    1f04:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    1f06:	2800      	cmp	r0, #0
    1f08:	d1ac      	bne.n	1e64 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f0a:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    1f0c:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f10:	d1e5      	bne.n	1ede <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    1f12:	2301      	movs	r3, #1
					return -1;
    1f14:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    1f18:	7033      	strb	r3, [r6, #0]
}
    1f1a:	b003      	add	sp, #12
    1f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    1f20:	2300      	movs	r3, #0
					return -1;
    1f22:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    1f26:	f889 3000 	strb.w	r3, [r9]
}
    1f2a:	b003      	add	sp, #12
    1f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f30:	1fff8e71 	.word	0x1fff8e71
    1f34:	1fff8e74 	.word	0x1fff8e74
    1f38:	1fff8e5c 	.word	0x1fff8e5c
    1f3c:	1fff8e70 	.word	0x1fff8e70
    1f40:	1fff8e88 	.word	0x1fff8e88

00001f44 <usb_serial_putchar>:
{
    1f44:	b500      	push	{lr}
    1f46:	b083      	sub	sp, #12
    1f48:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    1f4a:	2101      	movs	r1, #1
    1f4c:	f10d 0007 	add.w	r0, sp, #7
{
    1f50:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    1f54:	f7ff ff72 	bl	1e3c <usb_serial_write>
}
    1f58:	b003      	add	sp, #12
    1f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f5e:	bf00      	nop

00001f60 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1f60:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1f62:	4d0e      	ldr	r5, [pc, #56]	; (1f9c <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    1f64:	4c0e      	ldr	r4, [pc, #56]	; (1fa0 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1f66:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    1f68:	2301      	movs	r3, #1
    1f6a:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    1f6c:	b128      	cbz	r0, 1f7a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1f6e:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1f70:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    1f72:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    1f76:	7023      	strb	r3, [r4, #0]
	return len;
}
    1f78:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    1f7a:	4b0a      	ldr	r3, [pc, #40]	; (1fa4 <usb_serial_write_buffer_free+0x44>)
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	b913      	cbnz	r3, 1f86 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    1f80:	2000      	movs	r0, #0
    1f82:	7020      	strb	r0, [r4, #0]
}
    1f84:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1f86:	2004      	movs	r0, #4
    1f88:	f7ff f9f6 	bl	1378 <usb_tx_packet_count>
		if (!usb_configuration ||
    1f8c:	2807      	cmp	r0, #7
    1f8e:	d8f7      	bhi.n	1f80 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    1f90:	f7ff fe9e 	bl	1cd0 <usb_malloc>
    1f94:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1f96:	2800      	cmp	r0, #0
    1f98:	d1e9      	bne.n	1f6e <usb_serial_write_buffer_free+0xe>
    1f9a:	e7f1      	b.n	1f80 <usb_serial_write_buffer_free+0x20>
    1f9c:	1fff8e74 	.word	0x1fff8e74
    1fa0:	1fff8e71 	.word	0x1fff8e71
    1fa4:	1fff8e5c 	.word	0x1fff8e5c

00001fa8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1faa:	4b11      	ldr	r3, [pc, #68]	; (1ff0 <usb_serial_flush_output+0x48>)
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	b18b      	cbz	r3, 1fd4 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1fb0:	4e10      	ldr	r6, [pc, #64]	; (1ff4 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    1fb2:	4d11      	ldr	r5, [pc, #68]	; (1ff8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1fb4:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    1fb6:	2701      	movs	r7, #1
    1fb8:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    1fba:	b164      	cbz	r4, 1fd6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1fbc:	4b0f      	ldr	r3, [pc, #60]	; (1ffc <usb_serial_flush_output+0x54>)
    1fbe:	2700      	movs	r7, #0
    1fc0:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    1fc2:	8863      	ldrh	r3, [r4, #2]
    1fc4:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1fc6:	4621      	mov	r1, r4
    1fc8:	2004      	movs	r0, #4
    1fca:	f7ff fa2b 	bl	1424 <usb_tx>
		tx_packet = NULL;
    1fce:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1fd0:	2300      	movs	r3, #0
    1fd2:	702b      	strb	r3, [r5, #0]
}
    1fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    1fd6:	f7ff fe7b 	bl	1cd0 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    1fda:	4b08      	ldr	r3, [pc, #32]	; (1ffc <usb_serial_flush_output+0x54>)
		if (tx) {
    1fdc:	4601      	mov	r1, r0
    1fde:	b120      	cbz	r0, 1fea <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1fe0:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    1fe2:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1fe4:	f7ff fa1e 	bl	1424 <usb_tx>
    1fe8:	e7f2      	b.n	1fd0 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    1fea:	701f      	strb	r7, [r3, #0]
    1fec:	e7f0      	b.n	1fd0 <usb_serial_flush_output+0x28>
    1fee:	bf00      	nop
    1ff0:	1fff8e5c 	.word	0x1fff8e5c
    1ff4:	1fff8e74 	.word	0x1fff8e74
    1ff8:	1fff8e71 	.word	0x1fff8e71
    1ffc:	1fff8e88 	.word	0x1fff8e88

00002000 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    2000:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2002:	4b0e      	ldr	r3, [pc, #56]	; (203c <usb_serial_flush_callback+0x3c>)
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	b953      	cbnz	r3, 201e <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    2008:	4c0d      	ldr	r4, [pc, #52]	; (2040 <usb_serial_flush_callback+0x40>)
    200a:	6821      	ldr	r1, [r4, #0]
    200c:	b141      	cbz	r1, 2020 <usb_serial_flush_callback+0x20>
    200e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2012:	884b      	ldrh	r3, [r1, #2]
    2014:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2016:	2004      	movs	r0, #4
    2018:	f7ff fa04 	bl	1424 <usb_tx>
		tx_packet = NULL;
    201c:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    201e:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    2020:	f7ff fe56 	bl	1cd0 <usb_malloc>
		if (tx) {
    2024:	4601      	mov	r1, r0
    2026:	b120      	cbz	r0, 2032 <usb_serial_flush_callback+0x32>
}
    2028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    202c:	2004      	movs	r0, #4
    202e:	f7ff b9f9 	b.w	1424 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    2032:	4b04      	ldr	r3, [pc, #16]	; (2044 <usb_serial_flush_callback+0x44>)
    2034:	2201      	movs	r2, #1
    2036:	701a      	strb	r2, [r3, #0]
}
    2038:	bd38      	pop	{r3, r4, r5, pc}
    203a:	bf00      	nop
    203c:	1fff8e71 	.word	0x1fff8e71
    2040:	1fff8e74 	.word	0x1fff8e74
    2044:	1fff8e88 	.word	0x1fff8e88

00002048 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    204c:	4e32      	ldr	r6, [pc, #200]	; (2118 <yield+0xd0>)
    204e:	7833      	ldrb	r3, [r6, #0]
    2050:	b163      	cbz	r3, 206c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    2052:	4f32      	ldr	r7, [pc, #200]	; (211c <yield+0xd4>)
    2054:	783a      	ldrb	r2, [r7, #0]
    2056:	b94a      	cbnz	r2, 206c <yield+0x24>
	running = 1;
    2058:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    205a:	07d9      	lsls	r1, r3, #31
	running = 1;
    205c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    205e:	d443      	bmi.n	20e8 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    2060:	079a      	lsls	r2, r3, #30
    2062:	d426      	bmi.n	20b2 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    2064:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2066:	075b      	lsls	r3, r3, #29
	running = 0;
    2068:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    206a:	d401      	bmi.n	2070 <yield+0x28>
	
};
    206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    2070:	4b2b      	ldr	r3, [pc, #172]	; (2120 <yield+0xd8>)
    2072:	681a      	ldr	r2, [r3, #0]
    2074:	2a00      	cmp	r2, #0
    2076:	d0f9      	beq.n	206c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2078:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    207c:	2a00      	cmp	r2, #0
    207e:	d1f5      	bne.n	206c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2080:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2084:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2086:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2088:	2800      	cmp	r0, #0
    208a:	d03a      	beq.n	2102 <yield+0xba>
		if (runningFromYield) {
    208c:	4c25      	ldr	r4, [pc, #148]	; (2124 <yield+0xdc>)
    208e:	7821      	ldrb	r1, [r4, #0]
    2090:	2900      	cmp	r1, #0
    2092:	d136      	bne.n	2102 <yield+0xba>
		firstYield = first->_next;
    2094:	6942      	ldr	r2, [r0, #20]
    2096:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    2098:	2301      	movs	r3, #1
    209a:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    209c:	2a00      	cmp	r2, #0
    209e:	d037      	beq.n	2110 <yield+0xc8>
			firstYield->_prev = nullptr;
    20a0:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    20a2:	b905      	cbnz	r5, 20a6 <yield+0x5e>
    20a4:	b662      	cpsie	i
		first->_triggered = false;
    20a6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    20a8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    20aa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    20ac:	4798      	blx	r3
		runningFromYield = false;
    20ae:	7025      	strb	r5, [r4, #0]
    20b0:	e7dc      	b.n	206c <yield+0x24>
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    20b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2128 <yield+0xe0>
    20b6:	f898 2000 	ldrb.w	r2, [r8]
    20ba:	2a00      	cmp	r2, #0
    20bc:	d0d2      	beq.n	2064 <yield+0x1c>
    20be:	2500      	movs	r5, #0
    20c0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 212c <yield+0xe4>
    20c4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    20c6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    20ca:	6823      	ldr	r3, [r4, #0]
    20cc:	4620      	mov	r0, r4
    20ce:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    20d0:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    20d2:	4798      	blx	r3
    20d4:	b108      	cbz	r0, 20da <yield+0x92>
    20d6:	6923      	ldr	r3, [r4, #16]
    20d8:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    20da:	f898 2000 	ldrb.w	r2, [r8]
    20de:	b2eb      	uxtb	r3, r5
    20e0:	429a      	cmp	r2, r3
    20e2:	d8f0      	bhi.n	20c6 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    20e4:	7833      	ldrb	r3, [r6, #0]
    20e6:	e7bd      	b.n	2064 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    20e8:	f7ff fe76 	bl	1dd8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    20ec:	b968      	cbnz	r0, 210a <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    20ee:	4b10      	ldr	r3, [pc, #64]	; (2130 <yield+0xe8>)
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	b90b      	cbnz	r3, 20f8 <yield+0xb0>
    20f4:	7833      	ldrb	r3, [r6, #0]
    20f6:	e7b3      	b.n	2060 <yield+0x18>
    20f8:	7833      	ldrb	r3, [r6, #0]
    20fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    20fe:	7033      	strb	r3, [r6, #0]
    2100:	e7ae      	b.n	2060 <yield+0x18>
		if (doit) __enable_irq();
    2102:	2d00      	cmp	r5, #0
    2104:	d1b2      	bne.n	206c <yield+0x24>
    2106:	b662      	cpsie	i
    2108:	e7b0      	b.n	206c <yield+0x24>
		if (Serial.available()) serialEvent();
    210a:	f000 f8a5 	bl	2258 <serialEvent()>
    210e:	e7ee      	b.n	20ee <yield+0xa6>
			lastYield = nullptr;
    2110:	4b08      	ldr	r3, [pc, #32]	; (2134 <yield+0xec>)
    2112:	601a      	str	r2, [r3, #0]
    2114:	e7c5      	b.n	20a2 <yield+0x5a>
    2116:	bf00      	nop
    2118:	1fff873c 	.word	0x1fff873c
    211c:	1fff8e89 	.word	0x1fff8e89
    2120:	1fff8e8c 	.word	0x1fff8e8c
    2124:	1fff8e98 	.word	0x1fff8e98
    2128:	1fff8eac 	.word	0x1fff8eac
    212c:	1fff8ea0 	.word	0x1fff8ea0
    2130:	00003e70 	.word	0x00003e70
    2134:	1fff8e9c 	.word	0x1fff8e9c

00002138 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2138:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    213a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    213e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2140:	4c0c      	ldr	r4, [pc, #48]	; (2174 <EventResponder::runFromInterrupt()+0x3c>)
    2142:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2144:	b180      	cbz	r0, 2168 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2146:	4e0c      	ldr	r6, [pc, #48]	; (2178 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2148:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    214a:	6943      	ldr	r3, [r0, #20]
    214c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    214e:	b173      	cbz	r3, 216e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2150:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2152:	b902      	cbnz	r2, 2156 <EventResponder::runFromInterrupt()+0x1e>
    2154:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    2156:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2158:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    215a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    215c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2160:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2162:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2164:	2800      	cmp	r0, #0
    2166:	d1f0      	bne.n	214a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2168:	b902      	cbnz	r2, 216c <EventResponder::runFromInterrupt()+0x34>
    216a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    216c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    216e:	6033      	str	r3, [r6, #0]
    2170:	e7ef      	b.n	2152 <EventResponder::runFromInterrupt()+0x1a>
    2172:	bf00      	nop
    2174:	1fff8e94 	.word	0x1fff8e94
    2178:	1fff8e90 	.word	0x1fff8e90

0000217c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    217c:	f7ff bfdc 	b.w	2138 <EventResponder::runFromInterrupt()>

00002180 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    2180:	4a02      	ldr	r2, [pc, #8]	; (218c <systick_isr+0xc>)
    2182:	6813      	ldr	r3, [r2, #0]
    2184:	3301      	adds	r3, #1
    2186:	6013      	str	r3, [r2, #0]
}
    2188:	4770      	bx	lr
    218a:	bf00      	nop
    218c:	1fff8d7c 	.word	0x1fff8d7c

00002190 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2190:	4b2a      	ldr	r3, [pc, #168]	; (223c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2192:	4a2b      	ldr	r2, [pc, #172]	; (2240 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    2194:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2196:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    2198:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    219a:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    219c:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    219e:	4829      	ldr	r0, [pc, #164]	; (2244 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    21a0:	2b08      	cmp	r3, #8
    21a2:	d034      	beq.n	220e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    21a4:	2b0a      	cmp	r3, #10
    21a6:	d020      	beq.n	21ea <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    21a8:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    21aa:	4b27      	ldr	r3, [pc, #156]	; (2248 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    21ac:	bf0c      	ite	eq
    21ae:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    21b0:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    21b2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    21b4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    21b6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    21b8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    21ba:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    21bc:	4b23      	ldr	r3, [pc, #140]	; (224c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    21be:	4921      	ldr	r1, [pc, #132]	; (2244 <analog_init+0xb4>)
	if (analog_reference_internal) {
    21c0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    21c2:	4a21      	ldr	r2, [pc, #132]	; (2248 <analog_init+0xb8>)
	if (analog_reference_internal) {
    21c4:	b1cb      	cbz	r3, 21fa <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    21c6:	2301      	movs	r3, #1
    21c8:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    21ca:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    21cc:	4b20      	ldr	r3, [pc, #128]	; (2250 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    21ce:	491d      	ldr	r1, [pc, #116]	; (2244 <analog_init+0xb4>)
	num = analog_num_average;
    21d0:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    21d2:	4a1d      	ldr	r2, [pc, #116]	; (2248 <analog_init+0xb8>)
	if (num <= 1) {
    21d4:	2b01      	cmp	r3, #1
    21d6:	d913      	bls.n	2200 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    21d8:	2b04      	cmp	r3, #4
    21da:	d81b      	bhi.n	2214 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    21dc:	2384      	movs	r3, #132	; 0x84
    21de:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    21e0:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    21e2:	4b1c      	ldr	r3, [pc, #112]	; (2254 <analog_init+0xc4>)
    21e4:	2201      	movs	r2, #1
    21e6:	701a      	strb	r2, [r3, #0]
}
    21e8:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21ea:	4b17      	ldr	r3, [pc, #92]	; (2248 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21ec:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21ee:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21f0:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21f2:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21f4:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21f6:	60da      	str	r2, [r3, #12]
    21f8:	e7e0      	b.n	21bc <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    21fa:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    21fc:	6213      	str	r3, [r2, #32]
    21fe:	e7e5      	b.n	21cc <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2200:	2380      	movs	r3, #128	; 0x80
    2202:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2204:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    2206:	4b13      	ldr	r3, [pc, #76]	; (2254 <analog_init+0xc4>)
    2208:	2201      	movs	r2, #1
    220a:	701a      	strb	r2, [r3, #0]
}
    220c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    220e:	4b0e      	ldr	r3, [pc, #56]	; (2248 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2210:	2101      	movs	r1, #1
    2212:	e7ec      	b.n	21ee <analog_init+0x5e>
	} else if (num <= 8) {
    2214:	2b08      	cmp	r3, #8
    2216:	d806      	bhi.n	2226 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2218:	2385      	movs	r3, #133	; 0x85
    221a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    221c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    221e:	4b0d      	ldr	r3, [pc, #52]	; (2254 <analog_init+0xc4>)
    2220:	2201      	movs	r2, #1
    2222:	701a      	strb	r2, [r3, #0]
}
    2224:	4770      	bx	lr
	} else if (num <= 16) {
    2226:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2228:	bf94      	ite	ls
    222a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    222c:	2387      	movhi	r3, #135	; 0x87
    222e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2230:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    2232:	4b08      	ldr	r3, [pc, #32]	; (2254 <analog_init+0xc4>)
    2234:	2201      	movs	r2, #1
    2236:	701a      	strb	r2, [r3, #0]
}
    2238:	4770      	bx	lr
    223a:	bf00      	nop
    223c:	40074000 	.word	0x40074000
    2240:	1fff873d 	.word	0x1fff873d
    2244:	4003b000 	.word	0x4003b000
    2248:	400bb000 	.word	0x400bb000
    224c:	1fff8ead 	.word	0x1fff8ead
    2250:	1fff873e 	.word	0x1fff873e
    2254:	1fff8eae 	.word	0x1fff8eae

00002258 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    2258:	4770      	bx	lr
    225a:	bf00      	nop

0000225c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    225c:	b510      	push	{r4, lr}
    225e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    2260:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    2262:	4a17      	ldr	r2, [pc, #92]	; (22c0 <usb_init_serialnumber+0x64>)
    2264:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    2266:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    2268:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    226a:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    226c:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    226e:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    2270:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    2272:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    2274:	7813      	ldrb	r3, [r2, #0]
    2276:	061b      	lsls	r3, r3, #24
    2278:	d5fc      	bpl.n	2274 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    227a:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    227c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    227e:	4b11      	ldr	r3, [pc, #68]	; (22c4 <usb_init_serialnumber+0x68>)
    2280:	4c11      	ldr	r4, [pc, #68]	; (22c8 <usb_init_serialnumber+0x6c>)
    2282:	4298      	cmp	r0, r3
    2284:	bf38      	it	cc
    2286:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    228a:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    228c:	bf38      	it	cc
    228e:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    2290:	220a      	movs	r2, #10
    2292:	f7fe fdf7 	bl	e84 <ultoa>
	for (i=0; i<10; i++) {
    2296:	a901      	add	r1, sp, #4
    2298:	4620      	mov	r0, r4
    229a:	2300      	movs	r3, #0
		char c = buf[i];
    229c:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    22a0:	3301      	adds	r3, #1
		if (!c) break;
    22a2:	b13a      	cbz	r2, 22b4 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    22a4:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    22a6:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    22aa:	d1f7      	bne.n	229c <usb_init_serialnumber+0x40>
    22ac:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    22ae:	7023      	strb	r3, [r4, #0]
}
    22b0:	b004      	add	sp, #16
    22b2:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    22b4:	005b      	lsls	r3, r3, #1
    22b6:	b2db      	uxtb	r3, r3
    22b8:	7023      	strb	r3, [r4, #0]
}
    22ba:	b004      	add	sp, #16
    22bc:	bd10      	pop	{r4, pc}
    22be:	bf00      	nop
    22c0:	40020000 	.word	0x40020000
    22c4:	00989680 	.word	0x00989680
    22c8:	1fff87cc 	.word	0x1fff87cc

000022cc <__aeabi_atexit>:
    22cc:	4603      	mov	r3, r0
    22ce:	4608      	mov	r0, r1
    22d0:	4619      	mov	r1, r3
    22d2:	f000 bfb9 	b.w	3248 <__cxa_atexit>
    22d6:	bf00      	nop

000022d8 <__aeabi_frsub>:
    22d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    22dc:	e002      	b.n	22e4 <__addsf3>
    22de:	bf00      	nop

000022e0 <__aeabi_fsub>:
    22e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000022e4 <__addsf3>:
    22e4:	0042      	lsls	r2, r0, #1
    22e6:	bf1f      	itttt	ne
    22e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    22ec:	ea92 0f03 	teqne	r2, r3
    22f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    22f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    22f8:	d06a      	beq.n	23d0 <__addsf3+0xec>
    22fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
    22fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    2302:	bfc1      	itttt	gt
    2304:	18d2      	addgt	r2, r2, r3
    2306:	4041      	eorgt	r1, r0
    2308:	4048      	eorgt	r0, r1
    230a:	4041      	eorgt	r1, r0
    230c:	bfb8      	it	lt
    230e:	425b      	neglt	r3, r3
    2310:	2b19      	cmp	r3, #25
    2312:	bf88      	it	hi
    2314:	4770      	bxhi	lr
    2316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    231a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    231e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2322:	bf18      	it	ne
    2324:	4240      	negne	r0, r0
    2326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    232a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    232e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2332:	bf18      	it	ne
    2334:	4249      	negne	r1, r1
    2336:	ea92 0f03 	teq	r2, r3
    233a:	d03f      	beq.n	23bc <__addsf3+0xd8>
    233c:	f1a2 0201 	sub.w	r2, r2, #1
    2340:	fa41 fc03 	asr.w	ip, r1, r3
    2344:	eb10 000c 	adds.w	r0, r0, ip
    2348:	f1c3 0320 	rsb	r3, r3, #32
    234c:	fa01 f103 	lsl.w	r1, r1, r3
    2350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    2354:	d502      	bpl.n	235c <__addsf3+0x78>
    2356:	4249      	negs	r1, r1
    2358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    235c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2360:	d313      	bcc.n	238a <__addsf3+0xa6>
    2362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    2366:	d306      	bcc.n	2376 <__addsf3+0x92>
    2368:	0840      	lsrs	r0, r0, #1
    236a:	ea4f 0131 	mov.w	r1, r1, rrx
    236e:	f102 0201 	add.w	r2, r2, #1
    2372:	2afe      	cmp	r2, #254	; 0xfe
    2374:	d251      	bcs.n	241a <__addsf3+0x136>
    2376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    237a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    237e:	bf08      	it	eq
    2380:	f020 0001 	biceq.w	r0, r0, #1
    2384:	ea40 0003 	orr.w	r0, r0, r3
    2388:	4770      	bx	lr
    238a:	0049      	lsls	r1, r1, #1
    238c:	eb40 0000 	adc.w	r0, r0, r0
    2390:	3a01      	subs	r2, #1
    2392:	bf28      	it	cs
    2394:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    2398:	d2ed      	bcs.n	2376 <__addsf3+0x92>
    239a:	fab0 fc80 	clz	ip, r0
    239e:	f1ac 0c08 	sub.w	ip, ip, #8
    23a2:	ebb2 020c 	subs.w	r2, r2, ip
    23a6:	fa00 f00c 	lsl.w	r0, r0, ip
    23aa:	bfaa      	itet	ge
    23ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    23b0:	4252      	neglt	r2, r2
    23b2:	4318      	orrge	r0, r3
    23b4:	bfbc      	itt	lt
    23b6:	40d0      	lsrlt	r0, r2
    23b8:	4318      	orrlt	r0, r3
    23ba:	4770      	bx	lr
    23bc:	f092 0f00 	teq	r2, #0
    23c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    23c4:	bf06      	itte	eq
    23c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    23ca:	3201      	addeq	r2, #1
    23cc:	3b01      	subne	r3, #1
    23ce:	e7b5      	b.n	233c <__addsf3+0x58>
    23d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    23d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    23d8:	bf18      	it	ne
    23da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    23de:	d021      	beq.n	2424 <__addsf3+0x140>
    23e0:	ea92 0f03 	teq	r2, r3
    23e4:	d004      	beq.n	23f0 <__addsf3+0x10c>
    23e6:	f092 0f00 	teq	r2, #0
    23ea:	bf08      	it	eq
    23ec:	4608      	moveq	r0, r1
    23ee:	4770      	bx	lr
    23f0:	ea90 0f01 	teq	r0, r1
    23f4:	bf1c      	itt	ne
    23f6:	2000      	movne	r0, #0
    23f8:	4770      	bxne	lr
    23fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    23fe:	d104      	bne.n	240a <__addsf3+0x126>
    2400:	0040      	lsls	r0, r0, #1
    2402:	bf28      	it	cs
    2404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    2408:	4770      	bx	lr
    240a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    240e:	bf3c      	itt	cc
    2410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    2414:	4770      	bxcc	lr
    2416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    241a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    241e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2422:	4770      	bx	lr
    2424:	ea7f 6222 	mvns.w	r2, r2, asr #24
    2428:	bf16      	itet	ne
    242a:	4608      	movne	r0, r1
    242c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    2430:	4601      	movne	r1, r0
    2432:	0242      	lsls	r2, r0, #9
    2434:	bf06      	itte	eq
    2436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    243a:	ea90 0f01 	teqeq	r0, r1
    243e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    2442:	4770      	bx	lr

00002444 <__aeabi_ui2f>:
    2444:	f04f 0300 	mov.w	r3, #0
    2448:	e004      	b.n	2454 <__aeabi_i2f+0x8>
    244a:	bf00      	nop

0000244c <__aeabi_i2f>:
    244c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    2450:	bf48      	it	mi
    2452:	4240      	negmi	r0, r0
    2454:	ea5f 0c00 	movs.w	ip, r0
    2458:	bf08      	it	eq
    245a:	4770      	bxeq	lr
    245c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    2460:	4601      	mov	r1, r0
    2462:	f04f 0000 	mov.w	r0, #0
    2466:	e01c      	b.n	24a2 <__aeabi_l2f+0x2a>

00002468 <__aeabi_ul2f>:
    2468:	ea50 0201 	orrs.w	r2, r0, r1
    246c:	bf08      	it	eq
    246e:	4770      	bxeq	lr
    2470:	f04f 0300 	mov.w	r3, #0
    2474:	e00a      	b.n	248c <__aeabi_l2f+0x14>
    2476:	bf00      	nop

00002478 <__aeabi_l2f>:
    2478:	ea50 0201 	orrs.w	r2, r0, r1
    247c:	bf08      	it	eq
    247e:	4770      	bxeq	lr
    2480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    2484:	d502      	bpl.n	248c <__aeabi_l2f+0x14>
    2486:	4240      	negs	r0, r0
    2488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    248c:	ea5f 0c01 	movs.w	ip, r1
    2490:	bf02      	ittt	eq
    2492:	4684      	moveq	ip, r0
    2494:	4601      	moveq	r1, r0
    2496:	2000      	moveq	r0, #0
    2498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    249c:	bf08      	it	eq
    249e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    24a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    24a6:	fabc f28c 	clz	r2, ip
    24aa:	3a08      	subs	r2, #8
    24ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    24b0:	db10      	blt.n	24d4 <__aeabi_l2f+0x5c>
    24b2:	fa01 fc02 	lsl.w	ip, r1, r2
    24b6:	4463      	add	r3, ip
    24b8:	fa00 fc02 	lsl.w	ip, r0, r2
    24bc:	f1c2 0220 	rsb	r2, r2, #32
    24c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    24c4:	fa20 f202 	lsr.w	r2, r0, r2
    24c8:	eb43 0002 	adc.w	r0, r3, r2
    24cc:	bf08      	it	eq
    24ce:	f020 0001 	biceq.w	r0, r0, #1
    24d2:	4770      	bx	lr
    24d4:	f102 0220 	add.w	r2, r2, #32
    24d8:	fa01 fc02 	lsl.w	ip, r1, r2
    24dc:	f1c2 0220 	rsb	r2, r2, #32
    24e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    24e4:	fa21 f202 	lsr.w	r2, r1, r2
    24e8:	eb43 0002 	adc.w	r0, r3, r2
    24ec:	bf08      	it	eq
    24ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    24f2:	4770      	bx	lr

000024f4 <__aeabi_fmul>:
    24f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    24f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    24fc:	bf1e      	ittt	ne
    24fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    2502:	ea92 0f0c 	teqne	r2, ip
    2506:	ea93 0f0c 	teqne	r3, ip
    250a:	d06f      	beq.n	25ec <__aeabi_fmul+0xf8>
    250c:	441a      	add	r2, r3
    250e:	ea80 0c01 	eor.w	ip, r0, r1
    2512:	0240      	lsls	r0, r0, #9
    2514:	bf18      	it	ne
    2516:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    251a:	d01e      	beq.n	255a <__aeabi_fmul+0x66>
    251c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2520:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    2524:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    2528:	fba0 3101 	umull	r3, r1, r0, r1
    252c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2530:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2534:	bf3e      	ittt	cc
    2536:	0049      	lslcc	r1, r1, #1
    2538:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    253c:	005b      	lslcc	r3, r3, #1
    253e:	ea40 0001 	orr.w	r0, r0, r1
    2542:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    2546:	2afd      	cmp	r2, #253	; 0xfd
    2548:	d81d      	bhi.n	2586 <__aeabi_fmul+0x92>
    254a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    254e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    2552:	bf08      	it	eq
    2554:	f020 0001 	biceq.w	r0, r0, #1
    2558:	4770      	bx	lr
    255a:	f090 0f00 	teq	r0, #0
    255e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    2562:	bf08      	it	eq
    2564:	0249      	lsleq	r1, r1, #9
    2566:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    256a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    256e:	3a7f      	subs	r2, #127	; 0x7f
    2570:	bfc2      	ittt	gt
    2572:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    2576:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    257a:	4770      	bxgt	lr
    257c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2580:	f04f 0300 	mov.w	r3, #0
    2584:	3a01      	subs	r2, #1
    2586:	dc5d      	bgt.n	2644 <__aeabi_fmul+0x150>
    2588:	f112 0f19 	cmn.w	r2, #25
    258c:	bfdc      	itt	le
    258e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    2592:	4770      	bxle	lr
    2594:	f1c2 0200 	rsb	r2, r2, #0
    2598:	0041      	lsls	r1, r0, #1
    259a:	fa21 f102 	lsr.w	r1, r1, r2
    259e:	f1c2 0220 	rsb	r2, r2, #32
    25a2:	fa00 fc02 	lsl.w	ip, r0, r2
    25a6:	ea5f 0031 	movs.w	r0, r1, rrx
    25aa:	f140 0000 	adc.w	r0, r0, #0
    25ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    25b2:	bf08      	it	eq
    25b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    25b8:	4770      	bx	lr
    25ba:	f092 0f00 	teq	r2, #0
    25be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    25c2:	bf02      	ittt	eq
    25c4:	0040      	lsleq	r0, r0, #1
    25c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    25ca:	3a01      	subeq	r2, #1
    25cc:	d0f9      	beq.n	25c2 <__aeabi_fmul+0xce>
    25ce:	ea40 000c 	orr.w	r0, r0, ip
    25d2:	f093 0f00 	teq	r3, #0
    25d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    25da:	bf02      	ittt	eq
    25dc:	0049      	lsleq	r1, r1, #1
    25de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    25e2:	3b01      	subeq	r3, #1
    25e4:	d0f9      	beq.n	25da <__aeabi_fmul+0xe6>
    25e6:	ea41 010c 	orr.w	r1, r1, ip
    25ea:	e78f      	b.n	250c <__aeabi_fmul+0x18>
    25ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    25f0:	ea92 0f0c 	teq	r2, ip
    25f4:	bf18      	it	ne
    25f6:	ea93 0f0c 	teqne	r3, ip
    25fa:	d00a      	beq.n	2612 <__aeabi_fmul+0x11e>
    25fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2600:	bf18      	it	ne
    2602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    2606:	d1d8      	bne.n	25ba <__aeabi_fmul+0xc6>
    2608:	ea80 0001 	eor.w	r0, r0, r1
    260c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2610:	4770      	bx	lr
    2612:	f090 0f00 	teq	r0, #0
    2616:	bf17      	itett	ne
    2618:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    261c:	4608      	moveq	r0, r1
    261e:	f091 0f00 	teqne	r1, #0
    2622:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    2626:	d014      	beq.n	2652 <__aeabi_fmul+0x15e>
    2628:	ea92 0f0c 	teq	r2, ip
    262c:	d101      	bne.n	2632 <__aeabi_fmul+0x13e>
    262e:	0242      	lsls	r2, r0, #9
    2630:	d10f      	bne.n	2652 <__aeabi_fmul+0x15e>
    2632:	ea93 0f0c 	teq	r3, ip
    2636:	d103      	bne.n	2640 <__aeabi_fmul+0x14c>
    2638:	024b      	lsls	r3, r1, #9
    263a:	bf18      	it	ne
    263c:	4608      	movne	r0, r1
    263e:	d108      	bne.n	2652 <__aeabi_fmul+0x15e>
    2640:	ea80 0001 	eor.w	r0, r0, r1
    2644:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2648:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    264c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2650:	4770      	bx	lr
    2652:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2656:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    265a:	4770      	bx	lr

0000265c <__aeabi_fdiv>:
    265c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2660:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    2664:	bf1e      	ittt	ne
    2666:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    266a:	ea92 0f0c 	teqne	r2, ip
    266e:	ea93 0f0c 	teqne	r3, ip
    2672:	d069      	beq.n	2748 <__aeabi_fdiv+0xec>
    2674:	eba2 0203 	sub.w	r2, r2, r3
    2678:	ea80 0c01 	eor.w	ip, r0, r1
    267c:	0249      	lsls	r1, r1, #9
    267e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    2682:	d037      	beq.n	26f4 <__aeabi_fdiv+0x98>
    2684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2688:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    268c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    2690:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2694:	428b      	cmp	r3, r1
    2696:	bf38      	it	cc
    2698:	005b      	lslcc	r3, r3, #1
    269a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    269e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    26a2:	428b      	cmp	r3, r1
    26a4:	bf24      	itt	cs
    26a6:	1a5b      	subcs	r3, r3, r1
    26a8:	ea40 000c 	orrcs.w	r0, r0, ip
    26ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    26b0:	bf24      	itt	cs
    26b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    26b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    26ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    26be:	bf24      	itt	cs
    26c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    26c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    26c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    26cc:	bf24      	itt	cs
    26ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    26d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    26d6:	011b      	lsls	r3, r3, #4
    26d8:	bf18      	it	ne
    26da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    26de:	d1e0      	bne.n	26a2 <__aeabi_fdiv+0x46>
    26e0:	2afd      	cmp	r2, #253	; 0xfd
    26e2:	f63f af50 	bhi.w	2586 <__aeabi_fmul+0x92>
    26e6:	428b      	cmp	r3, r1
    26e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    26ec:	bf08      	it	eq
    26ee:	f020 0001 	biceq.w	r0, r0, #1
    26f2:	4770      	bx	lr
    26f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    26f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    26fc:	327f      	adds	r2, #127	; 0x7f
    26fe:	bfc2      	ittt	gt
    2700:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    2704:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    2708:	4770      	bxgt	lr
    270a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    270e:	f04f 0300 	mov.w	r3, #0
    2712:	3a01      	subs	r2, #1
    2714:	e737      	b.n	2586 <__aeabi_fmul+0x92>
    2716:	f092 0f00 	teq	r2, #0
    271a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    271e:	bf02      	ittt	eq
    2720:	0040      	lsleq	r0, r0, #1
    2722:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    2726:	3a01      	subeq	r2, #1
    2728:	d0f9      	beq.n	271e <__aeabi_fdiv+0xc2>
    272a:	ea40 000c 	orr.w	r0, r0, ip
    272e:	f093 0f00 	teq	r3, #0
    2732:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2736:	bf02      	ittt	eq
    2738:	0049      	lsleq	r1, r1, #1
    273a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    273e:	3b01      	subeq	r3, #1
    2740:	d0f9      	beq.n	2736 <__aeabi_fdiv+0xda>
    2742:	ea41 010c 	orr.w	r1, r1, ip
    2746:	e795      	b.n	2674 <__aeabi_fdiv+0x18>
    2748:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    274c:	ea92 0f0c 	teq	r2, ip
    2750:	d108      	bne.n	2764 <__aeabi_fdiv+0x108>
    2752:	0242      	lsls	r2, r0, #9
    2754:	f47f af7d 	bne.w	2652 <__aeabi_fmul+0x15e>
    2758:	ea93 0f0c 	teq	r3, ip
    275c:	f47f af70 	bne.w	2640 <__aeabi_fmul+0x14c>
    2760:	4608      	mov	r0, r1
    2762:	e776      	b.n	2652 <__aeabi_fmul+0x15e>
    2764:	ea93 0f0c 	teq	r3, ip
    2768:	d104      	bne.n	2774 <__aeabi_fdiv+0x118>
    276a:	024b      	lsls	r3, r1, #9
    276c:	f43f af4c 	beq.w	2608 <__aeabi_fmul+0x114>
    2770:	4608      	mov	r0, r1
    2772:	e76e      	b.n	2652 <__aeabi_fmul+0x15e>
    2774:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2778:	bf18      	it	ne
    277a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    277e:	d1ca      	bne.n	2716 <__aeabi_fdiv+0xba>
    2780:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    2784:	f47f af5c 	bne.w	2640 <__aeabi_fmul+0x14c>
    2788:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    278c:	f47f af3c 	bne.w	2608 <__aeabi_fmul+0x114>
    2790:	e75f      	b.n	2652 <__aeabi_fmul+0x15e>
    2792:	bf00      	nop

00002794 <__gesf2>:
    2794:	f04f 3cff 	mov.w	ip, #4294967295
    2798:	e006      	b.n	27a8 <__cmpsf2+0x4>
    279a:	bf00      	nop

0000279c <__lesf2>:
    279c:	f04f 0c01 	mov.w	ip, #1
    27a0:	e002      	b.n	27a8 <__cmpsf2+0x4>
    27a2:	bf00      	nop

000027a4 <__cmpsf2>:
    27a4:	f04f 0c01 	mov.w	ip, #1
    27a8:	f84d cd04 	str.w	ip, [sp, #-4]!
    27ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
    27b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    27b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    27b8:	bf18      	it	ne
    27ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    27be:	d011      	beq.n	27e4 <__cmpsf2+0x40>
    27c0:	b001      	add	sp, #4
    27c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    27c6:	bf18      	it	ne
    27c8:	ea90 0f01 	teqne	r0, r1
    27cc:	bf58      	it	pl
    27ce:	ebb2 0003 	subspl.w	r0, r2, r3
    27d2:	bf88      	it	hi
    27d4:	17c8      	asrhi	r0, r1, #31
    27d6:	bf38      	it	cc
    27d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    27dc:	bf18      	it	ne
    27de:	f040 0001 	orrne.w	r0, r0, #1
    27e2:	4770      	bx	lr
    27e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    27e8:	d102      	bne.n	27f0 <__cmpsf2+0x4c>
    27ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    27ee:	d105      	bne.n	27fc <__cmpsf2+0x58>
    27f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    27f4:	d1e4      	bne.n	27c0 <__cmpsf2+0x1c>
    27f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    27fa:	d0e1      	beq.n	27c0 <__cmpsf2+0x1c>
    27fc:	f85d 0b04 	ldr.w	r0, [sp], #4
    2800:	4770      	bx	lr
    2802:	bf00      	nop

00002804 <__aeabi_cfrcmple>:
    2804:	4684      	mov	ip, r0
    2806:	4608      	mov	r0, r1
    2808:	4661      	mov	r1, ip
    280a:	e7ff      	b.n	280c <__aeabi_cfcmpeq>

0000280c <__aeabi_cfcmpeq>:
    280c:	b50f      	push	{r0, r1, r2, r3, lr}
    280e:	f7ff ffc9 	bl	27a4 <__cmpsf2>
    2812:	2800      	cmp	r0, #0
    2814:	bf48      	it	mi
    2816:	f110 0f00 	cmnmi.w	r0, #0
    281a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000281c <__aeabi_fcmpeq>:
    281c:	f84d ed08 	str.w	lr, [sp, #-8]!
    2820:	f7ff fff4 	bl	280c <__aeabi_cfcmpeq>
    2824:	bf0c      	ite	eq
    2826:	2001      	moveq	r0, #1
    2828:	2000      	movne	r0, #0
    282a:	f85d fb08 	ldr.w	pc, [sp], #8
    282e:	bf00      	nop

00002830 <__aeabi_fcmplt>:
    2830:	f84d ed08 	str.w	lr, [sp, #-8]!
    2834:	f7ff ffea 	bl	280c <__aeabi_cfcmpeq>
    2838:	bf34      	ite	cc
    283a:	2001      	movcc	r0, #1
    283c:	2000      	movcs	r0, #0
    283e:	f85d fb08 	ldr.w	pc, [sp], #8
    2842:	bf00      	nop

00002844 <__aeabi_fcmple>:
    2844:	f84d ed08 	str.w	lr, [sp, #-8]!
    2848:	f7ff ffe0 	bl	280c <__aeabi_cfcmpeq>
    284c:	bf94      	ite	ls
    284e:	2001      	movls	r0, #1
    2850:	2000      	movhi	r0, #0
    2852:	f85d fb08 	ldr.w	pc, [sp], #8
    2856:	bf00      	nop

00002858 <__aeabi_fcmpge>:
    2858:	f84d ed08 	str.w	lr, [sp, #-8]!
    285c:	f7ff ffd2 	bl	2804 <__aeabi_cfrcmple>
    2860:	bf94      	ite	ls
    2862:	2001      	movls	r0, #1
    2864:	2000      	movhi	r0, #0
    2866:	f85d fb08 	ldr.w	pc, [sp], #8
    286a:	bf00      	nop

0000286c <__aeabi_fcmpgt>:
    286c:	f84d ed08 	str.w	lr, [sp, #-8]!
    2870:	f7ff ffc8 	bl	2804 <__aeabi_cfrcmple>
    2874:	bf34      	ite	cc
    2876:	2001      	movcc	r0, #1
    2878:	2000      	movcs	r0, #0
    287a:	f85d fb08 	ldr.w	pc, [sp], #8
    287e:	bf00      	nop

00002880 <__aeabi_f2uiz>:
    2880:	0042      	lsls	r2, r0, #1
    2882:	d20e      	bcs.n	28a2 <__aeabi_f2uiz+0x22>
    2884:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    2888:	d30b      	bcc.n	28a2 <__aeabi_f2uiz+0x22>
    288a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    288e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    2892:	d409      	bmi.n	28a8 <__aeabi_f2uiz+0x28>
    2894:	ea4f 2300 	mov.w	r3, r0, lsl #8
    2898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    289c:	fa23 f002 	lsr.w	r0, r3, r2
    28a0:	4770      	bx	lr
    28a2:	f04f 0000 	mov.w	r0, #0
    28a6:	4770      	bx	lr
    28a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    28ac:	d101      	bne.n	28b2 <__aeabi_f2uiz+0x32>
    28ae:	0242      	lsls	r2, r0, #9
    28b0:	d102      	bne.n	28b8 <__aeabi_f2uiz+0x38>
    28b2:	f04f 30ff 	mov.w	r0, #4294967295
    28b6:	4770      	bx	lr
    28b8:	f04f 0000 	mov.w	r0, #0
    28bc:	4770      	bx	lr
    28be:	bf00      	nop

000028c0 <malloc>:
    28c0:	4b02      	ldr	r3, [pc, #8]	; (28cc <malloc+0xc>)
    28c2:	4601      	mov	r1, r0
    28c4:	6818      	ldr	r0, [r3, #0]
    28c6:	f000 b80b 	b.w	28e0 <_malloc_r>
    28ca:	bf00      	nop
    28cc:	1fff8d18 	.word	0x1fff8d18

000028d0 <free>:
    28d0:	4b02      	ldr	r3, [pc, #8]	; (28dc <free+0xc>)
    28d2:	4601      	mov	r1, r0
    28d4:	6818      	ldr	r0, [r3, #0]
    28d6:	f001 b8e5 	b.w	3aa4 <_free_r>
    28da:	bf00      	nop
    28dc:	1fff8d18 	.word	0x1fff8d18

000028e0 <_malloc_r>:
    28e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e4:	f101 060b 	add.w	r6, r1, #11
    28e8:	2e16      	cmp	r6, #22
    28ea:	b083      	sub	sp, #12
    28ec:	4604      	mov	r4, r0
    28ee:	d824      	bhi.n	293a <_malloc_r+0x5a>
    28f0:	2910      	cmp	r1, #16
    28f2:	f200 80ba 	bhi.w	2a6a <_malloc_r+0x18a>
    28f6:	f000 faa3 	bl	2e40 <__malloc_lock>
    28fa:	2610      	movs	r6, #16
    28fc:	2218      	movs	r2, #24
    28fe:	2002      	movs	r0, #2
    2900:	4fb5      	ldr	r7, [pc, #724]	; (2bd8 <_malloc_r+0x2f8>)
    2902:	443a      	add	r2, r7
    2904:	f1a2 0108 	sub.w	r1, r2, #8
    2908:	6853      	ldr	r3, [r2, #4]
    290a:	428b      	cmp	r3, r1
    290c:	f000 80ba 	beq.w	2a84 <_malloc_r+0x1a4>
    2910:	685a      	ldr	r2, [r3, #4]
    2912:	68d9      	ldr	r1, [r3, #12]
    2914:	f022 0203 	bic.w	r2, r2, #3
    2918:	441a      	add	r2, r3
    291a:	689d      	ldr	r5, [r3, #8]
    291c:	60e9      	str	r1, [r5, #12]
    291e:	608d      	str	r5, [r1, #8]
    2920:	6851      	ldr	r1, [r2, #4]
    2922:	f041 0101 	orr.w	r1, r1, #1
    2926:	4620      	mov	r0, r4
    2928:	6051      	str	r1, [r2, #4]
    292a:	f103 0508 	add.w	r5, r3, #8
    292e:	f000 fa8d 	bl	2e4c <__malloc_unlock>
    2932:	4628      	mov	r0, r5
    2934:	b003      	add	sp, #12
    2936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    293a:	f036 0607 	bics.w	r6, r6, #7
    293e:	f100 8094 	bmi.w	2a6a <_malloc_r+0x18a>
    2942:	42b1      	cmp	r1, r6
    2944:	f200 8091 	bhi.w	2a6a <_malloc_r+0x18a>
    2948:	f000 fa7a 	bl	2e40 <__malloc_lock>
    294c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2950:	f0c0 819a 	bcc.w	2c88 <_malloc_r+0x3a8>
    2954:	0a73      	lsrs	r3, r6, #9
    2956:	f000 808f 	beq.w	2a78 <_malloc_r+0x198>
    295a:	2b04      	cmp	r3, #4
    295c:	f200 816f 	bhi.w	2c3e <_malloc_r+0x35e>
    2960:	09b3      	lsrs	r3, r6, #6
    2962:	f103 0039 	add.w	r0, r3, #57	; 0x39
    2966:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    296a:	00c3      	lsls	r3, r0, #3
    296c:	4f9a      	ldr	r7, [pc, #616]	; (2bd8 <_malloc_r+0x2f8>)
    296e:	443b      	add	r3, r7
    2970:	f1a3 0508 	sub.w	r5, r3, #8
    2974:	685b      	ldr	r3, [r3, #4]
    2976:	429d      	cmp	r5, r3
    2978:	d106      	bne.n	2988 <_malloc_r+0xa8>
    297a:	e00c      	b.n	2996 <_malloc_r+0xb6>
    297c:	2900      	cmp	r1, #0
    297e:	f280 8127 	bge.w	2bd0 <_malloc_r+0x2f0>
    2982:	68db      	ldr	r3, [r3, #12]
    2984:	429d      	cmp	r5, r3
    2986:	d006      	beq.n	2996 <_malloc_r+0xb6>
    2988:	685a      	ldr	r2, [r3, #4]
    298a:	f022 0203 	bic.w	r2, r2, #3
    298e:	1b91      	subs	r1, r2, r6
    2990:	290f      	cmp	r1, #15
    2992:	ddf3      	ble.n	297c <_malloc_r+0x9c>
    2994:	4660      	mov	r0, ip
    2996:	693d      	ldr	r5, [r7, #16]
    2998:	f8df c240 	ldr.w	ip, [pc, #576]	; 2bdc <_malloc_r+0x2fc>
    299c:	4565      	cmp	r5, ip
    299e:	d07c      	beq.n	2a9a <_malloc_r+0x1ba>
    29a0:	686a      	ldr	r2, [r5, #4]
    29a2:	f022 0203 	bic.w	r2, r2, #3
    29a6:	1b93      	subs	r3, r2, r6
    29a8:	2b0f      	cmp	r3, #15
    29aa:	f300 817b 	bgt.w	2ca4 <_malloc_r+0x3c4>
    29ae:	2b00      	cmp	r3, #0
    29b0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    29b4:	f280 816c 	bge.w	2c90 <_malloc_r+0x3b0>
    29b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    29bc:	f080 811a 	bcs.w	2bf4 <_malloc_r+0x314>
    29c0:	08d3      	lsrs	r3, r2, #3
    29c2:	6879      	ldr	r1, [r7, #4]
    29c4:	3301      	adds	r3, #1
    29c6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    29ca:	2201      	movs	r2, #1
    29cc:	fa02 f20e 	lsl.w	r2, r2, lr
    29d0:	430a      	orrs	r2, r1
    29d2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    29d6:	f8c5 e008 	str.w	lr, [r5, #8]
    29da:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    29de:	3908      	subs	r1, #8
    29e0:	60e9      	str	r1, [r5, #12]
    29e2:	607a      	str	r2, [r7, #4]
    29e4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    29e8:	f8ce 500c 	str.w	r5, [lr, #12]
    29ec:	1083      	asrs	r3, r0, #2
    29ee:	2101      	movs	r1, #1
    29f0:	4099      	lsls	r1, r3
    29f2:	4291      	cmp	r1, r2
    29f4:	d857      	bhi.n	2aa6 <_malloc_r+0x1c6>
    29f6:	4211      	tst	r1, r2
    29f8:	d106      	bne.n	2a08 <_malloc_r+0x128>
    29fa:	f020 0003 	bic.w	r0, r0, #3
    29fe:	0049      	lsls	r1, r1, #1
    2a00:	4211      	tst	r1, r2
    2a02:	f100 0004 	add.w	r0, r0, #4
    2a06:	d0fa      	beq.n	29fe <_malloc_r+0x11e>
    2a08:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2a0c:	464d      	mov	r5, r9
    2a0e:	4686      	mov	lr, r0
    2a10:	f8d5 800c 	ldr.w	r8, [r5, #12]
    2a14:	4545      	cmp	r5, r8
    2a16:	d108      	bne.n	2a2a <_malloc_r+0x14a>
    2a18:	e11d      	b.n	2c56 <_malloc_r+0x376>
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	f280 8124 	bge.w	2c68 <_malloc_r+0x388>
    2a20:	f8d8 800c 	ldr.w	r8, [r8, #12]
    2a24:	4545      	cmp	r5, r8
    2a26:	f000 8116 	beq.w	2c56 <_malloc_r+0x376>
    2a2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2a2e:	f022 0203 	bic.w	r2, r2, #3
    2a32:	1b93      	subs	r3, r2, r6
    2a34:	2b0f      	cmp	r3, #15
    2a36:	ddf0      	ble.n	2a1a <_malloc_r+0x13a>
    2a38:	4620      	mov	r0, r4
    2a3a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    2a3e:	eb08 0106 	add.w	r1, r8, r6
    2a42:	f046 0601 	orr.w	r6, r6, #1
    2a46:	f8c8 6004 	str.w	r6, [r8, #4]
    2a4a:	60ec      	str	r4, [r5, #12]
    2a4c:	60a5      	str	r5, [r4, #8]
    2a4e:	f043 0401 	orr.w	r4, r3, #1
    2a52:	e9c7 1104 	strd	r1, r1, [r7, #16]
    2a56:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2a5a:	604c      	str	r4, [r1, #4]
    2a5c:	f848 3002 	str.w	r3, [r8, r2]
    2a60:	f000 f9f4 	bl	2e4c <__malloc_unlock>
    2a64:	f108 0508 	add.w	r5, r8, #8
    2a68:	e002      	b.n	2a70 <_malloc_r+0x190>
    2a6a:	230c      	movs	r3, #12
    2a6c:	6023      	str	r3, [r4, #0]
    2a6e:	2500      	movs	r5, #0
    2a70:	4628      	mov	r0, r5
    2a72:	b003      	add	sp, #12
    2a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a78:	f44f 7300 	mov.w	r3, #512	; 0x200
    2a7c:	2040      	movs	r0, #64	; 0x40
    2a7e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    2a82:	e773      	b.n	296c <_malloc_r+0x8c>
    2a84:	68d3      	ldr	r3, [r2, #12]
    2a86:	429a      	cmp	r2, r3
    2a88:	bf08      	it	eq
    2a8a:	3002      	addeq	r0, #2
    2a8c:	f47f af40 	bne.w	2910 <_malloc_r+0x30>
    2a90:	693d      	ldr	r5, [r7, #16]
    2a92:	f8df c148 	ldr.w	ip, [pc, #328]	; 2bdc <_malloc_r+0x2fc>
    2a96:	4565      	cmp	r5, ip
    2a98:	d182      	bne.n	29a0 <_malloc_r+0xc0>
    2a9a:	687a      	ldr	r2, [r7, #4]
    2a9c:	1083      	asrs	r3, r0, #2
    2a9e:	2101      	movs	r1, #1
    2aa0:	4099      	lsls	r1, r3
    2aa2:	4291      	cmp	r1, r2
    2aa4:	d9a7      	bls.n	29f6 <_malloc_r+0x116>
    2aa6:	68bd      	ldr	r5, [r7, #8]
    2aa8:	686b      	ldr	r3, [r5, #4]
    2aaa:	f023 0903 	bic.w	r9, r3, #3
    2aae:	454e      	cmp	r6, r9
    2ab0:	d803      	bhi.n	2aba <_malloc_r+0x1da>
    2ab2:	eba9 0306 	sub.w	r3, r9, r6
    2ab6:	2b0f      	cmp	r3, #15
    2ab8:	dc7a      	bgt.n	2bb0 <_malloc_r+0x2d0>
    2aba:	f8df b124 	ldr.w	fp, [pc, #292]	; 2be0 <_malloc_r+0x300>
    2abe:	4b49      	ldr	r3, [pc, #292]	; (2be4 <_malloc_r+0x304>)
    2ac0:	f8db 2000 	ldr.w	r2, [fp]
    2ac4:	681b      	ldr	r3, [r3, #0]
    2ac6:	3201      	adds	r2, #1
    2ac8:	4433      	add	r3, r6
    2aca:	eb05 0a09 	add.w	sl, r5, r9
    2ace:	f000 8133 	beq.w	2d38 <_malloc_r+0x458>
    2ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2ad6:	330f      	adds	r3, #15
    2ad8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    2adc:	f028 080f 	bic.w	r8, r8, #15
    2ae0:	4641      	mov	r1, r8
    2ae2:	4620      	mov	r0, r4
    2ae4:	f000 fcb6 	bl	3454 <_sbrk_r>
    2ae8:	1c41      	adds	r1, r0, #1
    2aea:	4602      	mov	r2, r0
    2aec:	f000 80f3 	beq.w	2cd6 <_malloc_r+0x3f6>
    2af0:	4582      	cmp	sl, r0
    2af2:	f200 80ee 	bhi.w	2cd2 <_malloc_r+0x3f2>
    2af6:	4b3c      	ldr	r3, [pc, #240]	; (2be8 <_malloc_r+0x308>)
    2af8:	6819      	ldr	r1, [r3, #0]
    2afa:	4441      	add	r1, r8
    2afc:	6019      	str	r1, [r3, #0]
    2afe:	4608      	mov	r0, r1
    2b00:	f000 814e 	beq.w	2da0 <_malloc_r+0x4c0>
    2b04:	f8db 1000 	ldr.w	r1, [fp]
    2b08:	9301      	str	r3, [sp, #4]
    2b0a:	3101      	adds	r1, #1
    2b0c:	bf1b      	ittet	ne
    2b0e:	eba2 010a 	subne.w	r1, r2, sl
    2b12:	1809      	addne	r1, r1, r0
    2b14:	f8cb 2000 	streq.w	r2, [fp]
    2b18:	6019      	strne	r1, [r3, #0]
    2b1a:	f012 0b07 	ands.w	fp, r2, #7
    2b1e:	f000 8117 	beq.w	2d50 <_malloc_r+0x470>
    2b22:	f1cb 0108 	rsb	r1, fp, #8
    2b26:	440a      	add	r2, r1
    2b28:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    2b2c:	4490      	add	r8, r2
    2b2e:	3108      	adds	r1, #8
    2b30:	eba1 0108 	sub.w	r1, r1, r8
    2b34:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2b38:	4651      	mov	r1, sl
    2b3a:	4620      	mov	r0, r4
    2b3c:	9200      	str	r2, [sp, #0]
    2b3e:	f000 fc89 	bl	3454 <_sbrk_r>
    2b42:	1c42      	adds	r2, r0, #1
    2b44:	e9dd 2300 	ldrd	r2, r3, [sp]
    2b48:	f000 814f 	beq.w	2dea <_malloc_r+0x50a>
    2b4c:	1a80      	subs	r0, r0, r2
    2b4e:	eb00 080a 	add.w	r8, r0, sl
    2b52:	6819      	ldr	r1, [r3, #0]
    2b54:	60ba      	str	r2, [r7, #8]
    2b56:	f048 0001 	orr.w	r0, r8, #1
    2b5a:	4451      	add	r1, sl
    2b5c:	42bd      	cmp	r5, r7
    2b5e:	6050      	str	r0, [r2, #4]
    2b60:	6019      	str	r1, [r3, #0]
    2b62:	f000 8129 	beq.w	2db8 <_malloc_r+0x4d8>
    2b66:	f1b9 0f0f 	cmp.w	r9, #15
    2b6a:	f240 8127 	bls.w	2dbc <_malloc_r+0x4dc>
    2b6e:	6868      	ldr	r0, [r5, #4]
    2b70:	f1a9 0c0c 	sub.w	ip, r9, #12
    2b74:	f02c 0c07 	bic.w	ip, ip, #7
    2b78:	f000 0001 	and.w	r0, r0, #1
    2b7c:	ea40 000c 	orr.w	r0, r0, ip
    2b80:	6068      	str	r0, [r5, #4]
    2b82:	f04f 0e05 	mov.w	lr, #5
    2b86:	eb05 000c 	add.w	r0, r5, ip
    2b8a:	f1bc 0f0f 	cmp.w	ip, #15
    2b8e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    2b92:	f200 8132 	bhi.w	2dfa <_malloc_r+0x51a>
    2b96:	6850      	ldr	r0, [r2, #4]
    2b98:	4615      	mov	r5, r2
    2b9a:	4b14      	ldr	r3, [pc, #80]	; (2bec <_malloc_r+0x30c>)
    2b9c:	681a      	ldr	r2, [r3, #0]
    2b9e:	428a      	cmp	r2, r1
    2ba0:	bf38      	it	cc
    2ba2:	6019      	strcc	r1, [r3, #0]
    2ba4:	4b12      	ldr	r3, [pc, #72]	; (2bf0 <_malloc_r+0x310>)
    2ba6:	681a      	ldr	r2, [r3, #0]
    2ba8:	428a      	cmp	r2, r1
    2baa:	bf38      	it	cc
    2bac:	6019      	strcc	r1, [r3, #0]
    2bae:	e094      	b.n	2cda <_malloc_r+0x3fa>
    2bb0:	19aa      	adds	r2, r5, r6
    2bb2:	f043 0301 	orr.w	r3, r3, #1
    2bb6:	f046 0601 	orr.w	r6, r6, #1
    2bba:	606e      	str	r6, [r5, #4]
    2bbc:	4620      	mov	r0, r4
    2bbe:	60ba      	str	r2, [r7, #8]
    2bc0:	6053      	str	r3, [r2, #4]
    2bc2:	f000 f943 	bl	2e4c <__malloc_unlock>
    2bc6:	3508      	adds	r5, #8
    2bc8:	4628      	mov	r0, r5
    2bca:	b003      	add	sp, #12
    2bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd0:	68d9      	ldr	r1, [r3, #12]
    2bd2:	441a      	add	r2, r3
    2bd4:	e6a1      	b.n	291a <_malloc_r+0x3a>
    2bd6:	bf00      	nop
    2bd8:	1fff87e4 	.word	0x1fff87e4
    2bdc:	1fff87ec 	.word	0x1fff87ec
    2be0:	1fff8bec 	.word	0x1fff8bec
    2be4:	1fff8ee0 	.word	0x1fff8ee0
    2be8:	1fff8eb0 	.word	0x1fff8eb0
    2bec:	1fff8ed8 	.word	0x1fff8ed8
    2bf0:	1fff8edc 	.word	0x1fff8edc
    2bf4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    2bf8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    2bfc:	d363      	bcc.n	2cc6 <_malloc_r+0x3e6>
    2bfe:	2b14      	cmp	r3, #20
    2c00:	f200 80b7 	bhi.w	2d72 <_malloc_r+0x492>
    2c04:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    2c08:	00c9      	lsls	r1, r1, #3
    2c0a:	335b      	adds	r3, #91	; 0x5b
    2c0c:	eb07 0e01 	add.w	lr, r7, r1
    2c10:	5879      	ldr	r1, [r7, r1]
    2c12:	f1ae 0e08 	sub.w	lr, lr, #8
    2c16:	458e      	cmp	lr, r1
    2c18:	f000 8091 	beq.w	2d3e <_malloc_r+0x45e>
    2c1c:	684b      	ldr	r3, [r1, #4]
    2c1e:	f023 0303 	bic.w	r3, r3, #3
    2c22:	4293      	cmp	r3, r2
    2c24:	d902      	bls.n	2c2c <_malloc_r+0x34c>
    2c26:	6889      	ldr	r1, [r1, #8]
    2c28:	458e      	cmp	lr, r1
    2c2a:	d1f7      	bne.n	2c1c <_malloc_r+0x33c>
    2c2c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    2c30:	687a      	ldr	r2, [r7, #4]
    2c32:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    2c36:	f8ce 5008 	str.w	r5, [lr, #8]
    2c3a:	60cd      	str	r5, [r1, #12]
    2c3c:	e6d6      	b.n	29ec <_malloc_r+0x10c>
    2c3e:	2b14      	cmp	r3, #20
    2c40:	d959      	bls.n	2cf6 <_malloc_r+0x416>
    2c42:	2b54      	cmp	r3, #84	; 0x54
    2c44:	f200 809d 	bhi.w	2d82 <_malloc_r+0x4a2>
    2c48:	0b33      	lsrs	r3, r6, #12
    2c4a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    2c4e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    2c52:	00c3      	lsls	r3, r0, #3
    2c54:	e68a      	b.n	296c <_malloc_r+0x8c>
    2c56:	f10e 0e01 	add.w	lr, lr, #1
    2c5a:	f01e 0f03 	tst.w	lr, #3
    2c5e:	f105 0508 	add.w	r5, r5, #8
    2c62:	f47f aed5 	bne.w	2a10 <_malloc_r+0x130>
    2c66:	e051      	b.n	2d0c <_malloc_r+0x42c>
    2c68:	4442      	add	r2, r8
    2c6a:	4645      	mov	r5, r8
    2c6c:	6853      	ldr	r3, [r2, #4]
    2c6e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    2c72:	f043 0301 	orr.w	r3, r3, #1
    2c76:	6053      	str	r3, [r2, #4]
    2c78:	f855 3f08 	ldr.w	r3, [r5, #8]!
    2c7c:	4620      	mov	r0, r4
    2c7e:	60d9      	str	r1, [r3, #12]
    2c80:	608b      	str	r3, [r1, #8]
    2c82:	f000 f8e3 	bl	2e4c <__malloc_unlock>
    2c86:	e6f3      	b.n	2a70 <_malloc_r+0x190>
    2c88:	08f0      	lsrs	r0, r6, #3
    2c8a:	f106 0208 	add.w	r2, r6, #8
    2c8e:	e637      	b.n	2900 <_malloc_r+0x20>
    2c90:	442a      	add	r2, r5
    2c92:	4620      	mov	r0, r4
    2c94:	6853      	ldr	r3, [r2, #4]
    2c96:	f043 0301 	orr.w	r3, r3, #1
    2c9a:	6053      	str	r3, [r2, #4]
    2c9c:	3508      	adds	r5, #8
    2c9e:	f000 f8d5 	bl	2e4c <__malloc_unlock>
    2ca2:	e6e5      	b.n	2a70 <_malloc_r+0x190>
    2ca4:	19a9      	adds	r1, r5, r6
    2ca6:	4620      	mov	r0, r4
    2ca8:	f046 0601 	orr.w	r6, r6, #1
    2cac:	f043 0401 	orr.w	r4, r3, #1
    2cb0:	606e      	str	r6, [r5, #4]
    2cb2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    2cb6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2cba:	604c      	str	r4, [r1, #4]
    2cbc:	50ab      	str	r3, [r5, r2]
    2cbe:	f000 f8c5 	bl	2e4c <__malloc_unlock>
    2cc2:	3508      	adds	r5, #8
    2cc4:	e6d4      	b.n	2a70 <_malloc_r+0x190>
    2cc6:	0993      	lsrs	r3, r2, #6
    2cc8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    2ccc:	00c9      	lsls	r1, r1, #3
    2cce:	3338      	adds	r3, #56	; 0x38
    2cd0:	e79c      	b.n	2c0c <_malloc_r+0x32c>
    2cd2:	42bd      	cmp	r5, r7
    2cd4:	d05f      	beq.n	2d96 <_malloc_r+0x4b6>
    2cd6:	68bd      	ldr	r5, [r7, #8]
    2cd8:	6868      	ldr	r0, [r5, #4]
    2cda:	f020 0803 	bic.w	r8, r0, #3
    2cde:	4546      	cmp	r6, r8
    2ce0:	eba8 0306 	sub.w	r3, r8, r6
    2ce4:	d802      	bhi.n	2cec <_malloc_r+0x40c>
    2ce6:	2b0f      	cmp	r3, #15
    2ce8:	f73f af62 	bgt.w	2bb0 <_malloc_r+0x2d0>
    2cec:	4620      	mov	r0, r4
    2cee:	f000 f8ad 	bl	2e4c <__malloc_unlock>
    2cf2:	2500      	movs	r5, #0
    2cf4:	e6bc      	b.n	2a70 <_malloc_r+0x190>
    2cf6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    2cfa:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    2cfe:	00c3      	lsls	r3, r0, #3
    2d00:	e634      	b.n	296c <_malloc_r+0x8c>
    2d02:	f859 3908 	ldr.w	r3, [r9], #-8
    2d06:	454b      	cmp	r3, r9
    2d08:	f040 8096 	bne.w	2e38 <_malloc_r+0x558>
    2d0c:	f010 0f03 	tst.w	r0, #3
    2d10:	f100 30ff 	add.w	r0, r0, #4294967295
    2d14:	d1f5      	bne.n	2d02 <_malloc_r+0x422>
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	ea23 0301 	bic.w	r3, r3, r1
    2d1c:	607b      	str	r3, [r7, #4]
    2d1e:	0049      	lsls	r1, r1, #1
    2d20:	4299      	cmp	r1, r3
    2d22:	f63f aec0 	bhi.w	2aa6 <_malloc_r+0x1c6>
    2d26:	b919      	cbnz	r1, 2d30 <_malloc_r+0x450>
    2d28:	e6bd      	b.n	2aa6 <_malloc_r+0x1c6>
    2d2a:	0049      	lsls	r1, r1, #1
    2d2c:	f10e 0e04 	add.w	lr, lr, #4
    2d30:	4219      	tst	r1, r3
    2d32:	d0fa      	beq.n	2d2a <_malloc_r+0x44a>
    2d34:	4670      	mov	r0, lr
    2d36:	e667      	b.n	2a08 <_malloc_r+0x128>
    2d38:	f103 0810 	add.w	r8, r3, #16
    2d3c:	e6d0      	b.n	2ae0 <_malloc_r+0x200>
    2d3e:	109a      	asrs	r2, r3, #2
    2d40:	f04f 0801 	mov.w	r8, #1
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	fa08 f202 	lsl.w	r2, r8, r2
    2d4a:	431a      	orrs	r2, r3
    2d4c:	607a      	str	r2, [r7, #4]
    2d4e:	e770      	b.n	2c32 <_malloc_r+0x352>
    2d50:	eb02 0108 	add.w	r1, r2, r8
    2d54:	4249      	negs	r1, r1
    2d56:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2d5a:	4651      	mov	r1, sl
    2d5c:	4620      	mov	r0, r4
    2d5e:	9200      	str	r2, [sp, #0]
    2d60:	f000 fb78 	bl	3454 <_sbrk_r>
    2d64:	1c43      	adds	r3, r0, #1
    2d66:	e9dd 2300 	ldrd	r2, r3, [sp]
    2d6a:	f47f aeef 	bne.w	2b4c <_malloc_r+0x26c>
    2d6e:	46da      	mov	sl, fp
    2d70:	e6ef      	b.n	2b52 <_malloc_r+0x272>
    2d72:	2b54      	cmp	r3, #84	; 0x54
    2d74:	d825      	bhi.n	2dc2 <_malloc_r+0x4e2>
    2d76:	0b13      	lsrs	r3, r2, #12
    2d78:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    2d7c:	00c9      	lsls	r1, r1, #3
    2d7e:	336e      	adds	r3, #110	; 0x6e
    2d80:	e744      	b.n	2c0c <_malloc_r+0x32c>
    2d82:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2d86:	d825      	bhi.n	2dd4 <_malloc_r+0x4f4>
    2d88:	0bf3      	lsrs	r3, r6, #15
    2d8a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    2d8e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    2d92:	00c3      	lsls	r3, r0, #3
    2d94:	e5ea      	b.n	296c <_malloc_r+0x8c>
    2d96:	4b29      	ldr	r3, [pc, #164]	; (2e3c <_malloc_r+0x55c>)
    2d98:	6818      	ldr	r0, [r3, #0]
    2d9a:	4440      	add	r0, r8
    2d9c:	6018      	str	r0, [r3, #0]
    2d9e:	e6b1      	b.n	2b04 <_malloc_r+0x224>
    2da0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    2da4:	f1bc 0f00 	cmp.w	ip, #0
    2da8:	f47f aeac 	bne.w	2b04 <_malloc_r+0x224>
    2dac:	68bd      	ldr	r5, [r7, #8]
    2dae:	44c8      	add	r8, r9
    2db0:	f048 0001 	orr.w	r0, r8, #1
    2db4:	6068      	str	r0, [r5, #4]
    2db6:	e6f0      	b.n	2b9a <_malloc_r+0x2ba>
    2db8:	4615      	mov	r5, r2
    2dba:	e6ee      	b.n	2b9a <_malloc_r+0x2ba>
    2dbc:	2301      	movs	r3, #1
    2dbe:	6053      	str	r3, [r2, #4]
    2dc0:	e794      	b.n	2cec <_malloc_r+0x40c>
    2dc2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2dc6:	d823      	bhi.n	2e10 <_malloc_r+0x530>
    2dc8:	0bd3      	lsrs	r3, r2, #15
    2dca:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2dce:	00c9      	lsls	r1, r1, #3
    2dd0:	3377      	adds	r3, #119	; 0x77
    2dd2:	e71b      	b.n	2c0c <_malloc_r+0x32c>
    2dd4:	f240 5254 	movw	r2, #1364	; 0x554
    2dd8:	4293      	cmp	r3, r2
    2dda:	d823      	bhi.n	2e24 <_malloc_r+0x544>
    2ddc:	0cb3      	lsrs	r3, r6, #18
    2dde:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    2de2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    2de6:	00c3      	lsls	r3, r0, #3
    2de8:	e5c0      	b.n	296c <_malloc_r+0x8c>
    2dea:	f1ab 0b08 	sub.w	fp, fp, #8
    2dee:	44d8      	add	r8, fp
    2df0:	eba8 0802 	sub.w	r8, r8, r2
    2df4:	f04f 0a00 	mov.w	sl, #0
    2df8:	e6ab      	b.n	2b52 <_malloc_r+0x272>
    2dfa:	f105 0108 	add.w	r1, r5, #8
    2dfe:	4620      	mov	r0, r4
    2e00:	9300      	str	r3, [sp, #0]
    2e02:	f000 fe4f 	bl	3aa4 <_free_r>
    2e06:	68bd      	ldr	r5, [r7, #8]
    2e08:	9b00      	ldr	r3, [sp, #0]
    2e0a:	6868      	ldr	r0, [r5, #4]
    2e0c:	6819      	ldr	r1, [r3, #0]
    2e0e:	e6c4      	b.n	2b9a <_malloc_r+0x2ba>
    2e10:	f240 5154 	movw	r1, #1364	; 0x554
    2e14:	428b      	cmp	r3, r1
    2e16:	d80b      	bhi.n	2e30 <_malloc_r+0x550>
    2e18:	0c93      	lsrs	r3, r2, #18
    2e1a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    2e1e:	00c9      	lsls	r1, r1, #3
    2e20:	337c      	adds	r3, #124	; 0x7c
    2e22:	e6f3      	b.n	2c0c <_malloc_r+0x32c>
    2e24:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2e28:	207f      	movs	r0, #127	; 0x7f
    2e2a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    2e2e:	e59d      	b.n	296c <_malloc_r+0x8c>
    2e30:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2e34:	237e      	movs	r3, #126	; 0x7e
    2e36:	e6e9      	b.n	2c0c <_malloc_r+0x32c>
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	e770      	b.n	2d1e <_malloc_r+0x43e>
    2e3c:	1fff8eb0 	.word	0x1fff8eb0

00002e40 <__malloc_lock>:
    2e40:	4801      	ldr	r0, [pc, #4]	; (2e48 <__malloc_lock+0x8>)
    2e42:	f000 bb43 	b.w	34cc <__retarget_lock_acquire_recursive>
    2e46:	bf00      	nop
    2e48:	1fff9024 	.word	0x1fff9024

00002e4c <__malloc_unlock>:
    2e4c:	4801      	ldr	r0, [pc, #4]	; (2e54 <__malloc_unlock+0x8>)
    2e4e:	f000 bb3f 	b.w	34d0 <__retarget_lock_release_recursive>
    2e52:	bf00      	nop
    2e54:	1fff9024 	.word	0x1fff9024

00002e58 <realloc>:
    2e58:	b410      	push	{r4}
    2e5a:	4c04      	ldr	r4, [pc, #16]	; (2e6c <realloc+0x14>)
    2e5c:	4603      	mov	r3, r0
    2e5e:	460a      	mov	r2, r1
    2e60:	6820      	ldr	r0, [r4, #0]
    2e62:	bc10      	pop	{r4}
    2e64:	4619      	mov	r1, r3
    2e66:	f000 b803 	b.w	2e70 <_realloc_r>
    2e6a:	bf00      	nop
    2e6c:	1fff8d18 	.word	0x1fff8d18

00002e70 <_realloc_r>:
    2e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e74:	4617      	mov	r7, r2
    2e76:	2900      	cmp	r1, #0
    2e78:	f000 8098 	beq.w	2fac <_realloc_r+0x13c>
    2e7c:	460c      	mov	r4, r1
    2e7e:	f107 050b 	add.w	r5, r7, #11
    2e82:	4680      	mov	r8, r0
    2e84:	f7ff ffdc 	bl	2e40 <__malloc_lock>
    2e88:	2d16      	cmp	r5, #22
    2e8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    2e8e:	d85b      	bhi.n	2f48 <_realloc_r+0xd8>
    2e90:	2510      	movs	r5, #16
    2e92:	462a      	mov	r2, r5
    2e94:	42af      	cmp	r7, r5
    2e96:	d85c      	bhi.n	2f52 <_realloc_r+0xe2>
    2e98:	f021 0603 	bic.w	r6, r1, #3
    2e9c:	4296      	cmp	r6, r2
    2e9e:	f1a4 0908 	sub.w	r9, r4, #8
    2ea2:	da62      	bge.n	2f6a <_realloc_r+0xfa>
    2ea4:	4bbc      	ldr	r3, [pc, #752]	; (3198 <_realloc_r+0x328>)
    2ea6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    2eaa:	eb09 0006 	add.w	r0, r9, r6
    2eae:	4584      	cmp	ip, r0
    2eb0:	f000 8097 	beq.w	2fe2 <_realloc_r+0x172>
    2eb4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    2eb8:	f02c 0301 	bic.w	r3, ip, #1
    2ebc:	4403      	add	r3, r0
    2ebe:	685b      	ldr	r3, [r3, #4]
    2ec0:	07db      	lsls	r3, r3, #31
    2ec2:	d468      	bmi.n	2f96 <_realloc_r+0x126>
    2ec4:	f02c 0c03 	bic.w	ip, ip, #3
    2ec8:	eb06 030c 	add.w	r3, r6, ip
    2ecc:	4293      	cmp	r3, r2
    2ece:	da47      	bge.n	2f60 <_realloc_r+0xf0>
    2ed0:	07cb      	lsls	r3, r1, #31
    2ed2:	d410      	bmi.n	2ef6 <_realloc_r+0x86>
    2ed4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    2ed8:	eba9 0a03 	sub.w	sl, r9, r3
    2edc:	f8da 3004 	ldr.w	r3, [sl, #4]
    2ee0:	f023 0103 	bic.w	r1, r3, #3
    2ee4:	448c      	add	ip, r1
    2ee6:	44b4      	add	ip, r6
    2ee8:	4594      	cmp	ip, r2
    2eea:	f280 8111 	bge.w	3110 <_realloc_r+0x2a0>
    2eee:	1873      	adds	r3, r6, r1
    2ef0:	4293      	cmp	r3, r2
    2ef2:	f280 80e8 	bge.w	30c6 <_realloc_r+0x256>
    2ef6:	4639      	mov	r1, r7
    2ef8:	4640      	mov	r0, r8
    2efa:	f7ff fcf1 	bl	28e0 <_malloc_r>
    2efe:	4607      	mov	r7, r0
    2f00:	b1e0      	cbz	r0, 2f3c <_realloc_r+0xcc>
    2f02:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2f06:	f023 0301 	bic.w	r3, r3, #1
    2f0a:	444b      	add	r3, r9
    2f0c:	f1a0 0208 	sub.w	r2, r0, #8
    2f10:	4293      	cmp	r3, r2
    2f12:	f000 80d2 	beq.w	30ba <_realloc_r+0x24a>
    2f16:	1f32      	subs	r2, r6, #4
    2f18:	2a24      	cmp	r2, #36	; 0x24
    2f1a:	f200 80f5 	bhi.w	3108 <_realloc_r+0x298>
    2f1e:	2a13      	cmp	r2, #19
    2f20:	f200 80ac 	bhi.w	307c <_realloc_r+0x20c>
    2f24:	4603      	mov	r3, r0
    2f26:	4622      	mov	r2, r4
    2f28:	6811      	ldr	r1, [r2, #0]
    2f2a:	6019      	str	r1, [r3, #0]
    2f2c:	6851      	ldr	r1, [r2, #4]
    2f2e:	6059      	str	r1, [r3, #4]
    2f30:	6892      	ldr	r2, [r2, #8]
    2f32:	609a      	str	r2, [r3, #8]
    2f34:	4621      	mov	r1, r4
    2f36:	4640      	mov	r0, r8
    2f38:	f000 fdb4 	bl	3aa4 <_free_r>
    2f3c:	4640      	mov	r0, r8
    2f3e:	f7ff ff85 	bl	2e4c <__malloc_unlock>
    2f42:	4638      	mov	r0, r7
    2f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f48:	f025 0507 	bic.w	r5, r5, #7
    2f4c:	2d00      	cmp	r5, #0
    2f4e:	462a      	mov	r2, r5
    2f50:	daa0      	bge.n	2e94 <_realloc_r+0x24>
    2f52:	230c      	movs	r3, #12
    2f54:	f8c8 3000 	str.w	r3, [r8]
    2f58:	2700      	movs	r7, #0
    2f5a:	4638      	mov	r0, r7
    2f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f60:	461e      	mov	r6, r3
    2f62:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    2f66:	60d3      	str	r3, [r2, #12]
    2f68:	609a      	str	r2, [r3, #8]
    2f6a:	1b73      	subs	r3, r6, r5
    2f6c:	2b0f      	cmp	r3, #15
    2f6e:	d822      	bhi.n	2fb6 <_realloc_r+0x146>
    2f70:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2f74:	f003 0301 	and.w	r3, r3, #1
    2f78:	4333      	orrs	r3, r6
    2f7a:	444e      	add	r6, r9
    2f7c:	f8c9 3004 	str.w	r3, [r9, #4]
    2f80:	6873      	ldr	r3, [r6, #4]
    2f82:	f043 0301 	orr.w	r3, r3, #1
    2f86:	6073      	str	r3, [r6, #4]
    2f88:	4640      	mov	r0, r8
    2f8a:	4627      	mov	r7, r4
    2f8c:	f7ff ff5e 	bl	2e4c <__malloc_unlock>
    2f90:	4638      	mov	r0, r7
    2f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f96:	07c9      	lsls	r1, r1, #31
    2f98:	d4ad      	bmi.n	2ef6 <_realloc_r+0x86>
    2f9a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    2f9e:	eba9 0a03 	sub.w	sl, r9, r3
    2fa2:	f8da 1004 	ldr.w	r1, [sl, #4]
    2fa6:	f021 0103 	bic.w	r1, r1, #3
    2faa:	e7a0      	b.n	2eee <_realloc_r+0x7e>
    2fac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fb0:	4611      	mov	r1, r2
    2fb2:	f7ff bc95 	b.w	28e0 <_malloc_r>
    2fb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    2fba:	eb09 0105 	add.w	r1, r9, r5
    2fbe:	f002 0201 	and.w	r2, r2, #1
    2fc2:	444e      	add	r6, r9
    2fc4:	f043 0301 	orr.w	r3, r3, #1
    2fc8:	432a      	orrs	r2, r5
    2fca:	f8c9 2004 	str.w	r2, [r9, #4]
    2fce:	604b      	str	r3, [r1, #4]
    2fd0:	6873      	ldr	r3, [r6, #4]
    2fd2:	f043 0301 	orr.w	r3, r3, #1
    2fd6:	3108      	adds	r1, #8
    2fd8:	6073      	str	r3, [r6, #4]
    2fda:	4640      	mov	r0, r8
    2fdc:	f000 fd62 	bl	3aa4 <_free_r>
    2fe0:	e7d2      	b.n	2f88 <_realloc_r+0x118>
    2fe2:	f8dc 0004 	ldr.w	r0, [ip, #4]
    2fe6:	f020 0b03 	bic.w	fp, r0, #3
    2fea:	eb06 0c0b 	add.w	ip, r6, fp
    2fee:	f105 0010 	add.w	r0, r5, #16
    2ff2:	4584      	cmp	ip, r0
    2ff4:	da4d      	bge.n	3092 <_realloc_r+0x222>
    2ff6:	07c9      	lsls	r1, r1, #31
    2ff8:	f53f af7d 	bmi.w	2ef6 <_realloc_r+0x86>
    2ffc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    3000:	eba9 0a01 	sub.w	sl, r9, r1
    3004:	f8da 1004 	ldr.w	r1, [sl, #4]
    3008:	f021 0103 	bic.w	r1, r1, #3
    300c:	448b      	add	fp, r1
    300e:	44b3      	add	fp, r6
    3010:	4558      	cmp	r0, fp
    3012:	f73f af6c 	bgt.w	2eee <_realloc_r+0x7e>
    3016:	4657      	mov	r7, sl
    3018:	f8da 100c 	ldr.w	r1, [sl, #12]
    301c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3020:	1f32      	subs	r2, r6, #4
    3022:	2a24      	cmp	r2, #36	; 0x24
    3024:	60c1      	str	r1, [r0, #12]
    3026:	6088      	str	r0, [r1, #8]
    3028:	f200 80db 	bhi.w	31e2 <_realloc_r+0x372>
    302c:	2a13      	cmp	r2, #19
    302e:	f240 80d6 	bls.w	31de <_realloc_r+0x36e>
    3032:	6821      	ldr	r1, [r4, #0]
    3034:	f8ca 1008 	str.w	r1, [sl, #8]
    3038:	6861      	ldr	r1, [r4, #4]
    303a:	f8ca 100c 	str.w	r1, [sl, #12]
    303e:	2a1b      	cmp	r2, #27
    3040:	f200 80df 	bhi.w	3202 <_realloc_r+0x392>
    3044:	3408      	adds	r4, #8
    3046:	f10a 0210 	add.w	r2, sl, #16
    304a:	6821      	ldr	r1, [r4, #0]
    304c:	6011      	str	r1, [r2, #0]
    304e:	6861      	ldr	r1, [r4, #4]
    3050:	6051      	str	r1, [r2, #4]
    3052:	68a1      	ldr	r1, [r4, #8]
    3054:	6091      	str	r1, [r2, #8]
    3056:	eb0a 0105 	add.w	r1, sl, r5
    305a:	ebab 0205 	sub.w	r2, fp, r5
    305e:	f042 0201 	orr.w	r2, r2, #1
    3062:	6099      	str	r1, [r3, #8]
    3064:	604a      	str	r2, [r1, #4]
    3066:	f8da 3004 	ldr.w	r3, [sl, #4]
    306a:	f003 0301 	and.w	r3, r3, #1
    306e:	432b      	orrs	r3, r5
    3070:	4640      	mov	r0, r8
    3072:	f8ca 3004 	str.w	r3, [sl, #4]
    3076:	f7ff fee9 	bl	2e4c <__malloc_unlock>
    307a:	e76e      	b.n	2f5a <_realloc_r+0xea>
    307c:	6823      	ldr	r3, [r4, #0]
    307e:	6003      	str	r3, [r0, #0]
    3080:	6863      	ldr	r3, [r4, #4]
    3082:	6043      	str	r3, [r0, #4]
    3084:	2a1b      	cmp	r2, #27
    3086:	d868      	bhi.n	315a <_realloc_r+0x2ea>
    3088:	f104 0208 	add.w	r2, r4, #8
    308c:	f100 0308 	add.w	r3, r0, #8
    3090:	e74a      	b.n	2f28 <_realloc_r+0xb8>
    3092:	eb09 0205 	add.w	r2, r9, r5
    3096:	609a      	str	r2, [r3, #8]
    3098:	ebac 0305 	sub.w	r3, ip, r5
    309c:	f043 0301 	orr.w	r3, r3, #1
    30a0:	6053      	str	r3, [r2, #4]
    30a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    30a6:	f003 0301 	and.w	r3, r3, #1
    30aa:	432b      	orrs	r3, r5
    30ac:	4640      	mov	r0, r8
    30ae:	f844 3c04 	str.w	r3, [r4, #-4]
    30b2:	f7ff fecb 	bl	2e4c <__malloc_unlock>
    30b6:	4627      	mov	r7, r4
    30b8:	e74f      	b.n	2f5a <_realloc_r+0xea>
    30ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
    30be:	f023 0303 	bic.w	r3, r3, #3
    30c2:	441e      	add	r6, r3
    30c4:	e751      	b.n	2f6a <_realloc_r+0xfa>
    30c6:	4657      	mov	r7, sl
    30c8:	f8da 100c 	ldr.w	r1, [sl, #12]
    30cc:	f857 0f08 	ldr.w	r0, [r7, #8]!
    30d0:	1f32      	subs	r2, r6, #4
    30d2:	2a24      	cmp	r2, #36	; 0x24
    30d4:	60c1      	str	r1, [r0, #12]
    30d6:	6088      	str	r0, [r1, #8]
    30d8:	d84c      	bhi.n	3174 <_realloc_r+0x304>
    30da:	2a13      	cmp	r2, #19
    30dc:	d948      	bls.n	3170 <_realloc_r+0x300>
    30de:	6821      	ldr	r1, [r4, #0]
    30e0:	f8ca 1008 	str.w	r1, [sl, #8]
    30e4:	6861      	ldr	r1, [r4, #4]
    30e6:	f8ca 100c 	str.w	r1, [sl, #12]
    30ea:	2a1b      	cmp	r2, #27
    30ec:	d856      	bhi.n	319c <_realloc_r+0x32c>
    30ee:	3408      	adds	r4, #8
    30f0:	f10a 0210 	add.w	r2, sl, #16
    30f4:	461e      	mov	r6, r3
    30f6:	6823      	ldr	r3, [r4, #0]
    30f8:	6013      	str	r3, [r2, #0]
    30fa:	6863      	ldr	r3, [r4, #4]
    30fc:	6053      	str	r3, [r2, #4]
    30fe:	68a3      	ldr	r3, [r4, #8]
    3100:	6093      	str	r3, [r2, #8]
    3102:	46d1      	mov	r9, sl
    3104:	463c      	mov	r4, r7
    3106:	e730      	b.n	2f6a <_realloc_r+0xfa>
    3108:	4621      	mov	r1, r4
    310a:	f000 f8a3 	bl	3254 <memmove>
    310e:	e711      	b.n	2f34 <_realloc_r+0xc4>
    3110:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    3114:	4657      	mov	r7, sl
    3116:	60cb      	str	r3, [r1, #12]
    3118:	6099      	str	r1, [r3, #8]
    311a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    311e:	f8da 300c 	ldr.w	r3, [sl, #12]
    3122:	60cb      	str	r3, [r1, #12]
    3124:	1f32      	subs	r2, r6, #4
    3126:	2a24      	cmp	r2, #36	; 0x24
    3128:	6099      	str	r1, [r3, #8]
    312a:	d82d      	bhi.n	3188 <_realloc_r+0x318>
    312c:	2a13      	cmp	r2, #19
    312e:	d929      	bls.n	3184 <_realloc_r+0x314>
    3130:	6823      	ldr	r3, [r4, #0]
    3132:	f8ca 3008 	str.w	r3, [sl, #8]
    3136:	6863      	ldr	r3, [r4, #4]
    3138:	f8ca 300c 	str.w	r3, [sl, #12]
    313c:	2a1b      	cmp	r2, #27
    313e:	d842      	bhi.n	31c6 <_realloc_r+0x356>
    3140:	3408      	adds	r4, #8
    3142:	f10a 0310 	add.w	r3, sl, #16
    3146:	6822      	ldr	r2, [r4, #0]
    3148:	601a      	str	r2, [r3, #0]
    314a:	6862      	ldr	r2, [r4, #4]
    314c:	605a      	str	r2, [r3, #4]
    314e:	68a2      	ldr	r2, [r4, #8]
    3150:	609a      	str	r2, [r3, #8]
    3152:	4666      	mov	r6, ip
    3154:	46d1      	mov	r9, sl
    3156:	463c      	mov	r4, r7
    3158:	e707      	b.n	2f6a <_realloc_r+0xfa>
    315a:	68a3      	ldr	r3, [r4, #8]
    315c:	6083      	str	r3, [r0, #8]
    315e:	68e3      	ldr	r3, [r4, #12]
    3160:	60c3      	str	r3, [r0, #12]
    3162:	2a24      	cmp	r2, #36	; 0x24
    3164:	d026      	beq.n	31b4 <_realloc_r+0x344>
    3166:	f104 0210 	add.w	r2, r4, #16
    316a:	f100 0310 	add.w	r3, r0, #16
    316e:	e6db      	b.n	2f28 <_realloc_r+0xb8>
    3170:	463a      	mov	r2, r7
    3172:	e7bf      	b.n	30f4 <_realloc_r+0x284>
    3174:	4621      	mov	r1, r4
    3176:	4638      	mov	r0, r7
    3178:	461e      	mov	r6, r3
    317a:	46d1      	mov	r9, sl
    317c:	f000 f86a 	bl	3254 <memmove>
    3180:	463c      	mov	r4, r7
    3182:	e6f2      	b.n	2f6a <_realloc_r+0xfa>
    3184:	463b      	mov	r3, r7
    3186:	e7de      	b.n	3146 <_realloc_r+0x2d6>
    3188:	4621      	mov	r1, r4
    318a:	4638      	mov	r0, r7
    318c:	4666      	mov	r6, ip
    318e:	46d1      	mov	r9, sl
    3190:	f000 f860 	bl	3254 <memmove>
    3194:	463c      	mov	r4, r7
    3196:	e6e8      	b.n	2f6a <_realloc_r+0xfa>
    3198:	1fff87e4 	.word	0x1fff87e4
    319c:	68a1      	ldr	r1, [r4, #8]
    319e:	f8ca 1010 	str.w	r1, [sl, #16]
    31a2:	68e1      	ldr	r1, [r4, #12]
    31a4:	f8ca 1014 	str.w	r1, [sl, #20]
    31a8:	2a24      	cmp	r2, #36	; 0x24
    31aa:	d020      	beq.n	31ee <_realloc_r+0x37e>
    31ac:	3410      	adds	r4, #16
    31ae:	f10a 0218 	add.w	r2, sl, #24
    31b2:	e79f      	b.n	30f4 <_realloc_r+0x284>
    31b4:	6923      	ldr	r3, [r4, #16]
    31b6:	6103      	str	r3, [r0, #16]
    31b8:	6961      	ldr	r1, [r4, #20]
    31ba:	6141      	str	r1, [r0, #20]
    31bc:	f104 0218 	add.w	r2, r4, #24
    31c0:	f100 0318 	add.w	r3, r0, #24
    31c4:	e6b0      	b.n	2f28 <_realloc_r+0xb8>
    31c6:	68a3      	ldr	r3, [r4, #8]
    31c8:	f8ca 3010 	str.w	r3, [sl, #16]
    31cc:	68e3      	ldr	r3, [r4, #12]
    31ce:	f8ca 3014 	str.w	r3, [sl, #20]
    31d2:	2a24      	cmp	r2, #36	; 0x24
    31d4:	d021      	beq.n	321a <_realloc_r+0x3aa>
    31d6:	3410      	adds	r4, #16
    31d8:	f10a 0318 	add.w	r3, sl, #24
    31dc:	e7b3      	b.n	3146 <_realloc_r+0x2d6>
    31de:	463a      	mov	r2, r7
    31e0:	e733      	b.n	304a <_realloc_r+0x1da>
    31e2:	4621      	mov	r1, r4
    31e4:	4638      	mov	r0, r7
    31e6:	f000 f835 	bl	3254 <memmove>
    31ea:	4b16      	ldr	r3, [pc, #88]	; (3244 <_realloc_r+0x3d4>)
    31ec:	e733      	b.n	3056 <_realloc_r+0x1e6>
    31ee:	6922      	ldr	r2, [r4, #16]
    31f0:	f8ca 2018 	str.w	r2, [sl, #24]
    31f4:	6962      	ldr	r2, [r4, #20]
    31f6:	f8ca 201c 	str.w	r2, [sl, #28]
    31fa:	3418      	adds	r4, #24
    31fc:	f10a 0220 	add.w	r2, sl, #32
    3200:	e778      	b.n	30f4 <_realloc_r+0x284>
    3202:	68a1      	ldr	r1, [r4, #8]
    3204:	f8ca 1010 	str.w	r1, [sl, #16]
    3208:	68e1      	ldr	r1, [r4, #12]
    320a:	f8ca 1014 	str.w	r1, [sl, #20]
    320e:	2a24      	cmp	r2, #36	; 0x24
    3210:	d00d      	beq.n	322e <_realloc_r+0x3be>
    3212:	3410      	adds	r4, #16
    3214:	f10a 0218 	add.w	r2, sl, #24
    3218:	e717      	b.n	304a <_realloc_r+0x1da>
    321a:	6923      	ldr	r3, [r4, #16]
    321c:	f8ca 3018 	str.w	r3, [sl, #24]
    3220:	6963      	ldr	r3, [r4, #20]
    3222:	f8ca 301c 	str.w	r3, [sl, #28]
    3226:	3418      	adds	r4, #24
    3228:	f10a 0320 	add.w	r3, sl, #32
    322c:	e78b      	b.n	3146 <_realloc_r+0x2d6>
    322e:	6922      	ldr	r2, [r4, #16]
    3230:	f8ca 2018 	str.w	r2, [sl, #24]
    3234:	6962      	ldr	r2, [r4, #20]
    3236:	f8ca 201c 	str.w	r2, [sl, #28]
    323a:	3418      	adds	r4, #24
    323c:	f10a 0220 	add.w	r2, sl, #32
    3240:	e703      	b.n	304a <_realloc_r+0x1da>
    3242:	bf00      	nop
    3244:	1fff87e4 	.word	0x1fff87e4

00003248 <__cxa_atexit>:
    3248:	4613      	mov	r3, r2
    324a:	460a      	mov	r2, r1
    324c:	4601      	mov	r1, r0
    324e:	2002      	movs	r0, #2
    3250:	f000 bb84 	b.w	395c <__register_exitproc>

00003254 <memmove>:
    3254:	4288      	cmp	r0, r1
    3256:	d90d      	bls.n	3274 <memmove+0x20>
    3258:	188b      	adds	r3, r1, r2
    325a:	4283      	cmp	r3, r0
    325c:	d90a      	bls.n	3274 <memmove+0x20>
    325e:	eb00 0c02 	add.w	ip, r0, r2
    3262:	b1ba      	cbz	r2, 3294 <memmove+0x40>
    3264:	4662      	mov	r2, ip
    3266:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    326a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    326e:	4299      	cmp	r1, r3
    3270:	d1f9      	bne.n	3266 <memmove+0x12>
    3272:	4770      	bx	lr
    3274:	2a0f      	cmp	r2, #15
    3276:	d80e      	bhi.n	3296 <memmove+0x42>
    3278:	4603      	mov	r3, r0
    327a:	f102 3cff 	add.w	ip, r2, #4294967295
    327e:	b14a      	cbz	r2, 3294 <memmove+0x40>
    3280:	f10c 0c01 	add.w	ip, ip, #1
    3284:	3b01      	subs	r3, #1
    3286:	448c      	add	ip, r1
    3288:	f811 2b01 	ldrb.w	r2, [r1], #1
    328c:	f803 2f01 	strb.w	r2, [r3, #1]!
    3290:	4561      	cmp	r1, ip
    3292:	d1f9      	bne.n	3288 <memmove+0x34>
    3294:	4770      	bx	lr
    3296:	ea40 0301 	orr.w	r3, r0, r1
    329a:	079b      	lsls	r3, r3, #30
    329c:	d150      	bne.n	3340 <memmove+0xec>
    329e:	f1a2 0310 	sub.w	r3, r2, #16
    32a2:	b570      	push	{r4, r5, r6, lr}
    32a4:	f101 0c20 	add.w	ip, r1, #32
    32a8:	f023 050f 	bic.w	r5, r3, #15
    32ac:	f101 0e10 	add.w	lr, r1, #16
    32b0:	f100 0410 	add.w	r4, r0, #16
    32b4:	44ac      	add	ip, r5
    32b6:	091b      	lsrs	r3, r3, #4
    32b8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    32bc:	f844 5c10 	str.w	r5, [r4, #-16]
    32c0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    32c4:	f844 5c0c 	str.w	r5, [r4, #-12]
    32c8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    32cc:	f844 5c08 	str.w	r5, [r4, #-8]
    32d0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    32d4:	f844 5c04 	str.w	r5, [r4, #-4]
    32d8:	f10e 0e10 	add.w	lr, lr, #16
    32dc:	45e6      	cmp	lr, ip
    32de:	f104 0410 	add.w	r4, r4, #16
    32e2:	d1e9      	bne.n	32b8 <memmove+0x64>
    32e4:	3301      	adds	r3, #1
    32e6:	f012 0f0c 	tst.w	r2, #12
    32ea:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    32ee:	f002 040f 	and.w	r4, r2, #15
    32f2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    32f6:	d027      	beq.n	3348 <memmove+0xf4>
    32f8:	3c04      	subs	r4, #4
    32fa:	f024 0603 	bic.w	r6, r4, #3
    32fe:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    3302:	441e      	add	r6, r3
    3304:	1f1c      	subs	r4, r3, #4
    3306:	468e      	mov	lr, r1
    3308:	f85e 5b04 	ldr.w	r5, [lr], #4
    330c:	f844 5f04 	str.w	r5, [r4, #4]!
    3310:	42b4      	cmp	r4, r6
    3312:	d1f9      	bne.n	3308 <memmove+0xb4>
    3314:	f10c 0401 	add.w	r4, ip, #1
    3318:	f002 0203 	and.w	r2, r2, #3
    331c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    3324:	f102 3cff 	add.w	ip, r2, #4294967295
    3328:	b14a      	cbz	r2, 333e <memmove+0xea>
    332a:	f10c 0c01 	add.w	ip, ip, #1
    332e:	3b01      	subs	r3, #1
    3330:	448c      	add	ip, r1
    3332:	f811 2b01 	ldrb.w	r2, [r1], #1
    3336:	f803 2f01 	strb.w	r2, [r3, #1]!
    333a:	4561      	cmp	r1, ip
    333c:	d1f9      	bne.n	3332 <memmove+0xde>
    333e:	bd70      	pop	{r4, r5, r6, pc}
    3340:	f102 3cff 	add.w	ip, r2, #4294967295
    3344:	4603      	mov	r3, r0
    3346:	e79b      	b.n	3280 <memmove+0x2c>
    3348:	4622      	mov	r2, r4
    334a:	e7eb      	b.n	3324 <memmove+0xd0>

0000334c <memset>:
    334c:	0783      	lsls	r3, r0, #30
    334e:	b530      	push	{r4, r5, lr}
    3350:	d048      	beq.n	33e4 <memset+0x98>
    3352:	1e54      	subs	r4, r2, #1
    3354:	2a00      	cmp	r2, #0
    3356:	d03f      	beq.n	33d8 <memset+0x8c>
    3358:	b2ca      	uxtb	r2, r1
    335a:	4603      	mov	r3, r0
    335c:	e001      	b.n	3362 <memset+0x16>
    335e:	3c01      	subs	r4, #1
    3360:	d33a      	bcc.n	33d8 <memset+0x8c>
    3362:	f803 2b01 	strb.w	r2, [r3], #1
    3366:	079d      	lsls	r5, r3, #30
    3368:	d1f9      	bne.n	335e <memset+0x12>
    336a:	2c03      	cmp	r4, #3
    336c:	d92d      	bls.n	33ca <memset+0x7e>
    336e:	b2cd      	uxtb	r5, r1
    3370:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3374:	2c0f      	cmp	r4, #15
    3376:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    337a:	d936      	bls.n	33ea <memset+0x9e>
    337c:	f1a4 0210 	sub.w	r2, r4, #16
    3380:	f022 0c0f 	bic.w	ip, r2, #15
    3384:	f103 0e20 	add.w	lr, r3, #32
    3388:	44e6      	add	lr, ip
    338a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    338e:	f103 0210 	add.w	r2, r3, #16
    3392:	e942 5504 	strd	r5, r5, [r2, #-16]
    3396:	e942 5502 	strd	r5, r5, [r2, #-8]
    339a:	3210      	adds	r2, #16
    339c:	4572      	cmp	r2, lr
    339e:	d1f8      	bne.n	3392 <memset+0x46>
    33a0:	f10c 0201 	add.w	r2, ip, #1
    33a4:	f014 0f0c 	tst.w	r4, #12
    33a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    33ac:	f004 0c0f 	and.w	ip, r4, #15
    33b0:	d013      	beq.n	33da <memset+0x8e>
    33b2:	f1ac 0304 	sub.w	r3, ip, #4
    33b6:	f023 0303 	bic.w	r3, r3, #3
    33ba:	3304      	adds	r3, #4
    33bc:	4413      	add	r3, r2
    33be:	f842 5b04 	str.w	r5, [r2], #4
    33c2:	4293      	cmp	r3, r2
    33c4:	d1fb      	bne.n	33be <memset+0x72>
    33c6:	f00c 0403 	and.w	r4, ip, #3
    33ca:	b12c      	cbz	r4, 33d8 <memset+0x8c>
    33cc:	b2c9      	uxtb	r1, r1
    33ce:	441c      	add	r4, r3
    33d0:	f803 1b01 	strb.w	r1, [r3], #1
    33d4:	429c      	cmp	r4, r3
    33d6:	d1fb      	bne.n	33d0 <memset+0x84>
    33d8:	bd30      	pop	{r4, r5, pc}
    33da:	4664      	mov	r4, ip
    33dc:	4613      	mov	r3, r2
    33de:	2c00      	cmp	r4, #0
    33e0:	d1f4      	bne.n	33cc <memset+0x80>
    33e2:	e7f9      	b.n	33d8 <memset+0x8c>
    33e4:	4603      	mov	r3, r0
    33e6:	4614      	mov	r4, r2
    33e8:	e7bf      	b.n	336a <memset+0x1e>
    33ea:	461a      	mov	r2, r3
    33ec:	46a4      	mov	ip, r4
    33ee:	e7e0      	b.n	33b2 <memset+0x66>

000033f0 <strncpy>:
    33f0:	ea40 0301 	orr.w	r3, r0, r1
    33f4:	079b      	lsls	r3, r3, #30
    33f6:	b530      	push	{r4, r5, lr}
    33f8:	d101      	bne.n	33fe <strncpy+0xe>
    33fa:	2a03      	cmp	r2, #3
    33fc:	d80f      	bhi.n	341e <strncpy+0x2e>
    33fe:	4684      	mov	ip, r0
    3400:	f101 3eff 	add.w	lr, r1, #4294967295
    3404:	e007      	b.n	3416 <strncpy+0x26>
    3406:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    340a:	f803 1b01 	strb.w	r1, [r3], #1
    340e:	1e54      	subs	r4, r2, #1
    3410:	b1c1      	cbz	r1, 3444 <strncpy+0x54>
    3412:	469c      	mov	ip, r3
    3414:	4622      	mov	r2, r4
    3416:	4663      	mov	r3, ip
    3418:	2a00      	cmp	r2, #0
    341a:	d1f4      	bne.n	3406 <strncpy+0x16>
    341c:	bd30      	pop	{r4, r5, pc}
    341e:	460b      	mov	r3, r1
    3420:	4684      	mov	ip, r0
    3422:	4619      	mov	r1, r3
    3424:	f853 5b04 	ldr.w	r5, [r3], #4
    3428:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    342c:	ea24 0405 	bic.w	r4, r4, r5
    3430:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    3434:	d1e4      	bne.n	3400 <strncpy+0x10>
    3436:	3a04      	subs	r2, #4
    3438:	2a03      	cmp	r2, #3
    343a:	f84c 5b04 	str.w	r5, [ip], #4
    343e:	4619      	mov	r1, r3
    3440:	d8ef      	bhi.n	3422 <strncpy+0x32>
    3442:	e7dd      	b.n	3400 <strncpy+0x10>
    3444:	4494      	add	ip, r2
    3446:	2c00      	cmp	r4, #0
    3448:	d0e8      	beq.n	341c <strncpy+0x2c>
    344a:	f803 1b01 	strb.w	r1, [r3], #1
    344e:	4563      	cmp	r3, ip
    3450:	d1fb      	bne.n	344a <strncpy+0x5a>
    3452:	bd30      	pop	{r4, r5, pc}

00003454 <_sbrk_r>:
    3454:	b538      	push	{r3, r4, r5, lr}
    3456:	4d07      	ldr	r5, [pc, #28]	; (3474 <_sbrk_r+0x20>)
    3458:	2200      	movs	r2, #0
    345a:	4604      	mov	r4, r0
    345c:	4608      	mov	r0, r1
    345e:	602a      	str	r2, [r5, #0]
    3460:	f7fd fcfa 	bl	e58 <_sbrk>
    3464:	1c43      	adds	r3, r0, #1
    3466:	d000      	beq.n	346a <_sbrk_r+0x16>
    3468:	bd38      	pop	{r3, r4, r5, pc}
    346a:	682b      	ldr	r3, [r5, #0]
    346c:	2b00      	cmp	r3, #0
    346e:	d0fb      	beq.n	3468 <_sbrk_r+0x14>
    3470:	6023      	str	r3, [r4, #0]
    3472:	bd38      	pop	{r3, r4, r5, pc}
    3474:	1fff901c 	.word	0x1fff901c

00003478 <__errno>:
    3478:	4b01      	ldr	r3, [pc, #4]	; (3480 <__errno+0x8>)
    347a:	6818      	ldr	r0, [r3, #0]
    347c:	4770      	bx	lr
    347e:	bf00      	nop
    3480:	1fff8d18 	.word	0x1fff8d18

00003484 <__libc_init_array>:
    3484:	b570      	push	{r4, r5, r6, lr}
    3486:	4e0d      	ldr	r6, [pc, #52]	; (34bc <__libc_init_array+0x38>)
    3488:	4d0d      	ldr	r5, [pc, #52]	; (34c0 <__libc_init_array+0x3c>)
    348a:	1b76      	subs	r6, r6, r5
    348c:	10b6      	asrs	r6, r6, #2
    348e:	d006      	beq.n	349e <__libc_init_array+0x1a>
    3490:	2400      	movs	r4, #0
    3492:	f855 3b04 	ldr.w	r3, [r5], #4
    3496:	3401      	adds	r4, #1
    3498:	4798      	blx	r3
    349a:	42a6      	cmp	r6, r4
    349c:	d1f9      	bne.n	3492 <__libc_init_array+0xe>
    349e:	4e09      	ldr	r6, [pc, #36]	; (34c4 <__libc_init_array+0x40>)
    34a0:	4d09      	ldr	r5, [pc, #36]	; (34c8 <__libc_init_array+0x44>)
    34a2:	1b76      	subs	r6, r6, r5
    34a4:	f000 fd12 	bl	3ecc <_init>
    34a8:	10b6      	asrs	r6, r6, #2
    34aa:	d006      	beq.n	34ba <__libc_init_array+0x36>
    34ac:	2400      	movs	r4, #0
    34ae:	f855 3b04 	ldr.w	r3, [r5], #4
    34b2:	3401      	adds	r4, #1
    34b4:	4798      	blx	r3
    34b6:	42a6      	cmp	r6, r4
    34b8:	d1f9      	bne.n	34ae <__libc_init_array+0x2a>
    34ba:	bd70      	pop	{r4, r5, r6, pc}
    34bc:	00003ed8 	.word	0x00003ed8
    34c0:	00003ed8 	.word	0x00003ed8
    34c4:	00003ee4 	.word	0x00003ee4
    34c8:	00003ed8 	.word	0x00003ed8

000034cc <__retarget_lock_acquire_recursive>:
    34cc:	4770      	bx	lr
    34ce:	bf00      	nop

000034d0 <__retarget_lock_release_recursive>:
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop
    34d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    34d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    34dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    34e0:	eba2 0003 	sub.w	r0, r2, r3
    34e4:	4770      	bx	lr
    34e6:	bf00      	nop

000034e8 <strcmp>:
    34e8:	7802      	ldrb	r2, [r0, #0]
    34ea:	780b      	ldrb	r3, [r1, #0]
    34ec:	2a01      	cmp	r2, #1
    34ee:	bf28      	it	cs
    34f0:	429a      	cmpcs	r2, r3
    34f2:	d1f5      	bne.n	34e0 <__retarget_lock_release_recursive+0x10>
    34f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    34f8:	ea40 0401 	orr.w	r4, r0, r1
    34fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3500:	f06f 0c00 	mvn.w	ip, #0
    3504:	ea4f 7244 	mov.w	r2, r4, lsl #29
    3508:	b312      	cbz	r2, 3550 <strcmp+0x68>
    350a:	ea80 0401 	eor.w	r4, r0, r1
    350e:	f014 0f07 	tst.w	r4, #7
    3512:	d16a      	bne.n	35ea <strcmp+0x102>
    3514:	f000 0407 	and.w	r4, r0, #7
    3518:	f020 0007 	bic.w	r0, r0, #7
    351c:	f004 0503 	and.w	r5, r4, #3
    3520:	f021 0107 	bic.w	r1, r1, #7
    3524:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3528:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    352c:	f014 0f04 	tst.w	r4, #4
    3530:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3534:	fa0c f405 	lsl.w	r4, ip, r5
    3538:	ea62 0204 	orn	r2, r2, r4
    353c:	ea66 0604 	orn	r6, r6, r4
    3540:	d00a      	beq.n	3558 <strcmp+0x70>
    3542:	ea63 0304 	orn	r3, r3, r4
    3546:	4662      	mov	r2, ip
    3548:	ea67 0704 	orn	r7, r7, r4
    354c:	4666      	mov	r6, ip
    354e:	e003      	b.n	3558 <strcmp+0x70>
    3550:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    3554:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3558:	fa82 f54c 	uadd8	r5, r2, ip
    355c:	ea82 0406 	eor.w	r4, r2, r6
    3560:	faa4 f48c 	sel	r4, r4, ip
    3564:	bb6c      	cbnz	r4, 35c2 <strcmp+0xda>
    3566:	fa83 f54c 	uadd8	r5, r3, ip
    356a:	ea83 0507 	eor.w	r5, r3, r7
    356e:	faa5 f58c 	sel	r5, r5, ip
    3572:	b995      	cbnz	r5, 359a <strcmp+0xb2>
    3574:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    3578:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    357c:	fa82 f54c 	uadd8	r5, r2, ip
    3580:	ea82 0406 	eor.w	r4, r2, r6
    3584:	faa4 f48c 	sel	r4, r4, ip
    3588:	fa83 f54c 	uadd8	r5, r3, ip
    358c:	ea83 0507 	eor.w	r5, r3, r7
    3590:	faa5 f58c 	sel	r5, r5, ip
    3594:	4325      	orrs	r5, r4
    3596:	d0db      	beq.n	3550 <strcmp+0x68>
    3598:	b99c      	cbnz	r4, 35c2 <strcmp+0xda>
    359a:	ba2d      	rev	r5, r5
    359c:	fab5 f485 	clz	r4, r5
    35a0:	f024 0407 	bic.w	r4, r4, #7
    35a4:	fa27 f104 	lsr.w	r1, r7, r4
    35a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    35ac:	fa23 f304 	lsr.w	r3, r3, r4
    35b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    35b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    35b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    35bc:	eba0 0001 	sub.w	r0, r0, r1
    35c0:	4770      	bx	lr
    35c2:	ba24      	rev	r4, r4
    35c4:	fab4 f484 	clz	r4, r4
    35c8:	f024 0407 	bic.w	r4, r4, #7
    35cc:	fa26 f104 	lsr.w	r1, r6, r4
    35d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    35d4:	fa22 f204 	lsr.w	r2, r2, r4
    35d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    35dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    35e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    35e4:	eba0 0001 	sub.w	r0, r0, r1
    35e8:	4770      	bx	lr
    35ea:	f014 0f03 	tst.w	r4, #3
    35ee:	d13c      	bne.n	366a <strcmp+0x182>
    35f0:	f010 0403 	ands.w	r4, r0, #3
    35f4:	d128      	bne.n	3648 <strcmp+0x160>
    35f6:	f850 2b08 	ldr.w	r2, [r0], #8
    35fa:	f851 3b08 	ldr.w	r3, [r1], #8
    35fe:	fa82 f54c 	uadd8	r5, r2, ip
    3602:	ea82 0503 	eor.w	r5, r2, r3
    3606:	faa5 f58c 	sel	r5, r5, ip
    360a:	b95d      	cbnz	r5, 3624 <strcmp+0x13c>
    360c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3610:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3614:	fa82 f54c 	uadd8	r5, r2, ip
    3618:	ea82 0503 	eor.w	r5, r2, r3
    361c:	faa5 f58c 	sel	r5, r5, ip
    3620:	2d00      	cmp	r5, #0
    3622:	d0e8      	beq.n	35f6 <strcmp+0x10e>
    3624:	ba2d      	rev	r5, r5
    3626:	fab5 f485 	clz	r4, r5
    362a:	f024 0407 	bic.w	r4, r4, #7
    362e:	fa23 f104 	lsr.w	r1, r3, r4
    3632:	fa22 f204 	lsr.w	r2, r2, r4
    3636:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    363a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    363e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3642:	eba0 0001 	sub.w	r0, r0, r1
    3646:	4770      	bx	lr
    3648:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    364c:	f020 0003 	bic.w	r0, r0, #3
    3650:	f850 2b08 	ldr.w	r2, [r0], #8
    3654:	f021 0103 	bic.w	r1, r1, #3
    3658:	f851 3b08 	ldr.w	r3, [r1], #8
    365c:	fa0c f404 	lsl.w	r4, ip, r4
    3660:	ea62 0204 	orn	r2, r2, r4
    3664:	ea63 0304 	orn	r3, r3, r4
    3668:	e7c9      	b.n	35fe <strcmp+0x116>
    366a:	f010 0403 	ands.w	r4, r0, #3
    366e:	d01a      	beq.n	36a6 <strcmp+0x1be>
    3670:	eba1 0104 	sub.w	r1, r1, r4
    3674:	f020 0003 	bic.w	r0, r0, #3
    3678:	07e4      	lsls	r4, r4, #31
    367a:	f850 2b04 	ldr.w	r2, [r0], #4
    367e:	d006      	beq.n	368e <strcmp+0x1a6>
    3680:	d20f      	bcs.n	36a2 <strcmp+0x1ba>
    3682:	788b      	ldrb	r3, [r1, #2]
    3684:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    3688:	1ae4      	subs	r4, r4, r3
    368a:	d106      	bne.n	369a <strcmp+0x1b2>
    368c:	b12b      	cbz	r3, 369a <strcmp+0x1b2>
    368e:	78cb      	ldrb	r3, [r1, #3]
    3690:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    3694:	1ae4      	subs	r4, r4, r3
    3696:	d100      	bne.n	369a <strcmp+0x1b2>
    3698:	b91b      	cbnz	r3, 36a2 <strcmp+0x1ba>
    369a:	4620      	mov	r0, r4
    369c:	f85d 4b10 	ldr.w	r4, [sp], #16
    36a0:	4770      	bx	lr
    36a2:	f101 0104 	add.w	r1, r1, #4
    36a6:	f850 2b04 	ldr.w	r2, [r0], #4
    36aa:	07cc      	lsls	r4, r1, #31
    36ac:	f021 0103 	bic.w	r1, r1, #3
    36b0:	f851 3b04 	ldr.w	r3, [r1], #4
    36b4:	d848      	bhi.n	3748 <strcmp+0x260>
    36b6:	d224      	bcs.n	3702 <strcmp+0x21a>
    36b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    36bc:	fa82 f54c 	uadd8	r5, r2, ip
    36c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    36c4:	faa5 f58c 	sel	r5, r5, ip
    36c8:	d10a      	bne.n	36e0 <strcmp+0x1f8>
    36ca:	b965      	cbnz	r5, 36e6 <strcmp+0x1fe>
    36cc:	f851 3b04 	ldr.w	r3, [r1], #4
    36d0:	ea84 0402 	eor.w	r4, r4, r2
    36d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    36d8:	d10e      	bne.n	36f8 <strcmp+0x210>
    36da:	f850 2b04 	ldr.w	r2, [r0], #4
    36de:	e7eb      	b.n	36b8 <strcmp+0x1d0>
    36e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    36e4:	e055      	b.n	3792 <strcmp+0x2aa>
    36e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    36ea:	d14d      	bne.n	3788 <strcmp+0x2a0>
    36ec:	7808      	ldrb	r0, [r1, #0]
    36ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    36f2:	f1c0 0000 	rsb	r0, r0, #0
    36f6:	4770      	bx	lr
    36f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    36fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3700:	e047      	b.n	3792 <strcmp+0x2aa>
    3702:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    3706:	fa82 f54c 	uadd8	r5, r2, ip
    370a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    370e:	faa5 f58c 	sel	r5, r5, ip
    3712:	d10a      	bne.n	372a <strcmp+0x242>
    3714:	b965      	cbnz	r5, 3730 <strcmp+0x248>
    3716:	f851 3b04 	ldr.w	r3, [r1], #4
    371a:	ea84 0402 	eor.w	r4, r4, r2
    371e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    3722:	d10c      	bne.n	373e <strcmp+0x256>
    3724:	f850 2b04 	ldr.w	r2, [r0], #4
    3728:	e7eb      	b.n	3702 <strcmp+0x21a>
    372a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    372e:	e030      	b.n	3792 <strcmp+0x2aa>
    3730:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    3734:	d128      	bne.n	3788 <strcmp+0x2a0>
    3736:	880b      	ldrh	r3, [r1, #0]
    3738:	ea4f 4212 	mov.w	r2, r2, lsr #16
    373c:	e029      	b.n	3792 <strcmp+0x2aa>
    373e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    3742:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    3746:	e024      	b.n	3792 <strcmp+0x2aa>
    3748:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    374c:	fa82 f54c 	uadd8	r5, r2, ip
    3750:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    3754:	faa5 f58c 	sel	r5, r5, ip
    3758:	d10a      	bne.n	3770 <strcmp+0x288>
    375a:	b965      	cbnz	r5, 3776 <strcmp+0x28e>
    375c:	f851 3b04 	ldr.w	r3, [r1], #4
    3760:	ea84 0402 	eor.w	r4, r4, r2
    3764:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    3768:	d109      	bne.n	377e <strcmp+0x296>
    376a:	f850 2b04 	ldr.w	r2, [r0], #4
    376e:	e7eb      	b.n	3748 <strcmp+0x260>
    3770:	ea4f 6313 	mov.w	r3, r3, lsr #24
    3774:	e00d      	b.n	3792 <strcmp+0x2aa>
    3776:	f015 0fff 	tst.w	r5, #255	; 0xff
    377a:	d105      	bne.n	3788 <strcmp+0x2a0>
    377c:	680b      	ldr	r3, [r1, #0]
    377e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    3782:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3786:	e004      	b.n	3792 <strcmp+0x2aa>
    3788:	f04f 0000 	mov.w	r0, #0
    378c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3790:	4770      	bx	lr
    3792:	ba12      	rev	r2, r2
    3794:	ba1b      	rev	r3, r3
    3796:	fa82 f44c 	uadd8	r4, r2, ip
    379a:	ea82 0403 	eor.w	r4, r2, r3
    379e:	faa4 f58c 	sel	r5, r4, ip
    37a2:	fab5 f485 	clz	r4, r5
    37a6:	fa02 f204 	lsl.w	r2, r2, r4
    37aa:	fa03 f304 	lsl.w	r3, r3, r4
    37ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    37b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    37b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    37ba:	4770      	bx	lr

000037bc <strcpy>:
    37bc:	ea80 0201 	eor.w	r2, r0, r1
    37c0:	4684      	mov	ip, r0
    37c2:	f012 0f03 	tst.w	r2, #3
    37c6:	d14f      	bne.n	3868 <strcpy+0xac>
    37c8:	f011 0f03 	tst.w	r1, #3
    37cc:	d132      	bne.n	3834 <strcpy+0x78>
    37ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
    37d2:	f011 0f04 	tst.w	r1, #4
    37d6:	f851 3b04 	ldr.w	r3, [r1], #4
    37da:	d00b      	beq.n	37f4 <strcpy+0x38>
    37dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    37e0:	439a      	bics	r2, r3
    37e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    37e6:	bf04      	itt	eq
    37e8:	f84c 3b04 	streq.w	r3, [ip], #4
    37ec:	f851 3b04 	ldreq.w	r3, [r1], #4
    37f0:	d116      	bne.n	3820 <strcpy+0x64>
    37f2:	bf00      	nop
    37f4:	f851 4b04 	ldr.w	r4, [r1], #4
    37f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    37fc:	439a      	bics	r2, r3
    37fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3802:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    3806:	d10b      	bne.n	3820 <strcpy+0x64>
    3808:	f84c 3b04 	str.w	r3, [ip], #4
    380c:	43a2      	bics	r2, r4
    380e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3812:	bf04      	itt	eq
    3814:	f851 3b04 	ldreq.w	r3, [r1], #4
    3818:	f84c 4b04 	streq.w	r4, [ip], #4
    381c:	d0ea      	beq.n	37f4 <strcpy+0x38>
    381e:	4623      	mov	r3, r4
    3820:	f80c 3b01 	strb.w	r3, [ip], #1
    3824:	f013 0fff 	tst.w	r3, #255	; 0xff
    3828:	ea4f 2333 	mov.w	r3, r3, ror #8
    382c:	d1f8      	bne.n	3820 <strcpy+0x64>
    382e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3832:	4770      	bx	lr
    3834:	f011 0f01 	tst.w	r1, #1
    3838:	d006      	beq.n	3848 <strcpy+0x8c>
    383a:	f811 2b01 	ldrb.w	r2, [r1], #1
    383e:	f80c 2b01 	strb.w	r2, [ip], #1
    3842:	2a00      	cmp	r2, #0
    3844:	bf08      	it	eq
    3846:	4770      	bxeq	lr
    3848:	f011 0f02 	tst.w	r1, #2
    384c:	d0bf      	beq.n	37ce <strcpy+0x12>
    384e:	f831 2b02 	ldrh.w	r2, [r1], #2
    3852:	f012 0fff 	tst.w	r2, #255	; 0xff
    3856:	bf16      	itet	ne
    3858:	f82c 2b02 	strhne.w	r2, [ip], #2
    385c:	f88c 2000 	strbeq.w	r2, [ip]
    3860:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    3864:	d1b3      	bne.n	37ce <strcpy+0x12>
    3866:	4770      	bx	lr
    3868:	f811 2b01 	ldrb.w	r2, [r1], #1
    386c:	f80c 2b01 	strb.w	r2, [ip], #1
    3870:	2a00      	cmp	r2, #0
    3872:	d1f9      	bne.n	3868 <strcpy+0xac>
    3874:	4770      	bx	lr
    3876:	bf00      	nop
    3878:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    387c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00003880 <strlen>:
    3880:	f890 f000 	pld	[r0]
    3884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3888:	f020 0107 	bic.w	r1, r0, #7
    388c:	f06f 0c00 	mvn.w	ip, #0
    3890:	f010 0407 	ands.w	r4, r0, #7
    3894:	f891 f020 	pld	[r1, #32]
    3898:	f040 8049 	bne.w	392e <strlen+0xae>
    389c:	f04f 0400 	mov.w	r4, #0
    38a0:	f06f 0007 	mvn.w	r0, #7
    38a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    38a8:	f891 f040 	pld	[r1, #64]	; 0x40
    38ac:	f100 0008 	add.w	r0, r0, #8
    38b0:	fa82 f24c 	uadd8	r2, r2, ip
    38b4:	faa4 f28c 	sel	r2, r4, ip
    38b8:	fa83 f34c 	uadd8	r3, r3, ip
    38bc:	faa2 f38c 	sel	r3, r2, ip
    38c0:	bb4b      	cbnz	r3, 3916 <strlen+0x96>
    38c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    38c6:	fa82 f24c 	uadd8	r2, r2, ip
    38ca:	f100 0008 	add.w	r0, r0, #8
    38ce:	faa4 f28c 	sel	r2, r4, ip
    38d2:	fa83 f34c 	uadd8	r3, r3, ip
    38d6:	faa2 f38c 	sel	r3, r2, ip
    38da:	b9e3      	cbnz	r3, 3916 <strlen+0x96>
    38dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    38e0:	fa82 f24c 	uadd8	r2, r2, ip
    38e4:	f100 0008 	add.w	r0, r0, #8
    38e8:	faa4 f28c 	sel	r2, r4, ip
    38ec:	fa83 f34c 	uadd8	r3, r3, ip
    38f0:	faa2 f38c 	sel	r3, r2, ip
    38f4:	b97b      	cbnz	r3, 3916 <strlen+0x96>
    38f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    38fa:	f101 0120 	add.w	r1, r1, #32
    38fe:	fa82 f24c 	uadd8	r2, r2, ip
    3902:	f100 0008 	add.w	r0, r0, #8
    3906:	faa4 f28c 	sel	r2, r4, ip
    390a:	fa83 f34c 	uadd8	r3, r3, ip
    390e:	faa2 f38c 	sel	r3, r2, ip
    3912:	2b00      	cmp	r3, #0
    3914:	d0c6      	beq.n	38a4 <strlen+0x24>
    3916:	2a00      	cmp	r2, #0
    3918:	bf04      	itt	eq
    391a:	3004      	addeq	r0, #4
    391c:	461a      	moveq	r2, r3
    391e:	ba12      	rev	r2, r2
    3920:	fab2 f282 	clz	r2, r2
    3924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    392c:	4770      	bx	lr
    392e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3932:	f004 0503 	and.w	r5, r4, #3
    3936:	f1c4 0000 	rsb	r0, r4, #0
    393a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    393e:	f014 0f04 	tst.w	r4, #4
    3942:	f891 f040 	pld	[r1, #64]	; 0x40
    3946:	fa0c f505 	lsl.w	r5, ip, r5
    394a:	ea62 0205 	orn	r2, r2, r5
    394e:	bf1c      	itt	ne
    3950:	ea63 0305 	ornne	r3, r3, r5
    3954:	4662      	movne	r2, ip
    3956:	f04f 0400 	mov.w	r4, #0
    395a:	e7a9      	b.n	38b0 <strlen+0x30>

0000395c <__register_exitproc>:
    395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3960:	f8df a074 	ldr.w	sl, [pc, #116]	; 39d8 <__register_exitproc+0x7c>
    3964:	4606      	mov	r6, r0
    3966:	f8da 0000 	ldr.w	r0, [sl]
    396a:	4698      	mov	r8, r3
    396c:	460f      	mov	r7, r1
    396e:	4691      	mov	r9, r2
    3970:	f7ff fdac 	bl	34cc <__retarget_lock_acquire_recursive>
    3974:	4b19      	ldr	r3, [pc, #100]	; (39dc <__register_exitproc+0x80>)
    3976:	681c      	ldr	r4, [r3, #0]
    3978:	b324      	cbz	r4, 39c4 <__register_exitproc+0x68>
    397a:	6865      	ldr	r5, [r4, #4]
    397c:	2d1f      	cmp	r5, #31
    397e:	dc24      	bgt.n	39ca <__register_exitproc+0x6e>
    3980:	b95e      	cbnz	r6, 399a <__register_exitproc+0x3e>
    3982:	1c6b      	adds	r3, r5, #1
    3984:	3502      	adds	r5, #2
    3986:	f8da 0000 	ldr.w	r0, [sl]
    398a:	6063      	str	r3, [r4, #4]
    398c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    3990:	f7ff fd9e 	bl	34d0 <__retarget_lock_release_recursive>
    3994:	2000      	movs	r0, #0
    3996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    399a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    399e:	2301      	movs	r3, #1
    39a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    39a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    39a8:	40ab      	lsls	r3, r5
    39aa:	431a      	orrs	r2, r3
    39ac:	2e02      	cmp	r6, #2
    39ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    39b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    39b6:	d1e4      	bne.n	3982 <__register_exitproc+0x26>
    39b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    39bc:	431a      	orrs	r2, r3
    39be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    39c2:	e7de      	b.n	3982 <__register_exitproc+0x26>
    39c4:	4c06      	ldr	r4, [pc, #24]	; (39e0 <__register_exitproc+0x84>)
    39c6:	601c      	str	r4, [r3, #0]
    39c8:	e7d7      	b.n	397a <__register_exitproc+0x1e>
    39ca:	f8da 0000 	ldr.w	r0, [sl]
    39ce:	f7ff fd7f 	bl	34d0 <__retarget_lock_release_recursive>
    39d2:	f04f 30ff 	mov.w	r0, #4294967295
    39d6:	e7de      	b.n	3996 <__register_exitproc+0x3a>
    39d8:	1fff8d1c 	.word	0x1fff8d1c
    39dc:	1fff91b8 	.word	0x1fff91b8
    39e0:	1fff9028 	.word	0x1fff9028

000039e4 <register_fini>:
    39e4:	4b02      	ldr	r3, [pc, #8]	; (39f0 <register_fini+0xc>)
    39e6:	b113      	cbz	r3, 39ee <register_fini+0xa>
    39e8:	4802      	ldr	r0, [pc, #8]	; (39f4 <register_fini+0x10>)
    39ea:	f000 b805 	b.w	39f8 <atexit>
    39ee:	4770      	bx	lr
    39f0:	00000000 	.word	0x00000000
    39f4:	00003cb1 	.word	0x00003cb1

000039f8 <atexit>:
    39f8:	2300      	movs	r3, #0
    39fa:	4601      	mov	r1, r0
    39fc:	461a      	mov	r2, r3
    39fe:	4618      	mov	r0, r3
    3a00:	f7ff bfac 	b.w	395c <__register_exitproc>

00003a04 <_malloc_trim_r>:
    3a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a06:	4f24      	ldr	r7, [pc, #144]	; (3a98 <_malloc_trim_r+0x94>)
    3a08:	460c      	mov	r4, r1
    3a0a:	4606      	mov	r6, r0
    3a0c:	f7ff fa18 	bl	2e40 <__malloc_lock>
    3a10:	68bb      	ldr	r3, [r7, #8]
    3a12:	685d      	ldr	r5, [r3, #4]
    3a14:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    3a18:	310f      	adds	r1, #15
    3a1a:	f025 0503 	bic.w	r5, r5, #3
    3a1e:	194b      	adds	r3, r1, r5
    3a20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    3a24:	f023 030f 	bic.w	r3, r3, #15
    3a28:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    3a2c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3a30:	db07      	blt.n	3a42 <_malloc_trim_r+0x3e>
    3a32:	2100      	movs	r1, #0
    3a34:	4630      	mov	r0, r6
    3a36:	f7ff fd0d 	bl	3454 <_sbrk_r>
    3a3a:	68bb      	ldr	r3, [r7, #8]
    3a3c:	442b      	add	r3, r5
    3a3e:	4298      	cmp	r0, r3
    3a40:	d004      	beq.n	3a4c <_malloc_trim_r+0x48>
    3a42:	4630      	mov	r0, r6
    3a44:	f7ff fa02 	bl	2e4c <__malloc_unlock>
    3a48:	2000      	movs	r0, #0
    3a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a4c:	4261      	negs	r1, r4
    3a4e:	4630      	mov	r0, r6
    3a50:	f7ff fd00 	bl	3454 <_sbrk_r>
    3a54:	3001      	adds	r0, #1
    3a56:	d00d      	beq.n	3a74 <_malloc_trim_r+0x70>
    3a58:	4a10      	ldr	r2, [pc, #64]	; (3a9c <_malloc_trim_r+0x98>)
    3a5a:	68bb      	ldr	r3, [r7, #8]
    3a5c:	1b2d      	subs	r5, r5, r4
    3a5e:	f045 0501 	orr.w	r5, r5, #1
    3a62:	605d      	str	r5, [r3, #4]
    3a64:	6813      	ldr	r3, [r2, #0]
    3a66:	4630      	mov	r0, r6
    3a68:	1b1b      	subs	r3, r3, r4
    3a6a:	6013      	str	r3, [r2, #0]
    3a6c:	f7ff f9ee 	bl	2e4c <__malloc_unlock>
    3a70:	2001      	movs	r0, #1
    3a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a74:	2100      	movs	r1, #0
    3a76:	4630      	mov	r0, r6
    3a78:	f7ff fcec 	bl	3454 <_sbrk_r>
    3a7c:	68ba      	ldr	r2, [r7, #8]
    3a7e:	1a83      	subs	r3, r0, r2
    3a80:	2b0f      	cmp	r3, #15
    3a82:	ddde      	ble.n	3a42 <_malloc_trim_r+0x3e>
    3a84:	f043 0301 	orr.w	r3, r3, #1
    3a88:	6053      	str	r3, [r2, #4]
    3a8a:	4b05      	ldr	r3, [pc, #20]	; (3aa0 <_malloc_trim_r+0x9c>)
    3a8c:	4903      	ldr	r1, [pc, #12]	; (3a9c <_malloc_trim_r+0x98>)
    3a8e:	681b      	ldr	r3, [r3, #0]
    3a90:	1ac0      	subs	r0, r0, r3
    3a92:	6008      	str	r0, [r1, #0]
    3a94:	e7d5      	b.n	3a42 <_malloc_trim_r+0x3e>
    3a96:	bf00      	nop
    3a98:	1fff87e4 	.word	0x1fff87e4
    3a9c:	1fff8eb0 	.word	0x1fff8eb0
    3aa0:	1fff8bec 	.word	0x1fff8bec

00003aa4 <_free_r>:
    3aa4:	2900      	cmp	r1, #0
    3aa6:	d061      	beq.n	3b6c <_free_r+0xc8>
    3aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aaa:	460c      	mov	r4, r1
    3aac:	4606      	mov	r6, r0
    3aae:	f7ff f9c7 	bl	2e40 <__malloc_lock>
    3ab2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    3ab6:	4f7b      	ldr	r7, [pc, #492]	; (3ca4 <_free_r+0x200>)
    3ab8:	f1a4 0508 	sub.w	r5, r4, #8
    3abc:	f022 0101 	bic.w	r1, r2, #1
    3ac0:	eb05 0c01 	add.w	ip, r5, r1
    3ac4:	68b8      	ldr	r0, [r7, #8]
    3ac6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3aca:	4560      	cmp	r0, ip
    3acc:	f023 0303 	bic.w	r3, r3, #3
    3ad0:	f000 808b 	beq.w	3bea <_free_r+0x146>
    3ad4:	07d2      	lsls	r2, r2, #31
    3ad6:	f8cc 3004 	str.w	r3, [ip, #4]
    3ada:	d432      	bmi.n	3b42 <_free_r+0x9e>
    3adc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    3ae0:	1aad      	subs	r5, r5, r2
    3ae2:	4411      	add	r1, r2
    3ae4:	68aa      	ldr	r2, [r5, #8]
    3ae6:	f107 0008 	add.w	r0, r7, #8
    3aea:	4282      	cmp	r2, r0
    3aec:	d06a      	beq.n	3bc4 <_free_r+0x120>
    3aee:	eb0c 0403 	add.w	r4, ip, r3
    3af2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    3af6:	68ec      	ldr	r4, [r5, #12]
    3af8:	60d4      	str	r4, [r2, #12]
    3afa:	f01e 0f01 	tst.w	lr, #1
    3afe:	60a2      	str	r2, [r4, #8]
    3b00:	f000 8097 	beq.w	3c32 <_free_r+0x18e>
    3b04:	f041 0301 	orr.w	r3, r1, #1
    3b08:	606b      	str	r3, [r5, #4]
    3b0a:	f8cc 1000 	str.w	r1, [ip]
    3b0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3b12:	d235      	bcs.n	3b80 <_free_r+0xdc>
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	08cb      	lsrs	r3, r1, #3
    3b18:	2201      	movs	r2, #1
    3b1a:	0949      	lsrs	r1, r1, #5
    3b1c:	3301      	adds	r3, #1
    3b1e:	408a      	lsls	r2, r1
    3b20:	4302      	orrs	r2, r0
    3b22:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    3b26:	607a      	str	r2, [r7, #4]
    3b28:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    3b2c:	3a08      	subs	r2, #8
    3b2e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    3b32:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    3b36:	60cd      	str	r5, [r1, #12]
    3b38:	4630      	mov	r0, r6
    3b3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3b3e:	f7ff b985 	b.w	2e4c <__malloc_unlock>
    3b42:	eb0c 0203 	add.w	r2, ip, r3
    3b46:	6852      	ldr	r2, [r2, #4]
    3b48:	07d0      	lsls	r0, r2, #31
    3b4a:	d410      	bmi.n	3b6e <_free_r+0xca>
    3b4c:	4419      	add	r1, r3
    3b4e:	f107 0008 	add.w	r0, r7, #8
    3b52:	f8dc 3008 	ldr.w	r3, [ip, #8]
    3b56:	4283      	cmp	r3, r0
    3b58:	d073      	beq.n	3c42 <_free_r+0x19e>
    3b5a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    3b5e:	60da      	str	r2, [r3, #12]
    3b60:	6093      	str	r3, [r2, #8]
    3b62:	f041 0301 	orr.w	r3, r1, #1
    3b66:	606b      	str	r3, [r5, #4]
    3b68:	5069      	str	r1, [r5, r1]
    3b6a:	e7d0      	b.n	3b0e <_free_r+0x6a>
    3b6c:	4770      	bx	lr
    3b6e:	f041 0301 	orr.w	r3, r1, #1
    3b72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3b76:	f844 3c04 	str.w	r3, [r4, #-4]
    3b7a:	f8cc 1000 	str.w	r1, [ip]
    3b7e:	d3c9      	bcc.n	3b14 <_free_r+0x70>
    3b80:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    3b84:	ea4f 2351 	mov.w	r3, r1, lsr #9
    3b88:	d248      	bcs.n	3c1c <_free_r+0x178>
    3b8a:	098b      	lsrs	r3, r1, #6
    3b8c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    3b90:	f103 0238 	add.w	r2, r3, #56	; 0x38
    3b94:	00c3      	lsls	r3, r0, #3
    3b96:	18f8      	adds	r0, r7, r3
    3b98:	58fb      	ldr	r3, [r7, r3]
    3b9a:	3808      	subs	r0, #8
    3b9c:	4298      	cmp	r0, r3
    3b9e:	d059      	beq.n	3c54 <_free_r+0x1b0>
    3ba0:	685a      	ldr	r2, [r3, #4]
    3ba2:	f022 0203 	bic.w	r2, r2, #3
    3ba6:	428a      	cmp	r2, r1
    3ba8:	d902      	bls.n	3bb0 <_free_r+0x10c>
    3baa:	689b      	ldr	r3, [r3, #8]
    3bac:	4298      	cmp	r0, r3
    3bae:	d1f7      	bne.n	3ba0 <_free_r+0xfc>
    3bb0:	68d8      	ldr	r0, [r3, #12]
    3bb2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    3bb6:	6085      	str	r5, [r0, #8]
    3bb8:	60dd      	str	r5, [r3, #12]
    3bba:	4630      	mov	r0, r6
    3bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3bc0:	f7ff b944 	b.w	2e4c <__malloc_unlock>
    3bc4:	eb0c 0203 	add.w	r2, ip, r3
    3bc8:	6852      	ldr	r2, [r2, #4]
    3bca:	07d2      	lsls	r2, r2, #31
    3bcc:	d463      	bmi.n	3c96 <_free_r+0x1f2>
    3bce:	440b      	add	r3, r1
    3bd0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    3bd4:	60ca      	str	r2, [r1, #12]
    3bd6:	6091      	str	r1, [r2, #8]
    3bd8:	f043 0201 	orr.w	r2, r3, #1
    3bdc:	606a      	str	r2, [r5, #4]
    3bde:	4630      	mov	r0, r6
    3be0:	50eb      	str	r3, [r5, r3]
    3be2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3be6:	f7ff b931 	b.w	2e4c <__malloc_unlock>
    3bea:	440b      	add	r3, r1
    3bec:	07d1      	lsls	r1, r2, #31
    3bee:	d407      	bmi.n	3c00 <_free_r+0x15c>
    3bf0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    3bf4:	1aad      	subs	r5, r5, r2
    3bf6:	4413      	add	r3, r2
    3bf8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    3bfc:	60ca      	str	r2, [r1, #12]
    3bfe:	6091      	str	r1, [r2, #8]
    3c00:	f043 0201 	orr.w	r2, r3, #1
    3c04:	606a      	str	r2, [r5, #4]
    3c06:	4a28      	ldr	r2, [pc, #160]	; (3ca8 <_free_r+0x204>)
    3c08:	60bd      	str	r5, [r7, #8]
    3c0a:	6812      	ldr	r2, [r2, #0]
    3c0c:	429a      	cmp	r2, r3
    3c0e:	d893      	bhi.n	3b38 <_free_r+0x94>
    3c10:	4b26      	ldr	r3, [pc, #152]	; (3cac <_free_r+0x208>)
    3c12:	4630      	mov	r0, r6
    3c14:	6819      	ldr	r1, [r3, #0]
    3c16:	f7ff fef5 	bl	3a04 <_malloc_trim_r>
    3c1a:	e78d      	b.n	3b38 <_free_r+0x94>
    3c1c:	2b14      	cmp	r3, #20
    3c1e:	d90a      	bls.n	3c36 <_free_r+0x192>
    3c20:	2b54      	cmp	r3, #84	; 0x54
    3c22:	d81f      	bhi.n	3c64 <_free_r+0x1c0>
    3c24:	0b0b      	lsrs	r3, r1, #12
    3c26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    3c2a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    3c2e:	00c3      	lsls	r3, r0, #3
    3c30:	e7b1      	b.n	3b96 <_free_r+0xf2>
    3c32:	4419      	add	r1, r3
    3c34:	e78d      	b.n	3b52 <_free_r+0xae>
    3c36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    3c3a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    3c3e:	00c3      	lsls	r3, r0, #3
    3c40:	e7a9      	b.n	3b96 <_free_r+0xf2>
    3c42:	f041 0301 	orr.w	r3, r1, #1
    3c46:	e9c7 5504 	strd	r5, r5, [r7, #16]
    3c4a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    3c4e:	606b      	str	r3, [r5, #4]
    3c50:	5069      	str	r1, [r5, r1]
    3c52:	e771      	b.n	3b38 <_free_r+0x94>
    3c54:	6879      	ldr	r1, [r7, #4]
    3c56:	1092      	asrs	r2, r2, #2
    3c58:	2401      	movs	r4, #1
    3c5a:	fa04 f202 	lsl.w	r2, r4, r2
    3c5e:	430a      	orrs	r2, r1
    3c60:	607a      	str	r2, [r7, #4]
    3c62:	e7a6      	b.n	3bb2 <_free_r+0x10e>
    3c64:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3c68:	d806      	bhi.n	3c78 <_free_r+0x1d4>
    3c6a:	0bcb      	lsrs	r3, r1, #15
    3c6c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    3c70:	f103 0277 	add.w	r2, r3, #119	; 0x77
    3c74:	00c3      	lsls	r3, r0, #3
    3c76:	e78e      	b.n	3b96 <_free_r+0xf2>
    3c78:	f240 5254 	movw	r2, #1364	; 0x554
    3c7c:	4293      	cmp	r3, r2
    3c7e:	d806      	bhi.n	3c8e <_free_r+0x1ea>
    3c80:	0c8b      	lsrs	r3, r1, #18
    3c82:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    3c86:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    3c8a:	00c3      	lsls	r3, r0, #3
    3c8c:	e783      	b.n	3b96 <_free_r+0xf2>
    3c8e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    3c92:	227e      	movs	r2, #126	; 0x7e
    3c94:	e77f      	b.n	3b96 <_free_r+0xf2>
    3c96:	f041 0301 	orr.w	r3, r1, #1
    3c9a:	606b      	str	r3, [r5, #4]
    3c9c:	f8cc 1000 	str.w	r1, [ip]
    3ca0:	e74a      	b.n	3b38 <_free_r+0x94>
    3ca2:	bf00      	nop
    3ca4:	1fff87e4 	.word	0x1fff87e4
    3ca8:	1fff8bf0 	.word	0x1fff8bf0
    3cac:	1fff8ee0 	.word	0x1fff8ee0

00003cb0 <__libc_fini_array>:
    3cb0:	b538      	push	{r3, r4, r5, lr}
    3cb2:	4d07      	ldr	r5, [pc, #28]	; (3cd0 <__libc_fini_array+0x20>)
    3cb4:	4c07      	ldr	r4, [pc, #28]	; (3cd4 <__libc_fini_array+0x24>)
    3cb6:	1b2c      	subs	r4, r5, r4
    3cb8:	10a4      	asrs	r4, r4, #2
    3cba:	d005      	beq.n	3cc8 <__libc_fini_array+0x18>
    3cbc:	3c01      	subs	r4, #1
    3cbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    3cc2:	4798      	blx	r3
    3cc4:	2c00      	cmp	r4, #0
    3cc6:	d1f9      	bne.n	3cbc <__libc_fini_array+0xc>
    3cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3ccc:	f000 b90a 	b.w	3ee4 <__init_array_end>
	...
    3cd8:	69726553 	.word	0x69726553
    3cdc:	52206c61 	.word	0x52206c61
    3ce0:	79646165 	.word	0x79646165
    3ce4:	ffffff00 	.word	0xffffff00
    3ce8:	63617254 	.word	0x63617254
    3cec:	6f4c206b 	.word	0x6f4c206b
    3cf0:	72656461 	.word	0x72656461
    3cf4:	20534320 	.word	0x20534320
    3cf8:	00003376 	.word	0x00003376
    3cfc:	302e3076 	.word	0x302e3076
    3d00:	ff00312e 	.word	0xff00312e
    3d04:	00000069 	.word	0x00000069
    3d08:	61567872 	.word	0x61567872
    3d0c:	3a30306c 	.word	0x3a30306c
    3d10:	00000000 	.word	0x00000000
    3d14:	0000003e 	.word	0x0000003e
    3d18:	61567872 	.word	0x61567872
    3d1c:	3a31306c 	.word	0x3a31306c
    3d20:	00000000 	.word	0x00000000
    3d24:	61567872 	.word	0x61567872
    3d28:	3a32306c 	.word	0x3a32306c
    3d2c:	ffffff00 	.word	0xffffff00
    3d30:	ffff0020 	.word	0xffff0020
    3d34:	ffff003a 	.word	0xffff003a

00003d38 <digital_pin_to_info_PGM>:
    3d38:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    3d48:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    3d58:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    3d68:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    3d78:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    3d88:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    3d98:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    3da8:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    3db8:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    3dc8:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    3dd8:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    3de8:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    3df8:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    3e08:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    3e18:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    3e28:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    3e38:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00003e48 <vtable for usb_serial_class>:
	...
    3e50:	00001cc9 00001cc1 00001cbd 00001cb9     ................
    3e60:	00001cb5 00001cb1 00001cad 00001ca9     ................

00003e70 <_serialEvent_default>:
    3e70:	ffffff00                                ....

00003e74 <usb_descriptor_list>:
    3e74:	00000100 1fff8784 00000012 00000200     ................
    3e84:	1fff8740 00000043 00000300 1fff8798     @...C...........
    3e94:	00000000 04090301 1fff879c 00000000     ................
    3ea4:	04090302 1fff87b4 00000000 04090303     ................
    3eb4:	1fff87cc 00000000 00000000 00000000     ................
    3ec4:	00000000                                ....

00003ec8 <usb_endpoint_config_table>:
    3ec8:	15191500                                ....

00003ecc <_init>:
    3ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ece:	bf00      	nop
    3ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ed2:	bc08      	pop	{r3}
    3ed4:	469e      	mov	lr, r3
    3ed6:	4770      	bx	lr

00003ed8 <__init_array_start>:
    3ed8:	000039e5 	.word	0x000039e5

00003edc <__frame_dummy_init_array_entry>:
    3edc:	00000435 000006d1                       5.......

Disassembly of section .fini:

00003ee4 <_fini>:
    3ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ee6:	bf00      	nop
